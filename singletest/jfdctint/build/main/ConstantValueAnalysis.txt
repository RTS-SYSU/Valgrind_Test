##########################
## Analysis Information ##
##########################
#### Function: __absvdi2
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r2 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !307; ../absvdi2.c:25:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !307; ../absvdi2.c:25:11
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !308; ../absvdi2.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 1, killed $cpsr, debug-location !308; ../absvdi2.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !308; ../absvdi2.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !309 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !309 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 26, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !309; ../absvdi2.c:26:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !310 :: (load (s32) from %stack.1); ../absvdi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !310 :: (load (s32) from %stack.0); ../absvdi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !310; ../absvdi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !310; ../absvdi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !310; ../absvdi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, debug-location !310; ../absvdi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !311; ../absvdi2.c:28:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !311; ../absvdi2.c:28:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !311; ../absvdi2.c:28:5
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __absvsi2
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !316; ../absvsi2.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 1, killed $cpsr, debug-location !316; ../absvsi2.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !316; ../absvsi2.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !317 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !317 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 26, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !317; ../absvsi2.c:26:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !318 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !318; ../absvsi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: Bcc %bb.4, 5, killed $cpsr, debug-location !318; ../absvsi2.c:28:20
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !318 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !318; ../absvsi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !318 :: (load (s32) from %stack.1); ../absvsi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !319; ../absvsi2.c:28:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !319; ../absvsi2.c:28:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !319; ../absvsi2.c:28:5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __addvdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r12 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r12 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !321; ../addvdi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ADCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !321; ../addvdi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !323; ../addvdi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 4, killed $cpsr, debug-location !323; ../addvdi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !323; ../addvdi3.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !324 :: (load (s32) from %stack.0); ../addvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !324 :: (load (s32) from %stack.3); ../addvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !324 :: (load (s32) from %stack.1); ../addvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !324 :: (load (s32) from %stack.2); ../addvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !324; ../addvdi3.c:27:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !324; ../addvdi3.c:27:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 10, killed $cpsr, debug-location !325; ../addvdi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !325; ../addvdi3.c:27:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !326 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !326 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 28, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !326; ../addvdi3.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.7, debug-location !327; ../addvdi3.c:29:5
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !328 :: (load (s32) from %stack.0); ../addvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !328 :: (load (s32) from %stack.3); ../addvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !328 :: (load (s32) from %stack.1); ../addvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !328 :: (load (s32) from %stack.2); ../addvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !328; ../addvdi3.c:32:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !328; ../addvdi3.c:32:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 11, killed $cpsr, debug-location !329; ../addvdi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !329; ../addvdi3.c:32:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !330 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !330 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !330; ../addvdi3.c:33:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: B %bb.7
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !331 :: (load (s32) from %stack.0); ../addvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !331 :: (load (s32) from %stack.1); ../addvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !331; ../addvdi3.c:35:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !331; ../addvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !331; ../addvdi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __addvsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ADDrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !333; ../addvsi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !335; ../addvsi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 4, killed $cpsr, debug-location !335; ../addvsi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !335; ../addvsi3.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !337 :: (load (s32) from %stack.0); ../addvsi3.c:27:13
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !337 :: (load (s32) from %stack.1); ../addvsi3.c:27:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !337; ../addvsi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 10, killed $cpsr, debug-location !337; ../addvsi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !337; ../addvsi3.c:27:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !338 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !338 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 28, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !338; ../addvsi3.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.7, debug-location !339; ../addvsi3.c:29:5
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !341 :: (load (s32) from %stack.0); ../addvsi3.c:32:13
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !341 :: (load (s32) from %stack.1); ../addvsi3.c:32:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !341; ../addvsi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 11, killed $cpsr, debug-location !341; ../addvsi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !341; ../addvsi3.c:32:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !342 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !342 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !342; ../addvsi3.c:33:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: B %bb.7
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !343 :: (load (s32) from %stack.0); ../addvsi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !343; ../addvsi3.c:35:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !343; ../addvsi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !343; ../addvsi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __aeabi_lcmp
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL_pred @__cmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !495; ../cmpdi2.c:48:9
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !496; ../cmpdi2.c:48:24
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !497; ../cmpdi2.c:48:2
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !497; ../cmpdi2.c:48:2
# Before:
not available
# After:
not available
#### Function: __aeabi_ulcmp
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL_pred @__ucmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !1218; ../ucmpdi2.c:48:9
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !1219; ../ucmpdi2.c:48:25
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1220; ../ucmpdi2.c:48:2
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1220; ../ucmpdi2.c:48:2
# Before:
not available
# After:
not available
#### Function: __ashldi3
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !346 :: (store (s32) into %ir.all + 4, basealign 8); ../ashldi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !346 :: (store (s32) into %ir.all, align 8); ../ashldi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !348; ../ashldi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 0, killed $cpsr, debug-location !348; ../ashldi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !348; ../ashldi3.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !350 :: (store (s32) into %ir.low, align 8); ../ashldi3.c:32:22
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !351 :: (dereferenceable load (s32) from %ir.low2, align 8); ../ashldi3.c:33:33
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !352; ../ashldi3.c:33:43
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !353; ../ashldi3.c:33:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !356 :: (store (s32) into %ir.high); ../ashldi3.c:33:23
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !357; ../ashldi3.c:34:5
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !359 :: (load (s32) from %stack.4); ../ashldi3.c:37:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !359; ../ashldi3.c:37:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !359; ../ashldi3.c:37:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !359; ../ashldi3.c:37:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !360; ../ashldi3.c:38:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !361 :: (load (s32) from %stack.4); ../ashldi3.c:39:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !361 :: (dereferenceable load (s32) from %ir.low6, align 8); ../ashldi3.c:39:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !362; ../ashldi3.c:39:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !364 :: (store (s32) into %ir.low9, align 8); ../ashldi3.c:39:23
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !368 :: (dereferenceable load (s32) from %ir.low14, align 8); ../ashldi3.c:40:56
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !366 :: (dereferenceable load (s32) from %ir.high11); ../ashldi3.c:40:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !367; ../ashldi3.c:40:39
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !369; ../ashldi3.c:40:77
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !371; ../ashldi3.c:40:45
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !374 :: (store (s32) into %ir.high17); ../ashldi3.c:40:23
# Before:
bot
# After:
not available
## Instruction: B %bb.5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !375 :: (dereferenceable load (s32) from %ir.all19, align 8); ../ashldi3.c:42:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !375 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../ashldi3.c:42:19
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !376; ../ashldi3.c:42:5
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !377 :: (load (s32) from %stack.6); ../ashldi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !377 :: (load (s32) from %stack.5); ../ashldi3.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !378; ../ashldi3.c:43:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !378; ../ashldi3.c:43:1
# Before:
not available
# After:
not available
#### Function: __ashrdi3
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !381 :: (store (s32) into %ir.all + 4, basealign 8); ../ashrdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !381 :: (store (s32) into %ir.all, align 8); ../ashrdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !383; ../ashrdi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 0, killed $cpsr, debug-location !383; ../ashrdi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !383; ../ashrdi3.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !385 :: (load (s32) from %stack.4); ../ashrdi3.c:33:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !385 :: (dereferenceable load (s32) from %ir.high); ../ashrdi3.c:33:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 249, 14, $noreg, $noreg, debug-location !386; ../ashrdi3.c:33:38
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !389 :: (store (s32) into %ir.high2); ../ashrdi3.c:33:23
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !391 :: (dereferenceable load (s32) from %ir.high4); ../ashrdi3.c:34:32
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !392; ../ashrdi3.c:34:43
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 1, 14, $noreg, $noreg, debug-location !393; ../ashrdi3.c:34:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !395 :: (store (s32) into %ir.low, align 8); ../ashrdi3.c:34:22
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !396; ../ashrdi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !398 :: (load (s32) from %stack.4); ../ashrdi3.c:38:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !398; ../ashrdi3.c:38:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !398; ../ashrdi3.c:38:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !398; ../ashrdi3.c:38:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !399; ../ashrdi3.c:39:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !401 :: (load (s32) from %stack.4); ../ashrdi3.c:40:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !401 :: (dereferenceable load (s32) from %ir.high9); ../ashrdi3.c:40:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 1, 14, $noreg, $noreg, debug-location !402; ../ashrdi3.c:40:39
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !405 :: (store (s32) into %ir.high12); ../ashrdi3.c:40:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !410 :: (dereferenceable load (s32) from %ir.low17, align 8); ../ashrdi3.c:41:72
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !407 :: (dereferenceable load (s32) from %ir.high14); ../ashrdi3.c:41:33
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !408; ../ashrdi3.c:41:55
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !409; ../ashrdi3.c:41:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !412; ../ashrdi3.c:41:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !414 :: (store (s32) into %ir.low20, align 8); ../ashrdi3.c:41:22
# Before:
bot
# After:
not available
## Instruction: B %bb.5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !415 :: (dereferenceable load (s32) from %ir.all22, align 8); ../ashrdi3.c:43:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !415 :: (dereferenceable load (s32) from %ir.all22 + 4, basealign 8); ../ashrdi3.c:43:19
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !416; ../ashrdi3.c:43:5
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !417 :: (load (s32) from %stack.6); ../ashrdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !417 :: (load (s32) from %stack.5); ../ashrdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !418; ../ashrdi3.c:44:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !418; ../ashrdi3.c:44:1
# Before:
not available
# After:
not available
#### Function: __clzdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !421 :: (store (s32) into %ir.all + 4, basealign 8); ../clzdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !421 :: (store (s32) into %ir.all, align 8); ../clzdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !427 :: (dereferenceable load (s32) from %ir.low, align 8); ../clzdi2.c:27:49
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !423 :: (dereferenceable load (s32) from %ir.high2); ../clzdi2.c:26:28
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !428; ../clzdi2.c:27:42
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr $r2, 14, $noreg, $noreg, debug-location !428; ../clzdi2.c:27:42
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !428; ../clzdi2.c:27:42
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !429; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 32, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !432; ../clzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !432; ../clzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !432; ../clzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !433; ../clzdi2.c:27:5
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !433; ../clzdi2.c:27:5
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __clzsi2
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r3 = MOVr killed $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: CMPri renamable $r3, 65536, 14, $noreg, implicit-def $cpsr
# Before:
not available
# After:
not available
## Instruction: $r2 = MOVi 1, 3, killed $cpsr, $noreg, implicit renamable $r2
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r2, 34, 14, $noreg, $noreg, debug-location !436; ../clzsi2.c:25:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nuw nsw SUBrsi killed renamable $r1, killed renamable $r2, 34, 14, $noreg, $noreg, debug-location !437; ../clzsi2.c:26:14
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !438; ../clzsi2.c:26:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 65280, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !439; ../clzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !439; ../clzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !439; ../clzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVi 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nuw nsw SUBrsi killed renamable $r3, renamable $r1, 26, 14, $noreg, $noreg, debug-location !442; ../clzsi2.c:30:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !443; ../clzsi2.c:30:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !444; ../clzsi2.c:31:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 240, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !445; ../clzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !445; ../clzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !445; ../clzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVi 4, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nuw nsw SUBrsi killed renamable $r2, renamable $r1, 18, 14, $noreg, $noreg, debug-location !448; ../clzsi2.c:34:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !449; ../clzsi2.c:34:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !450; ../clzsi2.c:35:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 12, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !451; ../clzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !451; ../clzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $lr = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !451; ../clzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nuw nsw SUBrsi renamable $r1, renamable $lr, 10, 14, $noreg, $noreg, debug-location !454; ../clzsi2.c:38:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !455; ../clzsi2.c:38:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $lr, 10, 14, $noreg, $noreg, debug-location !456; ../clzsi2.c:39:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !457; ../clzsi2.c:52:20
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MVNi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsi killed renamable $r2, killed renamable $r3, 11, 14, $noreg, $noreg, debug-location !458; ../clzsi2.c:52:37
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !458; ../clzsi2.c:52:37
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !459; ../clzsi2.c:52:25
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !460; ../clzsi2.c:52:14
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !461; ../clzsi2.c:52:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !461; ../clzsi2.c:52:5
# Before:
not available
# After:
not available
#### Function: __cmpdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !464 :: (store (s32) into %ir.all + 4, basealign 8); ../cmpdi2.c:26:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !464 :: (store (s32) into %ir.all, align 8); ../cmpdi2.c:26:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !466 :: (store (s32) into %ir.all1 + 4, basealign 8); ../cmpdi2.c:28:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !466 :: (store (s32) into %ir.all1, align 8); ../cmpdi2.c:28:11
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !468 :: (dereferenceable load (s32) from %ir.high); ../cmpdi2.c:29:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !470 :: (dereferenceable load (s32) from %ir.high3); ../cmpdi2.c:29:24
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !472; ../cmpdi2.c:29:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 10, killed $cpsr, debug-location !472; ../cmpdi2.c:29:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !472; ../cmpdi2.c:29:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !473; ../cmpdi2.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !475 :: (dereferenceable load (s32) from %ir.high5); ../cmpdi2.c:31:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !477 :: (dereferenceable load (s32) from %ir.high7); ../cmpdi2.c:31:24
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !479; ../cmpdi2.c:31:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 13, killed $cpsr, debug-location !479; ../cmpdi2.c:31:9
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !479; ../cmpdi2.c:31:9
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r0 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !480; ../cmpdi2.c:32:9
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !481 :: (dereferenceable load (s32) from %ir.low, align 8); ../cmpdi2.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !482 :: (dereferenceable load (s32) from %ir.low13, align 8); ../cmpdi2.c:33:23
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !484; ../cmpdi2.c:33:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 2, killed $cpsr, debug-location !484; ../cmpdi2.c:33:9
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !484; ../cmpdi2.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !485; ../cmpdi2.c:34:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !486 :: (dereferenceable load (s32) from %ir.low18, align 8); ../cmpdi2.c:35:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !487 :: (dereferenceable load (s32) from %ir.low20, align 8); ../cmpdi2.c:35:23
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !489; ../cmpdi2.c:35:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 9, killed $cpsr, debug-location !489; ../cmpdi2.c:35:9
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !489; ../cmpdi2.c:35:9
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: renamable $r0 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !490; ../cmpdi2.c:36:9
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !491; ../cmpdi2.c:37:5
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !492 :: (load (s32) from %stack.2); ../cmpdi2.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !493; ../cmpdi2.c:38:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !493; ../cmpdi2.c:38:1
# Before:
not available
# After:
not available
#### Function: __ctzdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !500 :: (store (s32) into %ir.all + 4, basealign 8); ../ctzdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !500 :: (store (s32) into %ir.all, align 8); ../ctzdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !501 :: (dereferenceable load (s32) from %ir.low, align 8); ../ctzdi2.c:26:28
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !504 :: (dereferenceable load (s32) from %ir.high); ../ctzdi2.c:27:31
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !505; ../ctzdi2.c:27:41
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r2, 14, $noreg, $noreg, debug-location !505; ../ctzdi2.c:27:41
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed renamable $r0, 0, killed $cpsr, $noreg, implicit renamable $r1, debug-location !505; ../ctzdi2.c:27:41
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !506; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !506; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !506; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !506; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !506; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !506; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !506; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !506; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !506; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !506; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !506; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 32, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !508; ../ctzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !508; ../ctzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !508; ../ctzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !509; ../ctzdi2.c:27:5
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !509; ../ctzdi2.c:27:5
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __ctzsi2
### Basic Block: 0
## Instruction: $r2 = MOVr killed $r0, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: $r0 = MOVi 255, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r0 = ORRri $r0, 65280, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr renamable $r2, killed renamable $r0, 14, $noreg, $noreg, debug-location !511; ../ctzsi2.c:25:20
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = RSBri renamable $r0, 0, 14, $noreg, def $cpsr, debug-location !511; ../ctzsi2.c:25:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADCrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !511; ../ctzsi2.c:25:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 34, 14, $noreg, $noreg, debug-location !513; ../ctzsi2.c:25:40
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !514; ../ctzsi2.c:26:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 255, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !515; ../ctzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !515; ../ctzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !515; ../ctzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r1, 26, 14, $noreg, $noreg, debug-location !517; ../ctzsi2.c:29:29
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !518; ../ctzsi2.c:30:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !519; ../ctzsi2.c:31:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 15, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !520; ../ctzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !520; ../ctzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !520; ../ctzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r1, 18, 14, $noreg, $noreg, debug-location !522; ../ctzsi2.c:33:27
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !523; ../ctzsi2.c:34:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !524; ../ctzsi2.c:35:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 3, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !525; ../ctzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !525; ../ctzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !525; ../ctzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r1, 10, 14, $noreg, $noreg, debug-location !527; ../ctzsi2.c:37:26
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !528; ../ctzsi2.c:38:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !529; ../ctzsi2.c:40:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, killed renamable $r2, 11, 14, $noreg, $noreg, debug-location !530; ../ctzsi2.c:56:25
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nuw nsw RSBri killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !531; ../ctzsi2.c:56:20
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MVNi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsr killed renamable $r2, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !532; ../ctzsi2.c:56:44
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !532; ../ctzsi2.c:56:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !533; ../ctzsi2.c:56:32
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !534; ../ctzsi2.c:56:14
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !535; ../ctzsi2.c:56:5
# Before:
not available
# After:
not available
#### Function: __divdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $lr = MOVr killed $r3, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r3 = MOVr killed $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !537; ../divdi3.c:23:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, $noreg, debug-location !539; ../divdi3.c:25:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !539; ../divdi3.c:25:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !540; ../divdi3.c:25:19
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !540; ../divdi3.c:25:19
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = EORrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, $noreg, debug-location !541; ../divdi3.c:26:12
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = EORrsi renamable $lr, renamable $lr, 249, 14, $noreg, $noreg, debug-location !541; ../divdi3.c:26:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = SUBrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, def $cpsr, debug-location !542; ../divdi3.c:26:19
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = SBCrsi killed renamable $r3, renamable $lr, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !542; ../divdi3.c:26:19
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = EORrsi killed renamable $r12, killed renamable $lr, 249, 14, $noreg, $noreg, debug-location !543; ../divdi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !544; ../divdi3.c:28:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !544 :: (store (s32) into stack); ../divdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !544; ../divdi3.c:28:13
# Before:
not available
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !544 :: (load (s32) from %stack.0); ../divdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !545; ../divdi3.c:28:44
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !545; ../divdi3.c:28:44
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, renamable $r2, 14, $noreg, def $cpsr, debug-location !546; ../divdi3.c:28:51
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SBCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !546; ../divdi3.c:28:51
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !547; ../divdi3.c:28:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !547; ../divdi3.c:28:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !547; ../divdi3.c:28:5
# Before:
not available
# After:
not available
#### Function: __divmoddi4
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r7, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup ADDri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: $r5 = MOVr killed $r2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r2, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r5, 14, $noreg, $noreg, debug-location !912; ../divmoddi4.c:22:14
# Before:
not available
# After:
not available
## Instruction: BL_pred @__divdi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !912; ../divmoddi4.c:22:14
# Before:
not available
# After:
not available
## Instruction: $r12 = LDRi12 $sp, 0, 14, $noreg, debug-location !912 :: (load (s32) from %stack.3); ../divmoddi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !912 :: (load (s32) from %stack.2); ../divmoddi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !912 :: (load (s32) from %stack.1); ../divmoddi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $lr = LDRi12 $sp, 12, 14, $noreg, debug-location !912 :: (load (s32) from %stack.0); ../divmoddi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r4, early-clobber renamable $r7 = UMULLv5 renamable $r0, renamable $r5, 14, $noreg, $noreg, debug-location !913; ../divmoddi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r6 = MLAv5 renamable $r0, killed renamable $lr, killed renamable $r7, 14, $noreg, $noreg, debug-location !913; ../divmoddi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $lr = MLAv5 renamable $r1, killed renamable $r5, killed renamable $r6, 14, $noreg, $noreg, debug-location !913; ../divmoddi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = SUBrr killed renamable $r12, killed renamable $r4, 14, $noreg, def $cpsr, debug-location !914; ../divmoddi4.c:23:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = SBCrr killed renamable $r2, killed renamable $lr, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !914; ../divmoddi4.c:23:12
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, renamable $r3, 0, 14, $noreg, debug-location !915 :: (store (s32) into %ir.rem, align 8); ../divmoddi4.c:23:8
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, killed renamable $r3, 4, 14, $noreg, debug-location !915 :: (store (s32) into %ir.rem + 4, basealign 8); ../divmoddi4.c:23:8
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy SUBri killed $r11, 16, 14, $noreg, $noreg, debug-location !916; ../divmoddi4.c:24:3
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r5, def $r6, def $r7, def $r11, def $lr, debug-location !916; ../divmoddi4.c:24:3
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !916; ../divmoddi4.c:24:3
# Before:
not available
# After:
not available
#### Function: __divmodsi4
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !918; ../divmodsi4.c:22:14
# Before:
not available
# After:
not available
## Instruction: $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !918 :: (load (s32) from %stack.2); ../divmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !918 :: (load (s32) from %stack.1); ../divmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !918 :: (load (s32) from %stack.0); ../divmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r3 = nsw MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !919; ../divmodsi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !920; ../divmodsi4.c:23:12
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !921 :: (store (s32) into %ir.rem); ../divmodsi4.c:23:8
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !922; ../divmodsi4.c:24:3
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !922; ../divmodsi4.c:24:3
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !922; ../divmodsi4.c:24:3
# Before:
not available
# After:
not available
#### Function: __divsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r3 = MOVr killed $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !924; ../divsi3.c:25:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !926; ../divsi3.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 249, 14, $noreg, $noreg, debug-location !927; ../divsi3.c:27:19
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !928; ../divsi3.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !929; ../divsi3.c:28:19
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = EORrsi killed renamable $r2, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !930; ../divsi3.c:29:9
# Before:
not available
# After:
not available
## Instruction: STRi12 $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !931; ../divsi3.c:36:22
# Before:
not available
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !931 :: (load (s32) from %stack.0); ../divsi3.c:36:22
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !932; ../divsi3.c:36:33
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !933; ../divsi3.c:36:40
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !934; ../divsi3.c:36:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !934; ../divsi3.c:36:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !934; ../divsi3.c:36:5
# Before:
not available
# After:
not available
#### Function: __ffsdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 12, 14, $noreg, debug-location !937 :: (store (s32) into %ir.all + 4, basealign 8); ../ffsdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 8, 14, $noreg, debug-location !937 :: (store (s32) into %ir.all, align 8); ../ffsdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !938 :: (dereferenceable load (s32) from %ir.low, align 8); ../ffsdi2.c:26:13
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !940; ../ffsdi2.c:26:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !940; ../ffsdi2.c:26:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !940; ../ffsdi2.c:26:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !942 :: (dereferenceable load (s32) from %ir.high); ../ffsdi2.c:28:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !944; ../ffsdi2.c:28:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 1, killed $cpsr, debug-location !944; ../ffsdi2.c:28:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !944; ../ffsdi2.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !945; ../ffsdi2.c:29:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !947 :: (dereferenceable load (s32) from %ir.high5); ../ffsdi2.c:30:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !948; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !948; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !948; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !948; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !948; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !948; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !948; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !948; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !948; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !948; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !949; ../ffsdi2.c:30:40
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !950; ../ffsdi2.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !951 :: (dereferenceable load (s32) from %ir.low8, align 8); ../ffsdi2.c:32:30
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !952; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !952; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !952; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !952; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !952; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !952; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !952; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !952; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !952; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !952; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !953; ../ffsdi2.c:32:35
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !954; ../ffsdi2.c:32:5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !955 :: (load (s32) from %stack.1); ../ffsdi2.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 16, 14, $noreg, $noreg, debug-location !956; ../ffsdi2.c:33:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !956; ../ffsdi2.c:33:1
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __ffssi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !959; ../ffssi2.c:24:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 1, killed $cpsr, debug-location !959; ../ffssi2.c:24:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !959; ../ffssi2.c:24:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.3, debug-location !960; ../ffssi2.c:26:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !961 :: (load (s32) from %stack.0); ../ffssi2.c:28:12
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !961; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !961; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !961; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !961; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !961; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !961; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !961; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !961; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !961; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !961; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !962; ../ffssi2.c:28:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.3, debug-location !963; ../ffssi2.c:28:5
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !964 :: (load (s32) from %stack.1); ../ffssi2.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !965; ../ffssi2.c:29:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !965; ../ffssi2.c:29:1
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __lshrdi3
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !968 :: (store (s32) into %ir.all + 4, basealign 8); ../lshrdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !968 :: (store (s32) into %ir.all, align 8); ../lshrdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !970; ../lshrdi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 0, killed $cpsr, debug-location !970; ../lshrdi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !970; ../lshrdi3.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !973 :: (store (s32) into %ir.high); ../lshrdi3.c:32:23
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !975 :: (dereferenceable load (s32) from %ir.high2); ../lshrdi3.c:33:32
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !976; ../lshrdi3.c:33:43
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !977; ../lshrdi3.c:33:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !979 :: (store (s32) into %ir.low, align 8); ../lshrdi3.c:33:22
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !980; ../lshrdi3.c:34:5
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !982 :: (load (s32) from %stack.4); ../lshrdi3.c:37:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !982; ../lshrdi3.c:37:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !982; ../lshrdi3.c:37:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !982; ../lshrdi3.c:37:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !983; ../lshrdi3.c:38:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !985 :: (load (s32) from %stack.4); ../lshrdi3.c:39:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !985 :: (dereferenceable load (s32) from %ir.high6); ../lshrdi3.c:39:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !986; ../lshrdi3.c:39:39
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !989 :: (store (s32) into %ir.high9); ../lshrdi3.c:39:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !994 :: (dereferenceable load (s32) from %ir.low14, align 8); ../lshrdi3.c:40:72
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !991 :: (dereferenceable load (s32) from %ir.high11); ../lshrdi3.c:40:33
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !992; ../lshrdi3.c:40:55
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !993; ../lshrdi3.c:40:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !996; ../lshrdi3.c:40:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !998 :: (store (s32) into %ir.low17, align 8); ../lshrdi3.c:40:22
# Before:
bot
# After:
not available
## Instruction: B %bb.5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !999 :: (dereferenceable load (s32) from %ir.all19, align 8); ../lshrdi3.c:42:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !999 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../lshrdi3.c:42:19
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !1000; ../lshrdi3.c:42:5
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1001 :: (load (s32) from %stack.6); ../lshrdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1001 :: (load (s32) from %stack.5); ../lshrdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !1002; ../lshrdi3.c:43:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1002; ../lshrdi3.c:43:1
# Before:
not available
# After:
not available
#### Function: __moddi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r12 = MOVr killed $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !1004; ../moddi3.c:24:17
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = EORrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1004; ../moddi3.c:24:17
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1004; ../moddi3.c:24:17
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = EORrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !1004; ../moddi3.c:24:17
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1006; ../moddi3.c:26:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1006; ../moddi3.c:26:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !1007; ../moddi3.c:26:17
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SBCrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1007; ../moddi3.c:26:17
# Before:
not available
# After:
not available
## Instruction: $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1008; ../moddi3.c:28:5
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1008 :: (store (s32) into stack); ../moddi3.c:28:5
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1008; ../moddi3.c:28:5
# Before:
not available
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1008 :: (load (s32) from %stack.1); ../moddi3.c:28:5
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1009 :: (dereferenceable load (s32) from %ir.r, align 8); ../moddi3.c:29:21
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1009 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../moddi3.c:29:21
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1010; ../moddi3.c:29:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1010; ../moddi3.c:29:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !1011; ../moddi3.c:29:28
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1011; ../moddi3.c:29:28
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1012; ../moddi3.c:29:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1012; ../moddi3.c:29:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1012; ../moddi3.c:29:5
# Before:
not available
# After:
not available
#### Function: __modsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1014; ../modsi3.c:22:16
# Before:
not available
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !1014 :: (load (s32) from %stack.1); ../modsi3.c:22:16
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1014; ../modsi3.c:22:16
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1015 :: (load (s32) from %stack.0); ../modsi3.c:22:31
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = nsw MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1015; ../modsi3.c:22:31
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1016; ../modsi3.c:22:14
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1017; ../modsi3.c:22:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1017; ../modsi3.c:22:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1017; ../modsi3.c:22:5
# Before:
not available
# After:
not available
#### Function: __mulvdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 48, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $r11, -24, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $r11, -20, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $r11, -16, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $r11, -12, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !1019; ../mulvdi3.c:27:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1019; ../mulvdi3.c:27:11
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1020; ../mulvdi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.5, 1, killed $cpsr, debug-location !1020; ../mulvdi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1020; ../mulvdi3.c:27:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1021 :: (load (s32) from %stack.2); ../mulvdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1021 :: (load (s32) from %stack.3); ../mulvdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1021; ../mulvdi3.c:29:15
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1022; ../mulvdi3.c:29:20
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 0, killed $cpsr, debug-location !1022; ../mulvdi3.c:29:20
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1022; ../mulvdi3.c:29:20
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1023 :: (load (s32) from %stack.3); ../mulvdi3.c:29:25
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1023 :: (load (s32) from %stack.2); ../mulvdi3.c:29:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1023; ../mulvdi3.c:29:25
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1023; ../mulvdi3.c:29:25
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1024; ../mulvdi3.c:29:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !1024; ../mulvdi3.c:29:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !1024; ../mulvdi3.c:29:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.21, debug-location !1025; ../mulvdi3.c:30:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1026 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1026 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 31, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1026; ../mulvdi3.c:31:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1027 :: (load (s32) from %stack.2); ../mulvdi3.c:33:11
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1027 :: (load (s32) from %stack.3); ../mulvdi3.c:33:11
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORri renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !1027; ../mulvdi3.c:33:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1027; ../mulvdi3.c:33:11
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1028; ../mulvdi3.c:33:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.10, 1, killed $cpsr, debug-location !1028; ../mulvdi3.c:33:9
# Before:
not available
# After:
not available
## Instruction: B %bb.6, debug-location !1028; ../mulvdi3.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1029 :: (load (s32) from %stack.0); ../mulvdi3.c:35:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1029 :: (load (s32) from %stack.1); ../mulvdi3.c:35:15
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1029; ../mulvdi3.c:35:15
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1030; ../mulvdi3.c:35:20
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 0, killed $cpsr, debug-location !1030; ../mulvdi3.c:35:20
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !1030; ../mulvdi3.c:35:20
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1031 :: (load (s32) from %stack.1); ../mulvdi3.c:35:25
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1031 :: (load (s32) from %stack.0); ../mulvdi3.c:35:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1031; ../mulvdi3.c:35:25
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1031; ../mulvdi3.c:35:25
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1032; ../mulvdi3.c:35:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.9, 1, killed $cpsr, debug-location !1032; ../mulvdi3.c:35:13
# Before:
not available
# After:
not available
## Instruction: B %bb.8, debug-location !1032; ../mulvdi3.c:35:13
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: B %bb.21, debug-location !1033; ../mulvdi3.c:36:13
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1034 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1034 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 37, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1034; ../mulvdi3.c:37:9
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1035 :: (load (s32) from %stack.3); ../mulvdi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !1035 :: (load (s32) from %stack.2); ../mulvdi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !1035 :: (load (s32) from %stack.1); ../mulvdi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1035 :: (load (s32) from %stack.0); ../mulvdi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsi renamable $r12, 249, 14, $noreg, $noreg, debug-location !1035; ../mulvdi3.c:39:19
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.11)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.10)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1036; ../mulvdi3.c:40:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1036; ../mulvdi3.c:40:23
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !1037; ../mulvdi3.c:40:29
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.9)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SBCrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1037; ../mulvdi3.c:40:29
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !1038; ../mulvdi3.c:41:19
# Before:
not available
# After:
not available
## Instruction: STRi12 $r12, $sp, 16, 14, $noreg :: (store (s32) into %stack.7)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 20, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: renamable $r12 = EORrsi renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1039; ../mulvdi3.c:42:23
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1039; ../mulvdi3.c:42:23
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = SUBrsi killed renamable $r12, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !1040; ../mulvdi3.c:42:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 24, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = SBCrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1040; ../mulvdi3.c:42:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 28, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: dead renamable $r1 = SUBri renamable $r1, 2, 14, $noreg, def $cpsr, debug-location !1041; ../mulvdi3.c:43:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1041; ../mulvdi3.c:43:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.12, 11, killed $cpsr, debug-location !1042; ../mulvdi3.c:43:19
# Before:
not available
# After:
not available
## Instruction: B %bb.11, debug-location !1042; ../mulvdi3.c:43:19
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1043 :: (load (s32) from %stack.4); ../mulvdi3.c:43:28
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1043 :: (load (s32) from %stack.5); ../mulvdi3.c:43:28
# Before:
bot
# After:
not available
## Instruction: dead renamable $r1 = RSBri renamable $r1, 1, 14, $noreg, def $cpsr, debug-location !1043; ../mulvdi3.c:43:28
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = RSCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1043; ../mulvdi3.c:43:28
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.13, 11, killed $cpsr, debug-location !1044; ../mulvdi3.c:43:9
# Before:
not available
# After:
not available
## Instruction: B %bb.12, debug-location !1044; ../mulvdi3.c:43:9
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: B %bb.21, debug-location !1045; ../mulvdi3.c:44:9
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1046 :: (load (s32) from %stack.10); ../mulvdi3.c:45:12
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !1046 :: (load (s32) from %stack.6); ../mulvdi3.c:45:12
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1046 :: (load (s32) from %stack.11); ../mulvdi3.c:45:12
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 16, 14, $noreg, debug-location !1046 :: (load (s32) from %stack.7); ../mulvdi3.c:45:12
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrr renamable $r0, renamable $r3, 14, $noreg, $noreg, debug-location !1046; ../mulvdi3.c:45:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrr renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !1046; ../mulvdi3.c:45:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1046; ../mulvdi3.c:45:12
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1047; ../mulvdi3.c:45:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.17, 1, killed $cpsr, debug-location !1047; ../mulvdi3.c:45:9
# Before:
not available
# After:
not available
## Instruction: B %bb.14, debug-location !1047; ../mulvdi3.c:45:9
# Before:
not available
# After:
not available
### Basic Block: 14
## Instruction: $r3 = LDRi12 $sp, 28, 14, $noreg, debug-location !1048 :: (load (s32) from %stack.4); ../mulvdi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !1048 :: (load (s32) from %stack.5); ../mulvdi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MVNi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MVNi -2147483648, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1048; ../mulvdi3.c:47:25
# Before:
not available
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1048 :: (load (s32) from %stack.9); ../mulvdi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1048; ../mulvdi3.c:47:25
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1048 :: (load (s32) from %stack.8); ../mulvdi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1049; ../mulvdi3.c:47:19
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1049; ../mulvdi3.c:47:19
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.16, 10, killed $cpsr, debug-location !1050; ../mulvdi3.c:47:13
# Before:
not available
# After:
not available
## Instruction: B %bb.15, debug-location !1050; ../mulvdi3.c:47:13
# Before:
not available
# After:
not available
### Basic Block: 15
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1051 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1051 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 48, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1051; ../mulvdi3.c:48:13
# Before:
not available
# After:
not available
### Basic Block: 16
## Instruction: B %bb.20, debug-location !1052; ../mulvdi3.c:49:5
# Before:
not available
# After:
not available
### Basic Block: 17
## Instruction: $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1053 :: (load (s32) from %stack.4); ../mulvdi3.c:52:27
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1053 :: (load (s32) from %stack.5); ../mulvdi3.c:52:27
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !1053; ../mulvdi3.c:52:27
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = RSCri renamable $r0, 0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1053; ../mulvdi3.c:52:27
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi -2147483648, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1054; ../mulvdi3.c:52:25
# Before:
not available
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1054 :: (load (s32) from %stack.9); ../mulvdi3.c:52:25
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1054; ../mulvdi3.c:52:25
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1054 :: (load (s32) from %stack.8); ../mulvdi3.c:52:25
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1055; ../mulvdi3.c:52:19
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1055; ../mulvdi3.c:52:19
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.19, 10, killed $cpsr, debug-location !1056; ../mulvdi3.c:52:13
# Before:
not available
# After:
not available
## Instruction: B %bb.18, debug-location !1056; ../mulvdi3.c:52:13
# Before:
not available
# After:
not available
### Basic Block: 18
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1057 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1057 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 53, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1057; ../mulvdi3.c:53:13
# Before:
not available
# After:
not available
### Basic Block: 19
## Instruction: B %bb.20
# Before:
not available
# After:
not available
### Basic Block: 20
## Instruction: B %bb.21, debug-location !1058; ../mulvdi3.c:55:5
# Before:
not available
# After:
not available
### Basic Block: 21
## Instruction: $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !1059 :: (load (s32) from %stack.1); ../mulvdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $r11, -20, 14, $noreg, debug-location !1059 :: (load (s32) from %stack.2); ../mulvdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !1059 :: (load (s32) from %stack.0); ../mulvdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $lr = LDRi12 $r11, -24, 14, $noreg, debug-location !1059 :: (load (s32) from %stack.3); ../mulvdi3.c:0
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0, early-clobber renamable $r4 = UMULLv5 renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !1059; ../mulvdi3.c:0
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r12 = MLAv5 killed renamable $r1, killed renamable $lr, killed renamable $r4, 14, $noreg, $noreg, debug-location !1059; ../mulvdi3.c:0
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MLAv5 killed renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !1059; ../mulvdi3.c:0
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg, debug-location !1060; ../mulvdi3.c:56:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr, debug-location !1060; ../mulvdi3.c:56:1
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1060; ../mulvdi3.c:56:1
# Before:
not available
# After:
not available
### Basic Block: 22
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __mulvsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !1063; ../mulvsi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.5, 1, killed $cpsr, debug-location !1063; ../mulvsi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1063; ../mulvsi3.c:27:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1065 :: (load (s32) from %stack.1); ../mulvsi3.c:29:20
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1065; ../mulvsi3.c:29:20
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 0, killed $cpsr, debug-location !1065; ../mulvsi3.c:29:20
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1065; ../mulvsi3.c:29:20
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1067 :: (load (s32) from %stack.1); ../mulvsi3.c:29:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1067; ../mulvsi3.c:29:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !1067; ../mulvsi3.c:29:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !1067; ../mulvsi3.c:29:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.21, debug-location !1068; ../mulvsi3.c:30:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1069 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1069 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 31, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1069; ../mulvsi3.c:31:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1071 :: (load (s32) from %stack.1); ../mulvsi3.c:33:9
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !1071; ../mulvsi3.c:33:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.10, 1, killed $cpsr, debug-location !1071; ../mulvsi3.c:33:9
# Before:
not available
# After:
not available
## Instruction: B %bb.6, debug-location !1071; ../mulvsi3.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1073 :: (load (s32) from %stack.0); ../mulvsi3.c:35:20
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1073; ../mulvsi3.c:35:20
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 0, killed $cpsr, debug-location !1073; ../mulvsi3.c:35:20
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !1073; ../mulvsi3.c:35:20
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1075 :: (load (s32) from %stack.0); ../mulvsi3.c:35:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1075; ../mulvsi3.c:35:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.9, 1, killed $cpsr, debug-location !1075; ../mulvsi3.c:35:13
# Before:
not available
# After:
not available
## Instruction: B %bb.8, debug-location !1075; ../mulvsi3.c:35:13
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: B %bb.21, debug-location !1076; ../mulvsi3.c:36:13
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1077 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1077 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 37, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1077; ../mulvsi3.c:37:9
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !1078 :: (load (s32) from %stack.1); ../mulvsi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1078 :: (load (s32) from %stack.0); ../mulvsi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !1078; ../mulvsi3.c:39:19
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !1079; ../mulvsi3.c:40:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrsi killed renamable $r0, renamable $r1, 249, 14, $noreg, $noreg, debug-location !1080; ../mulvsi3.c:40:29
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsi renamable $r2, 249, 14, $noreg, $noreg, debug-location !1081; ../mulvsi3.c:41:19
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1082; ../mulvsi3.c:42:23
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1083; ../mulvsi3.c:42:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 2, 14, $noreg, implicit-def $cpsr, debug-location !1085; ../mulvsi3.c:43:19
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.12, 11, killed $cpsr, debug-location !1085; ../mulvsi3.c:43:19
# Before:
not available
# After:
not available
## Instruction: B %bb.11, debug-location !1085; ../mulvsi3.c:43:19
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1087 :: (load (s32) from %stack.2); ../mulvsi3.c:43:9
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1087; ../mulvsi3.c:43:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.13, 12, killed $cpsr, debug-location !1087; ../mulvsi3.c:43:9
# Before:
not available
# After:
not available
## Instruction: B %bb.12, debug-location !1087; ../mulvsi3.c:43:9
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: B %bb.21, debug-location !1088; ../mulvsi3.c:44:9
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1090 :: (load (s32) from %stack.5); ../mulvsi3.c:45:9
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1090 :: (load (s32) from %stack.3); ../mulvsi3.c:45:9
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1090; ../mulvsi3.c:45:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.17, 1, killed $cpsr, debug-location !1090; ../mulvsi3.c:45:9
# Before:
not available
# After:
not available
## Instruction: B %bb.14, debug-location !1090; ../mulvsi3.c:45:9
# Before:
not available
# After:
not available
### Basic Block: 14
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1091 :: (load (s32) from %stack.2); ../mulvsi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MVNi -2147483648, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1091; ../mulvsi3.c:47:25
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1091; ../mulvsi3.c:47:25
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1093 :: (load (s32) from %stack.4); ../mulvsi3.c:47:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1093; ../mulvsi3.c:47:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.16, 13, killed $cpsr, debug-location !1093; ../mulvsi3.c:47:13
# Before:
not available
# After:
not available
## Instruction: B %bb.15, debug-location !1093; ../mulvsi3.c:47:13
# Before:
not available
# After:
not available
### Basic Block: 15
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1094 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1094 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 48, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1094; ../mulvsi3.c:48:13
# Before:
not available
# After:
not available
### Basic Block: 16
## Instruction: B %bb.20, debug-location !1095; ../mulvsi3.c:49:5
# Before:
not available
# After:
not available
### Basic Block: 17
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1096 :: (load (s32) from %stack.2); ../mulvsi3.c:52:27
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !1096; ../mulvsi3.c:52:27
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi -2147483648, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1097; ../mulvsi3.c:52:25
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1097; ../mulvsi3.c:52:25
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1099 :: (load (s32) from %stack.4); ../mulvsi3.c:52:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1099; ../mulvsi3.c:52:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.19, 13, killed $cpsr, debug-location !1099; ../mulvsi3.c:52:13
# Before:
not available
# After:
not available
## Instruction: B %bb.18, debug-location !1099; ../mulvsi3.c:52:13
# Before:
not available
# After:
not available
### Basic Block: 18
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1100 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1100 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 53, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1100; ../mulvsi3.c:53:13
# Before:
not available
# After:
not available
### Basic Block: 19
## Instruction: B %bb.20
# Before:
not available
# After:
not available
### Basic Block: 20
## Instruction: B %bb.21, debug-location !1101; ../mulvsi3.c:55:5
# Before:
not available
# After:
not available
### Basic Block: 21
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1102 :: (load (s32) from %stack.0); ../mulvsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !1102 :: (load (s32) from %stack.1); ../mulvsi3.c:0
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MULv5 killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1102; ../mulvsi3.c:0
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1103; ../mulvsi3.c:56:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1103; ../mulvsi3.c:56:1
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1103; ../mulvsi3.c:56:1
# Before:
not available
# After:
not available
### Basic Block: 22
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __paritydi2
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !1106 :: (store (s32) into %ir.all + 4, basealign 8); ../paritydi2.c:23:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !1106 :: (store (s32) into %ir.all, align 8); ../paritydi2.c:23:11
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1109 :: (dereferenceable load (s32) from %ir.low, align 8); ../paritydi2.c:24:39
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1108 :: (dereferenceable load (s32) from %ir.high); ../paritydi2.c:24:28
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1110; ../paritydi2.c:24:33
# Before:
not available
# After:
not available
## Instruction: BL_pred @__paritysi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1111; ../paritydi2.c:24:12
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1112; ../paritydi2.c:24:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1112; ../paritydi2.c:24:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1112; ../paritydi2.c:24:5
# Before:
not available
# After:
not available
#### Function: __paritysi2
### Basic Block: 0
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1115; ../paritysi2.c:23:7
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1117; ../paritysi2.c:24:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1119; ../paritysi2.c:25:7
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDri killed renamable $r0, 15, 14, $noreg, $noreg, debug-location !1120; ../paritysi2.c:26:26
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVi 150, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = ORRri $r1, 26880, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !1122; ../paritysi2.c:26:34
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1123; ../paritysi2.c:26:5
# Before:
not available
# After:
not available
#### Function: __popcountdi2
### Basic Block: 0
## Instruction: $r2 = MOVr killed $r0, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: $r0 = MOVsi renamable $r1, 11, 14, $noreg, def $cpsr, debug-location !1125; ../popcountdi2.c:23:20
# Before:
not available
# After:
not available
## Instruction: $r3 = MOVsi renamable $r2, 5, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1125; ../popcountdi2.c:23:20
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !1126; ../popcountdi2.c:23:26
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = ANDrr killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !1126; ../popcountdi2.c:23:26
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = SUBrr killed renamable $r2, killed renamable $r3, 14, $noreg, def $cpsr, debug-location !1127; ../popcountdi2.c:23:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = SBCrr killed renamable $r1, killed renamable $r0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1127; ../popcountdi2.c:23:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r12, renamable $r3, 19, 14, $noreg, $noreg, debug-location !1129; ../popcountdi2.c:25:21
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrsi renamable $r12, renamable $r2, 19, 14, $noreg, $noreg, debug-location !1129; ../popcountdi2.c:25:21
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = ANDrr killed renamable $r3, renamable $r12, 14, $noreg, $noreg, debug-location !1130; ../popcountdi2.c:25:52
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r2, killed renamable $r12, 14, $noreg, $noreg, debug-location !1130; ../popcountdi2.c:25:52
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1131; ../popcountdi2.c:25:46
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1131; ../popcountdi2.c:25:46
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1133; ../popcountdi2.c:27:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1133; ../popcountdi2.c:27:14
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !1134; ../popcountdi2.c:27:27
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1134; ../popcountdi2.c:27:27
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1136; ../popcountdi2.c:29:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1139; ../popcountdi2.c:32:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1141; ../popcountdi2.c:35:15
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !1142; ../popcountdi2.c:35:27
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1143; ../popcountdi2.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
#### Function: __popcountsi2
### Basic Block: 0
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1146; ../popcountsi2.c:23:23
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1147; ../popcountsi2.c:23:11
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrsi renamable $r2, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1149; ../popcountsi2.c:25:19
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1150; ../popcountsi2.c:25:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1151; ../popcountsi2.c:25:33
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1153; ../popcountsi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1154; ../popcountsi2.c:27:24
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1156; ../popcountsi2.c:29:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1158; ../popcountsi2.c:32:15
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !1159; ../popcountsi2.c:32:27
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1160; ../popcountsi2.c:32:5
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
#### Function: __subvdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r12 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r12 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !1162; ../subvdi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SBCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1162; ../subvdi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !1164; ../subvdi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 4, killed $cpsr, debug-location !1164; ../subvdi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1164; ../subvdi3.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1165 :: (load (s32) from %stack.3); ../subvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1165 :: (load (s32) from %stack.0); ../subvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1165 :: (load (s32) from %stack.2); ../subvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1165 :: (load (s32) from %stack.1); ../subvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1165; ../subvdi3.c:27:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1165; ../subvdi3.c:27:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 10, killed $cpsr, debug-location !1166; ../subvdi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1166; ../subvdi3.c:27:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1167 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1167 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 28, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1167; ../subvdi3.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.7, debug-location !1168; ../subvdi3.c:29:5
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1169 :: (load (s32) from %stack.3); ../subvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1169 :: (load (s32) from %stack.0); ../subvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1169 :: (load (s32) from %stack.2); ../subvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1169 :: (load (s32) from %stack.1); ../subvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1169; ../subvdi3.c:32:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1169; ../subvdi3.c:32:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 11, killed $cpsr, debug-location !1170; ../subvdi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !1170; ../subvdi3.c:32:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1171 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1171 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1171; ../subvdi3.c:33:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: B %bb.7
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1172 :: (load (s32) from %stack.0); ../subvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1172 :: (load (s32) from %stack.1); ../subvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1172; ../subvdi3.c:35:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1172; ../subvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1172; ../subvdi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __subvsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1174; ../subvsi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1176; ../subvsi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 4, killed $cpsr, debug-location !1176; ../subvsi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1176; ../subvsi3.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1178 :: (load (s32) from %stack.0); ../subvsi3.c:27:13
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1178 :: (load (s32) from %stack.1); ../subvsi3.c:27:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1178; ../subvsi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 13, killed $cpsr, debug-location !1178; ../subvsi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1178; ../subvsi3.c:27:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1179 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1179 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 28, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1179; ../subvsi3.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.7, debug-location !1180; ../subvsi3.c:29:5
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1182 :: (load (s32) from %stack.0); ../subvsi3.c:32:13
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1182 :: (load (s32) from %stack.1); ../subvsi3.c:32:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1182; ../subvsi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 12, killed $cpsr, debug-location !1182; ../subvsi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !1182; ../subvsi3.c:32:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1183 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1183 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1183; ../subvsi3.c:33:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: B %bb.7
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1184 :: (load (s32) from %stack.0); ../subvsi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1184; ../subvsi3.c:35:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1184; ../subvsi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1184; ../subvsi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __ucmpdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !1187 :: (store (s32) into %ir.all + 4, basealign 8); ../ucmpdi2.c:26:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !1187 :: (store (s32) into %ir.all, align 8); ../ucmpdi2.c:26:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !1189 :: (store (s32) into %ir.all1 + 4, basealign 8); ../ucmpdi2.c:28:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !1189 :: (store (s32) into %ir.all1, align 8); ../ucmpdi2.c:28:11
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1191 :: (dereferenceable load (s32) from %ir.high); ../ucmpdi2.c:29:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1193 :: (dereferenceable load (s32) from %ir.high3); ../ucmpdi2.c:29:24
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1195; ../ucmpdi2.c:29:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 2, killed $cpsr, debug-location !1195; ../ucmpdi2.c:29:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1195; ../ucmpdi2.c:29:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1196; ../ucmpdi2.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1198 :: (dereferenceable load (s32) from %ir.high5); ../ucmpdi2.c:31:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1200 :: (dereferenceable load (s32) from %ir.high7); ../ucmpdi2.c:31:24
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1202; ../ucmpdi2.c:31:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 9, killed $cpsr, debug-location !1202; ../ucmpdi2.c:31:9
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !1202; ../ucmpdi2.c:31:9
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r0 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1203; ../ucmpdi2.c:32:9
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1204 :: (dereferenceable load (s32) from %ir.low, align 8); ../ucmpdi2.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1205 :: (dereferenceable load (s32) from %ir.low13, align 8); ../ucmpdi2.c:33:23
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1207; ../ucmpdi2.c:33:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 2, killed $cpsr, debug-location !1207; ../ucmpdi2.c:33:9
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !1207; ../ucmpdi2.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1208; ../ucmpdi2.c:34:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1209 :: (dereferenceable load (s32) from %ir.low18, align 8); ../ucmpdi2.c:35:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1210 :: (dereferenceable load (s32) from %ir.low20, align 8); ../ucmpdi2.c:35:23
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1212; ../ucmpdi2.c:35:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 9, killed $cpsr, debug-location !1212; ../ucmpdi2.c:35:9
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !1212; ../ucmpdi2.c:35:9
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: renamable $r0 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1213; ../ucmpdi2.c:36:9
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1214; ../ucmpdi2.c:37:5
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1215 :: (load (s32) from %stack.2); ../ucmpdi2.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !1216; ../ucmpdi2.c:38:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1216; ../ucmpdi2.c:38:1
# Before:
not available
# After:
not available
#### Function: __udivdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1222; ../udivdi3.c:22:12
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1222 :: (store (s32) into stack); ../udivdi3.c:22:12
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1222; ../udivdi3.c:22:12
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1223; ../udivdi3.c:22:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1223; ../udivdi3.c:22:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1223; ../udivdi3.c:22:5
# Before:
not available
# After:
not available
#### Function: __udivmoddi4
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 88, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r12, $r11, -36, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -4, 14, $noreg, debug-location !550 :: (store (s32) into %ir.all + 4, basealign 8); ../udivmoddi4.c:29:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -8, 14, $noreg, debug-location !550 :: (store (s32) into %ir.all, align 8); ../udivmoddi4.c:29:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r3, $r11, -12, 14, $noreg, debug-location !552 :: (store (s32) into %ir.all1 + 4, basealign 8); ../udivmoddi4.c:31:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, $r11, -16, 14, $noreg, debug-location !552 :: (store (s32) into %ir.all1, align 8); ../udivmoddi4.c:31:11
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !554 :: (dereferenceable load (s32) from %ir.high); ../udivmoddi4.c:36:13
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !556; ../udivmoddi4.c:36:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 1, killed $cpsr, debug-location !556; ../udivmoddi4.c:36:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !556; ../udivmoddi4.c:36:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !558 :: (dereferenceable load (s32) from %ir.high3); ../udivmoddi4.c:38:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !560; ../udivmoddi4.c:38:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.5, 1, killed $cpsr, debug-location !560; ../udivmoddi4.c:38:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !560; ../udivmoddi4.c:38:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !561 :: (load (s32) from %stack.4); ../udivmoddi4.c:44:17
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !561; ../udivmoddi4.c:44:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 0, killed $cpsr, debug-location !561; ../udivmoddi4.c:44:17
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !561; ../udivmoddi4.c:44:17
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !562 :: (dereferenceable load (s32) from %ir.low, align 8); ../udivmoddi4.c:45:28
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !563 :: (dereferenceable load (s32) from %ir.low9, align 8); ../udivmoddi4.c:45:38
# Before:
bot
# After:
not available
## Instruction: BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !564; ../udivmoddi4.c:45:32
# Before:
not available
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !564 :: (load (s32) from %stack.4); ../udivmoddi4.c:45:32
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !566 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:45:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !566 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:45:22
# Before:
bot
# After:
not available
## Instruction: B %bb.4, debug-location !567; ../udivmoddi4.c:45:17
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !568 :: (dereferenceable load (s32) from %ir.low12, align 8); ../udivmoddi4.c:46:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !569 :: (dereferenceable load (s32) from %ir.low14, align 8); ../udivmoddi4.c:46:34
# Before:
bot
# After:
not available
## Instruction: BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !570; ../udivmoddi4.c:46:28
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !570; ../udivmoddi4.c:46:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !572; ../udivmoddi4.c:46:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !573 :: (load (s32) from %stack.4); ../udivmoddi4.c:52:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !573; ../udivmoddi4.c:52:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.7, 0, killed $cpsr, debug-location !573; ../udivmoddi4.c:52:13
# Before:
not available
# After:
not available
## Instruction: B %bb.6, debug-location !573; ../udivmoddi4.c:52:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !574 :: (load (s32) from %stack.4); ../udivmoddi4.c:53:24
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !574 :: (dereferenceable load (s32) from %ir.low20, align 8); ../udivmoddi4.c:53:24
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !576 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:53:18
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !576 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:53:18
# Before:
bot
# After:
not available
## Instruction: B %bb.7, debug-location !577; ../udivmoddi4.c:53:13
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !578; ../udivmoddi4.c:54:9
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !579 :: (dereferenceable load (s32) from %ir.low25, align 8); ../udivmoddi4.c:57:13
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !581; ../udivmoddi4.c:57:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.26, 1, killed $cpsr, debug-location !581; ../udivmoddi4.c:57:9
# Before:
not available
# After:
not available
## Instruction: B %bb.9, debug-location !581; ../udivmoddi4.c:57:9
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !583 :: (dereferenceable load (s32) from %ir.high30); ../udivmoddi4.c:59:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !585; ../udivmoddi4.c:59:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.13, 1, killed $cpsr, debug-location !585; ../udivmoddi4.c:59:13
# Before:
not available
# After:
not available
## Instruction: B %bb.10, debug-location !585; ../udivmoddi4.c:59:13
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !586 :: (load (s32) from %stack.4); ../udivmoddi4.c:65:17
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !586; ../udivmoddi4.c:65:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.12, 0, killed $cpsr, debug-location !586; ../udivmoddi4.c:65:17
# Before:
not available
# After:
not available
## Instruction: B %bb.11, debug-location !586; ../udivmoddi4.c:65:17
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !588 :: (dereferenceable load (s32) from %ir.high37); ../udivmoddi4.c:66:28
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !589 :: (dereferenceable load (s32) from %ir.low39, align 8); ../udivmoddi4.c:66:39
# Before:
bot
# After:
not available
## Instruction: BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !590; ../udivmoddi4.c:66:33
# Before:
not available
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !590 :: (load (s32) from %stack.4); ../udivmoddi4.c:66:33
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !592 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:66:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !592 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:66:22
# Before:
bot
# After:
not available
## Instruction: B %bb.12, debug-location !593; ../udivmoddi4.c:66:17
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !595 :: (dereferenceable load (s32) from %ir.high44); ../udivmoddi4.c:67:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !596 :: (dereferenceable load (s32) from %ir.low46, align 8); ../udivmoddi4.c:67:35
# Before:
bot
# After:
not available
## Instruction: BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !597; ../udivmoddi4.c:67:29
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !597; ../udivmoddi4.c:67:29
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !599; ../udivmoddi4.c:67:13
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !600 :: (dereferenceable load (s32) from %ir.low51, align 8); ../udivmoddi4.c:70:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !602; ../udivmoddi4.c:70:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.17, 1, killed $cpsr, debug-location !602; ../udivmoddi4.c:70:13
# Before:
not available
# After:
not available
## Instruction: B %bb.14, debug-location !602; ../udivmoddi4.c:70:13
# Before:
not available
# After:
not available
### Basic Block: 14
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !603 :: (load (s32) from %stack.4); ../udivmoddi4.c:76:17
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !603; ../udivmoddi4.c:76:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.16, 0, killed $cpsr, debug-location !603; ../udivmoddi4.c:76:17
# Before:
not available
# After:
not available
## Instruction: B %bb.15, debug-location !603; ../udivmoddi4.c:76:17
# Before:
not available
# After:
not available
### Basic Block: 15
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !605 :: (dereferenceable load (s32) from %ir.high58); ../udivmoddi4.c:78:32
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !607 :: (dereferenceable load (s32) from %ir.high60); ../udivmoddi4.c:78:43
# Before:
bot
# After:
not available
## Instruction: BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !608; ../udivmoddi4.c:78:37
# Before:
not available
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !608 :: (load (s32) from %stack.4); ../udivmoddi4.c:78:37
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !611 :: (store (s32) into %ir.high63); ../udivmoddi4.c:78:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !613 :: (store (s32) into %ir.low65, align 8); ../udivmoddi4.c:79:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !614 :: (dereferenceable load (s32) from %ir.all66, align 8); ../udivmoddi4.c:80:26
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !614 :: (dereferenceable load (s32) from %ir.all66 + 4, basealign 8); ../udivmoddi4.c:80:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !615 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:80:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !615 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:80:22
# Before:
bot
# After:
not available
## Instruction: B %bb.16, debug-location !616; ../udivmoddi4.c:81:13
# Before:
not available
# After:
not available
### Basic Block: 16
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !618 :: (dereferenceable load (s32) from %ir.high69); ../udivmoddi4.c:82:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !620 :: (dereferenceable load (s32) from %ir.high71); ../udivmoddi4.c:82:35
# Before:
bot
# After:
not available
## Instruction: BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !621; ../udivmoddi4.c:82:29
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !621; ../udivmoddi4.c:82:29
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !623; ../udivmoddi4.c:82:13
# Before:
not available
# After:
not available
### Basic Block: 17
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !625 :: (dereferenceable load (s32) from %ir.high78); ../udivmoddi4.c:88:18
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !628; ../udivmoddi4.c:88:35
# Before:
not available
# After:
not available
## Instruction: TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !631; ../udivmoddi4.c:88:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.21, 1, killed $cpsr, debug-location !631; ../udivmoddi4.c:88:13
# Before:
not available
# After:
not available
## Instruction: B %bb.18, debug-location !631; ../udivmoddi4.c:88:13
# Before:
not available
# After:
not available
### Basic Block: 18
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !632 :: (load (s32) from %stack.4); ../udivmoddi4.c:90:17
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !632; ../udivmoddi4.c:90:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.20, 0, killed $cpsr, debug-location !632; ../udivmoddi4.c:90:17
# Before:
not available
# After:
not available
## Instruction: B %bb.19, debug-location !632; ../udivmoddi4.c:90:17
# Before:
not available
# After:
not available
### Basic Block: 19
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !633 :: (load (s32) from %stack.4); ../udivmoddi4.c:92:31
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !633 :: (dereferenceable load (s32) from %ir.low85, align 8); ../udivmoddi4.c:92:31
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !635 :: (store (s32) into %ir.low87, align 8); ../udivmoddi4.c:92:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !637 :: (dereferenceable load (s32) from %ir.high89); ../udivmoddi4.c:93:32
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !639 :: (dereferenceable load (s32) from %ir.high91); ../udivmoddi4.c:93:44
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !640; ../udivmoddi4.c:93:49
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !641; ../udivmoddi4.c:93:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !644 :: (store (s32) into %ir.high95); ../udivmoddi4.c:93:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !645 :: (dereferenceable load (s32) from %ir.all96, align 8); ../udivmoddi4.c:94:26
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !645 :: (dereferenceable load (s32) from %ir.all96 + 4, basealign 8); ../udivmoddi4.c:94:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !646 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:94:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !646 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:94:22
# Before:
bot
# After:
not available
## Instruction: B %bb.20, debug-location !647; ../udivmoddi4.c:95:13
# Before:
not available
# After:
not available
### Basic Block: 20
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !649 :: (dereferenceable load (s32) from %ir.high99); ../udivmoddi4.c:96:24
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !651 :: (dereferenceable load (s32) from %ir.high101); ../udivmoddi4.c:96:50
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r2, 1, 14, $noreg, $noreg, debug-location !652; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = BICrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !652; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = ANDrsi killed renamable $r2, renamable $r1, 11, 14, $noreg, $noreg, debug-location !652; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !652; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = ANDrsi renamable $r3, renamable $r1, 19, 14, $noreg, $noreg, debug-location !652; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !652; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !652; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !652; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !652; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !652; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVsi killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !652; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !653; ../udivmoddi4.c:96:29
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !655; ../udivmoddi4.c:96:13
# Before:
not available
# After:
not available
### Basic Block: 21
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !657 :: (dereferenceable load (s32) from %ir.high105); ../udivmoddi4.c:102:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !658; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !660 :: (dereferenceable load (s32) from %ir.high107); ../udivmoddi4.c:102:58
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !661; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:102:38
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.7)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !664; ../udivmoddi4.c:104:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.25, 3, killed $cpsr, debug-location !664; ../udivmoddi4.c:104:13
# Before:
not available
# After:
not available
## Instruction: B %bb.22, debug-location !664; ../udivmoddi4.c:104:13
# Before:
not available
# After:
not available
### Basic Block: 22
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !665 :: (load (s32) from %stack.4); ../udivmoddi4.c:106:16
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !665; ../udivmoddi4.c:106:16
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.24, 0, killed $cpsr, debug-location !665; ../udivmoddi4.c:106:16
# Before:
not available
# After:
not available
## Instruction: B %bb.23, debug-location !665; ../udivmoddi4.c:106:16
# Before:
not available
# After:
not available
### Basic Block: 23
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !666 :: (load (s32) from %stack.4); ../udivmoddi4.c:107:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !666 :: (dereferenceable load (s32) from %ir.all114, align 8); ../udivmoddi4.c:107:26
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !666 :: (dereferenceable load (s32) from %ir.all114 + 4, basealign 8); ../udivmoddi4.c:107:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !667 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:107:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !667 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:107:22
# Before:
bot
# After:
not available
## Instruction: B %bb.24, debug-location !668; ../udivmoddi4.c:107:17
# Before:
not available
# After:
not available
### Basic Block: 24
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !669; ../udivmoddi4.c:108:13
# Before:
not available
# After:
not available
### Basic Block: 25
## Instruction: $r2 = LDRi12 $sp, 40, 14, $noreg, debug-location !670 :: (load (s32) from %stack.7); ../udivmoddi4.c:110:9
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !670; ../udivmoddi4.c:110:9
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !672 :: (store (s32) into %ir.low118, align 8); ../udivmoddi4.c:113:17
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !673 :: (dereferenceable load (s32) from %ir.low120, align 8); ../udivmoddi4.c:114:24
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !674; ../udivmoddi4.c:114:45
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVsr killed renamable $r1, renamable $r3, 2, 14, $noreg, $noreg, debug-location !675; ../udivmoddi4.c:114:28
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !678 :: (store (s32) into %ir.high123); ../udivmoddi4.c:114:18
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !680 :: (dereferenceable load (s32) from %ir.high125); ../udivmoddi4.c:116:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsr killed renamable $r1, renamable $r0, 3, 14, $noreg, $noreg, debug-location !681; ../udivmoddi4.c:116:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !684 :: (store (s32) into %ir.high128); ../udivmoddi4.c:116:18
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !689 :: (dereferenceable load (s32) from %ir.low134, align 8); ../udivmoddi4.c:117:60
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !686 :: (dereferenceable load (s32) from %ir.high130); ../udivmoddi4.c:117:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsr killed renamable $r1, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !688; ../udivmoddi4.c:117:29
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !691; ../udivmoddi4.c:117:53
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !693 :: (store (s32) into %ir.low137, align 8); ../udivmoddi4.c:117:17
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: B %bb.49, debug-location !694; ../udivmoddi4.c:118:5
# Before:
not available
# After:
not available
### Basic Block: 26
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !696 :: (dereferenceable load (s32) from %ir.high139); ../udivmoddi4.c:121:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !698; ../udivmoddi4.c:121:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.40, 1, killed $cpsr, debug-location !698; ../udivmoddi4.c:121:13
# Before:
not available
# After:
not available
## Instruction: B %bb.27, debug-location !698; ../udivmoddi4.c:121:13
# Before:
not available
# After:
not available
### Basic Block: 27
## Instruction: renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !699 :: (dereferenceable load (s32) from %ir.low144, align 8); ../udivmoddi4.c:127:22
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !701; ../udivmoddi4.c:127:17
# Before:
not available
# After:
not available
## Instruction: TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !701; ../udivmoddi4.c:127:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.33, 1, killed $cpsr, debug-location !701; ../udivmoddi4.c:127:17
# Before:
not available
# After:
not available
## Instruction: B %bb.28, debug-location !701; ../udivmoddi4.c:127:17
# Before:
not available
# After:
not available
### Basic Block: 28
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !702 :: (load (s32) from %stack.4); ../udivmoddi4.c:129:21
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !702; ../udivmoddi4.c:129:21
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.30, 0, killed $cpsr, debug-location !702; ../udivmoddi4.c:129:21
# Before:
not available
# After:
not available
## Instruction: B %bb.29, debug-location !702; ../udivmoddi4.c:129:21
# Before:
not available
# After:
not available
### Basic Block: 29
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !703 :: (load (s32) from %stack.4); ../udivmoddi4.c:130:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !703 :: (dereferenceable load (s32) from %ir.low155, align 8); ../udivmoddi4.c:130:32
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !704 :: (dereferenceable load (s32) from %ir.low157, align 8); ../udivmoddi4.c:130:43
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !705; ../udivmoddi4.c:130:47
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !706; ../udivmoddi4.c:130:36
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !708 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:130:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !708 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:130:26
# Before:
bot
# After:
not available
## Instruction: B %bb.30, debug-location !709; ../udivmoddi4.c:130:21
# Before:
not available
# After:
not available
### Basic Block: 30
## Instruction: renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !710 :: (dereferenceable load (s32) from %ir.low163, align 8); ../udivmoddi4.c:131:25
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !712; ../udivmoddi4.c:131:21
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.32, 1, killed $cpsr, debug-location !712; ../udivmoddi4.c:131:21
# Before:
not available
# After:
not available
## Instruction: B %bb.31, debug-location !712; ../udivmoddi4.c:131:21
# Before:
not available
# After:
not available
### Basic Block: 31
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !713 :: (dereferenceable load (s32) from %ir.all167, align 8); ../udivmoddi4.c:132:30
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !713 :: (dereferenceable load (s32) from %ir.all167 + 4, basealign 8); ../udivmoddi4.c:132:30
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !714; ../udivmoddi4.c:132:21
# Before:
not available
# After:
not available
### Basic Block: 32
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !715 :: (dereferenceable load (s32) from %ir.low170, align 8); ../udivmoddi4.c:133:40
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !716; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !716; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !716; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !716; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !716; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !716; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !716; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !716; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !716; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r12 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !716; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsi renamable $r12, 195, 14, $noreg, $noreg, debug-location !716; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !718 :: (dereferenceable load (s32) from %ir.high172); ../udivmoddi4.c:134:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !719; ../udivmoddi4.c:134:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !722 :: (store (s32) into %ir.high175); ../udivmoddi4.c:134:26
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !727 :: (dereferenceable load (s32) from %ir.low181, align 8); ../udivmoddi4.c:135:68
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !724 :: (dereferenceable load (s32) from %ir.high177); ../udivmoddi4.c:135:32
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = MOVi 32, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = nuw nsw SUBrsi killed renamable $r3, killed renamable $r12, 195, 14, $noreg, $noreg, debug-location !725; ../udivmoddi4.c:135:54
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !726; ../udivmoddi4.c:135:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !729; ../udivmoddi4.c:135:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !731 :: (store (s32) into %ir.low185, align 8); ../udivmoddi4.c:135:25
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !732 :: (dereferenceable load (s32) from %ir.all186, align 8); ../udivmoddi4.c:136:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !732 :: (dereferenceable load (s32) from %ir.all186 + 4, basealign 8); ../udivmoddi4.c:136:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !733; ../udivmoddi4.c:136:17
# Before:
not available
# After:
not available
### Basic Block: 33
## Instruction: renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !734 :: (dereferenceable load (s32) from %ir.low189, align 8); ../udivmoddi4.c:142:55
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !738 :: (dereferenceable load (s32) from %ir.high191); ../udivmoddi4.c:142:80
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !740; ../udivmoddi4.c:142:60
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDri killed renamable $r0, 33, 14, $noreg, $noreg, debug-location !740; ../udivmoddi4.c:142:60
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.9)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !742; ../udivmoddi4.c:147:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.35, 1, killed $cpsr, debug-location !742; ../udivmoddi4.c:147:17
# Before:
not available
# After:
not available
## Instruction: B %bb.34, debug-location !742; ../udivmoddi4.c:147:17
# Before:
not available
# After:
not available
### Basic Block: 34
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 renamable $r0, $r11, -24, 14, $noreg, debug-location !744 :: (store (s32) into %ir.low197, align 8); ../udivmoddi4.c:149:25
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !745 :: (dereferenceable load (s32) from %ir.low199, align 8); ../udivmoddi4.c:150:32
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !748 :: (store (s32) into %ir.high201); ../udivmoddi4.c:150:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !751 :: (store (s32) into %ir.high203); ../udivmoddi4.c:151:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !753 :: (dereferenceable load (s32) from %ir.high205); ../udivmoddi4.c:152:31
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !755 :: (store (s32) into %ir.low207, align 8); ../udivmoddi4.c:152:25
# Before:
bot
# After:
not available
## Instruction: B %bb.39, debug-location !756; ../udivmoddi4.c:153:13
# Before:
not available
# After:
not available
### Basic Block: 35
## Instruction: $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !758 :: (load (s32) from %stack.9); ../udivmoddi4.c:154:22
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !758; ../udivmoddi4.c:154:22
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.37, 8, killed $cpsr, debug-location !758; ../udivmoddi4.c:154:22
# Before:
not available
# After:
not available
## Instruction: B %bb.36, debug-location !758; ../udivmoddi4.c:154:22
# Before:
not available
# After:
not available
### Basic Block: 36
## Instruction: $r2 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !760 :: (store (s32) into %ir.low213, align 8); ../udivmoddi4.c:156:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !761 :: (dereferenceable load (s32) from %ir.low215, align 8); ../udivmoddi4.c:157:32
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !762; ../udivmoddi4.c:157:53
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !763; ../udivmoddi4.c:157:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !766 :: (store (s32) into %ir.high219); ../udivmoddi4.c:157:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !768 :: (dereferenceable load (s32) from %ir.high221); ../udivmoddi4.c:158:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !769; ../udivmoddi4.c:158:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !772 :: (store (s32) into %ir.high224); ../udivmoddi4.c:158:26
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !777 :: (dereferenceable load (s32) from %ir.low230, align 8); ../udivmoddi4.c:159:68
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !774 :: (dereferenceable load (s32) from %ir.high226); ../udivmoddi4.c:159:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !776; ../udivmoddi4.c:159:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !779; ../udivmoddi4.c:159:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !781 :: (store (s32) into %ir.low234, align 8); ../udivmoddi4.c:159:25
# Before:
bot
# After:
not available
## Instruction: B %bb.38, debug-location !782; ../udivmoddi4.c:160:13
# Before:
not available
# After:
not available
### Basic Block: 37
## Instruction: $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !783 :: (load (s32) from %stack.9); ../udivmoddi4.c:163:31
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !783 :: (dereferenceable load (s32) from %ir.low237, align 8); ../udivmoddi4.c:163:31
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r1, 64, 14, $noreg, $noreg, debug-location !784; ../udivmoddi4.c:163:53
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !785; ../udivmoddi4.c:163:35
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !787 :: (store (s32) into %ir.low241, align 8); ../udivmoddi4.c:163:25
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !792 :: (dereferenceable load (s32) from %ir.low247, align 8); ../udivmoddi4.c:165:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !789 :: (dereferenceable load (s32) from %ir.high243); ../udivmoddi4.c:164:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !791; ../udivmoddi4.c:164:38
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !793; ../udivmoddi4.c:165:44
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r2, renamable $r1, 3, 14, $noreg, $noreg, debug-location !795; ../udivmoddi4.c:164:63
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !798 :: (store (s32) into %ir.high252); ../udivmoddi4.c:164:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !801 :: (store (s32) into %ir.high254); ../udivmoddi4.c:166:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !803 :: (dereferenceable load (s32) from %ir.high256); ../udivmoddi4.c:167:31
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !805; ../udivmoddi4.c:167:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !807 :: (store (s32) into %ir.low260, align 8); ../udivmoddi4.c:167:25
# Before:
bot
# After:
not available
## Instruction: B %bb.38
# Before:
not available
# After:
not available
### Basic Block: 38
## Instruction: B %bb.39
# Before:
not available
# After:
not available
### Basic Block: 39
## Instruction: $r0 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
# Before:
bot
# After:
not available
## Instruction: B %bb.48, debug-location !808; ../udivmoddi4.c:169:9
# Before:
not available
# After:
not available
### Basic Block: 40
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !810 :: (dereferenceable load (s32) from %ir.high265); ../udivmoddi4.c:176:36
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !811; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !813 :: (dereferenceable load (s32) from %ir.high267); ../udivmoddi4.c:176:62
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !814; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !815; ../udivmoddi4.c:176:42
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.11)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !817; ../udivmoddi4.c:178:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.44, 3, killed $cpsr, debug-location !817; ../udivmoddi4.c:178:17
# Before:
not available
# After:
not available
## Instruction: B %bb.41, debug-location !817; ../udivmoddi4.c:178:17
# Before:
not available
# After:
not available
### Basic Block: 41
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !818 :: (load (s32) from %stack.4); ../udivmoddi4.c:180:21
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !818; ../udivmoddi4.c:180:21
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.43, 0, killed $cpsr, debug-location !818; ../udivmoddi4.c:180:21
# Before:
not available
# After:
not available
## Instruction: B %bb.42, debug-location !818; ../udivmoddi4.c:180:21
# Before:
not available
# After:
not available
### Basic Block: 42
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !819 :: (load (s32) from %stack.4); ../udivmoddi4.c:181:30
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !819 :: (dereferenceable load (s32) from %ir.all274, align 8); ../udivmoddi4.c:181:30
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !819 :: (dereferenceable load (s32) from %ir.all274 + 4, basealign 8); ../udivmoddi4.c:181:30
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !820 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:181:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !820 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:181:26
# Before:
bot
# After:
not available
## Instruction: B %bb.43, debug-location !821; ../udivmoddi4.c:181:21
# Before:
not available
# After:
not available
### Basic Block: 43
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !822; ../udivmoddi4.c:182:17
# Before:
not available
# After:
not available
### Basic Block: 44
## Instruction: $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !823 :: (load (s32) from %stack.11); ../udivmoddi4.c:184:13
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !823; ../udivmoddi4.c:184:13
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.12)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !825 :: (store (s32) into %ir.low279, align 8); ../udivmoddi4.c:187:21
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !827; ../udivmoddi4.c:188:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.46, 1, killed $cpsr, debug-location !827; ../udivmoddi4.c:188:17
# Before:
not available
# After:
not available
## Instruction: B %bb.45, debug-location !827; ../udivmoddi4.c:188:17
# Before:
not available
# After:
not available
### Basic Block: 45
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !828 :: (dereferenceable load (s32) from %ir.low284, align 8); ../udivmoddi4.c:190:32
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !831 :: (store (s32) into %ir.high286); ../udivmoddi4.c:190:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !834 :: (store (s32) into %ir.high288); ../udivmoddi4.c:191:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !836 :: (dereferenceable load (s32) from %ir.high290); ../udivmoddi4.c:192:31
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !838 :: (store (s32) into %ir.low292, align 8); ../udivmoddi4.c:192:25
# Before:
bot
# After:
not available
## Instruction: B %bb.47, debug-location !839; ../udivmoddi4.c:193:13
# Before:
not available
# After:
not available
### Basic Block: 46
## Instruction: $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !840 :: (load (s32) from %stack.12); ../udivmoddi4.c:196:32
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !840 :: (load (s32) from %stack.11); ../udivmoddi4.c:196:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !840 :: (dereferenceable load (s32) from %ir.low295, align 8); ../udivmoddi4.c:196:32
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r1, 31, 14, $noreg, $noreg, debug-location !841; ../udivmoddi4.c:196:53
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !842; ../udivmoddi4.c:196:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !845 :: (store (s32) into %ir.high299); ../udivmoddi4.c:196:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !847 :: (dereferenceable load (s32) from %ir.high301); ../udivmoddi4.c:197:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !848; ../udivmoddi4.c:197:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !851 :: (store (s32) into %ir.high304); ../udivmoddi4.c:197:26
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !856 :: (dereferenceable load (s32) from %ir.low310, align 8); ../udivmoddi4.c:198:68
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !853 :: (dereferenceable load (s32) from %ir.high306); ../udivmoddi4.c:198:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !855; ../udivmoddi4.c:198:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !858; ../udivmoddi4.c:198:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !860 :: (store (s32) into %ir.low314, align 8); ../udivmoddi4.c:198:25
# Before:
bot
# After:
not available
## Instruction: B %bb.47
# Before:
not available
# After:
not available
### Basic Block: 47
## Instruction: $r0 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.12)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
# Before:
bot
# After:
not available
## Instruction: B %bb.48
# Before:
not available
# After:
not available
### Basic Block: 48
## Instruction: $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !861 :: (load (s32) from %stack.10); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: B %bb.49
# Before:
not available
# After:
not available
### Basic Block: 49
## Instruction: $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !861 :: (load (s32) from %stack.8); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
# Before:
bot
# After:
not available
## Instruction: B %bb.50, debug-location !862; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
### Basic Block: 50
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !861 :: (load (s32) from %stack.14); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !861 :: (load (s32) from %stack.13); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.16)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.15)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !862; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.53, 0, killed $cpsr, debug-location !862; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
## Instruction: B %bb.51, debug-location !862; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
### Basic Block: 51
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !866 :: (load (s32) from %stack.16); ../udivmoddi4.c:212:43
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -32, 14, $noreg, debug-location !866 :: (dereferenceable load (s32) from %ir.low324, align 8); ../udivmoddi4.c:212:43
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !865 :: (dereferenceable load (s32) from %ir.high321); ../udivmoddi4.c:212:25
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !867; ../udivmoddi4.c:212:36
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !867; ../udivmoddi4.c:212:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, $r11, -28, 14, $noreg, debug-location !870 :: (store (s32) into %ir.high328); ../udivmoddi4.c:212:18
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !872 :: (dereferenceable load (s32) from %ir.high333); ../udivmoddi4.c:213:43
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !873; ../udivmoddi4.c:213:36
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, killed renamable $r2, 251, 14, $noreg, $noreg, debug-location !873; ../udivmoddi4.c:213:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !875 :: (store (s32) into %ir.low337, align 8); ../udivmoddi4.c:213:18
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !878 :: (dereferenceable load (s32) from %ir.low342, align 8); ../udivmoddi4.c:214:43
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !877 :: (dereferenceable load (s32) from %ir.high339); ../udivmoddi4.c:214:25
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:214:36
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:214:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, $r11, -20, 14, $noreg, debug-location !882 :: (store (s32) into %ir.high346); ../udivmoddi4.c:214:18
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !884; ../udivmoddi4.c:215:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !886 :: (store (s32) into %ir.low352, align 8); ../udivmoddi4.c:215:18
# Before:
bot
# After:
not available
## Instruction: renamable $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !887 :: (dereferenceable load (s32) from %ir.all354, align 8); ../udivmoddi4.c:223:37
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !887 :: (dereferenceable load (s32) from %ir.all354 + 4, basealign 8); ../udivmoddi4.c:223:37
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !888 :: (dereferenceable load (s32) from %ir.all355, align 8); ../udivmoddi4.c:223:45
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -28, 14, $noreg, debug-location !888 :: (dereferenceable load (s32) from %ir.all355 + 4, basealign 8); ../udivmoddi4.c:223:45
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = MVNr renamable $r1, 14, $noreg, $noreg, debug-location !889; ../udivmoddi4.c:223:49
# Before:
not available
# After:
not available
## Instruction: renamable $lr = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !889; ../udivmoddi4.c:223:49
# Before:
not available
# After:
not available
## Instruction: dead renamable $lr = ADDrr renamable $r12, killed renamable $lr, 14, $noreg, def $cpsr, debug-location !889; ../udivmoddi4.c:223:49
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = ADCrr renamable $r2, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !889; ../udivmoddi4.c:223:49
# Before:
not available
# After:
not available
## Instruction: STRi12 $r3, $sp, 0, 14, $noreg :: (store (s32) into %stack.17)
# Before:
bot
# After:
not available
## Instruction: renamable $r12 = SUBrr renamable $r0, killed renamable $r12, 14, $noreg, def $cpsr, debug-location !892; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = SBCrr renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !892; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !892; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr killed renamable $r12, 4, killed $cpsr, $noreg, implicit renamable $r0, debug-location !892; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !892; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed renamable $r2, 4, killed $cpsr, $noreg, implicit renamable $r1, debug-location !892; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !892 :: (store (s32) into %ir.all363 + 4, basealign 8); ../udivmoddi4.c:225:15
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !892 :: (store (s32) into %ir.all363, align 8); ../udivmoddi4.c:225:15
# Before:
bot
# After:
not available
## Instruction: B %bb.52, debug-location !893; ../udivmoddi4.c:226:5
# Before:
not available
# After:
not available
### Basic Block: 52
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !894 :: (load (s32) from %stack.15); ../udivmoddi4.c:224:19
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !894 :: (load (s32) from %stack.17); ../udivmoddi4.c:224:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !894; ../udivmoddi4.c:224:19
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !896; ../udivmoddi4.c:209:20
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
# Before:
bot
# After:
not available
## Instruction: B %bb.50, debug-location !862; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
### Basic Block: 53
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !898 :: (load (s32) from %stack.4); ../udivmoddi4.c:227:16
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !898 :: (load (s32) from %stack.16); ../udivmoddi4.c:227:16
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !898 :: (dereferenceable load (s32) from %ir.all365, align 8); ../udivmoddi4.c:227:16
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -20, 14, $noreg, debug-location !898 :: (dereferenceable load (s32) from %ir.all365 + 4, basealign 8); ../udivmoddi4.c:227:16
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !899; ../udivmoddi4.c:227:20
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r3, 251, 14, $noreg, $noreg, debug-location !899; ../udivmoddi4.c:227:20
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsi renamable $r2, killed renamable $r3, 10, 14, $noreg, $noreg, debug-location !901; ../udivmoddi4.c:227:26
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, $r11, -24, 14, $noreg, debug-location !903 :: (store (s32) into %ir.all369, align 8); ../udivmoddi4.c:227:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !903 :: (store (s32) into %ir.all369 + 4, basealign 8); ../udivmoddi4.c:227:11
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !904; ../udivmoddi4.c:228:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.55, 0, killed $cpsr, debug-location !904; ../udivmoddi4.c:228:9
# Before:
not available
# After:
not available
## Instruction: B %bb.54, debug-location !904; ../udivmoddi4.c:228:9
# Before:
not available
# After:
not available
### Basic Block: 54
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !905 :: (load (s32) from %stack.4); ../udivmoddi4.c:229:18
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !905 :: (dereferenceable load (s32) from %ir.all372, align 8); ../udivmoddi4.c:229:18
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !905 :: (dereferenceable load (s32) from %ir.all372 + 4, basealign 8); ../udivmoddi4.c:229:18
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !906 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:229:14
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !906 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:229:14
# Before:
bot
# After:
not available
## Instruction: B %bb.55, debug-location !907; ../udivmoddi4.c:229:9
# Before:
not available
# After:
not available
### Basic Block: 55
## Instruction: renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !908 :: (dereferenceable load (s32) from %ir.all374, align 8); ../udivmoddi4.c:230:14
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !908 :: (dereferenceable load (s32) from %ir.all374 + 4, basealign 8); ../udivmoddi4.c:230:14
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !909; ../udivmoddi4.c:230:5
# Before:
not available
# After:
not available
### Basic Block: 56
## Instruction: $r0 = LDRi12 $sp, 44, 14, $noreg, debug-location !861 :: (load (s32) from %stack.6); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -40, 14, $noreg, debug-location !861 :: (load (s32) from %stack.5); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !910; ../udivmoddi4.c:231:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !910; ../udivmoddi4.c:231:1
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !910; ../udivmoddi4.c:231:1
# Before:
not available
# After:
not available
### Basic Block: 57
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __udivmodsi4
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1225; ../udivmodsi4.c:22:14
# Before:
not available
# After:
not available
## Instruction: $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !1225 :: (load (s32) from %stack.2); ../udivmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1225 :: (load (s32) from %stack.1); ../udivmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1225 :: (load (s32) from %stack.0); ../udivmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r3 = MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !1226; ../udivmodsi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1227; ../udivmodsi4.c:23:12
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !1228 :: (store (s32) into %ir.rem); ../udivmodsi4.c:23:8
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1229; ../udivmodsi4.c:24:3
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1229; ../udivmodsi4.c:24:3
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1229; ../udivmodsi4.c:24:3
# Before:
not available
# After:
not available
#### Function: __udivsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 64, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1232; ../udivsi3.c:32:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 1, killed $cpsr, debug-location !1232; ../udivsi3.c:32:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1232; ../udivsi3.c:32:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1233; ../udivsi3.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1235 :: (load (s32) from %stack.0); ../udivsi3.c:34:9
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1235; ../udivsi3.c:34:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !1235; ../udivsi3.c:34:9
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !1235; ../udivsi3.c:34:9
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1236; ../udivsi3.c:35:9
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1237 :: (load (s32) from %stack.1); ../udivsi3.c:36:10
# Before:
bot
# After:
not available
## Instruction: BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1237; ../udivsi3.c:36:10
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1237; ../udivsi3.c:36:10
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r1, $r11, -20, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1238; ../udivsi3.c:36:29
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1238; ../udivsi3.c:36:29
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1239 :: (load (s32) from %stack.4); ../udivsi3.c:36:27
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1239; ../udivsi3.c:36:27
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $r11, -16, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1241; ../udivsi3.c:38:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 3, killed $cpsr, debug-location !1241; ../udivsi3.c:38:9
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !1241; ../udivsi3.c:38:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1242; ../udivsi3.c:39:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !1244 :: (load (s32) from %stack.3); ../udivsi3.c:40:9
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !1244; ../udivsi3.c:40:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 1, killed $cpsr, debug-location !1244; ../udivsi3.c:40:9
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !1244; ../udivsi3.c:40:9
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1245; ../udivsi3.c:41:9
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1246 :: (load (s32) from %stack.0); ../udivsi3.c:42:5
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !1246 :: (load (s32) from %stack.3); ../udivsi3.c:42:5
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !1246; ../udivsi3.c:42:5
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !1247; ../udivsi3.c:45:28
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r0, killed renamable $r2, 2, 14, $noreg, $noreg, debug-location !1248; ../udivsi3.c:45:11
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r0, renamable $r1, 3, 14, $noreg, $noreg, debug-location !1249; ../udivsi3.c:46:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1250; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !1251 :: (load (s32) from %stack.8); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 32, 14, $noreg, debug-location !1251 :: (load (s32) from %stack.7); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -28, 14, $noreg, debug-location !1251 :: (load (s32) from %stack.6); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1251 :: (load (s32) from %stack.5); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.12)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.11)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 20, 14, $noreg :: (store (s32) into %stack.10)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.9)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1250; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.12, 0, killed $cpsr, debug-location !1250; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
## Instruction: B %bb.10, debug-location !1250; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1253 :: (load (s32) from %stack.1); ../udivsi3.c:51:22
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !1253 :: (load (s32) from %stack.9); ../udivsi3.c:51:22
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1253 :: (load (s32) from %stack.10); ../udivsi3.c:51:22
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r0, 10, 14, $noreg, $noreg, debug-location !1253; ../udivsi3.c:51:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r2, 251, 14, $noreg, $noreg, debug-location !1253; ../udivsi3.c:51:22
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.14)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !1254; ../udivsi3.c:60:41
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1254; ../udivsi3.c:60:41
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.13)
# Before:
bot
# After:
not available
## Instruction: B %bb.11, debug-location !1255; ../udivsi3.c:63:5
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !1257 :: (load (s32) from %stack.11); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 12, 14, $noreg, debug-location !1257 :: (load (s32) from %stack.12); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $r12 = LDRi12 $sp, 24, 14, $noreg, debug-location !1257 :: (load (s32) from %stack.9); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1257 :: (load (s32) from %stack.13); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1257 :: (load (s32) from %stack.14); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $lr = LDRi12 $r11, -8, 14, $noreg, debug-location !1257 :: (load (s32) from %stack.1); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: renamable $lr = SUBrr renamable $r2, renamable $lr, 14, $noreg, $noreg, debug-location !1257; ../udivsi3.c:62:11
# Before:
not available
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1257; ../udivsi3.c:62:11
# Before:
not available
# After:
not available
## Instruction: $r2 = MOVr killed renamable $lr, 4, killed $cpsr, $noreg, implicit renamable $r2, debug-location !1257; ../udivsi3.c:62:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !1258; ../udivsi3.c:61:19
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = ORRrsi renamable $r3, renamable $r12, 10, 14, $noreg, $noreg, debug-location !1260; ../udivsi3.c:52:22
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1261; ../udivsi3.c:48:20
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1250; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1264 :: (load (s32) from %stack.12); ../udivsi3.c:64:18
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1264 :: (load (s32) from %stack.9); ../udivsi3.c:64:18
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi renamable $r0, renamable $r1, 10, 14, $noreg, $noreg, debug-location !1264; ../udivsi3.c:64:18
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1265; ../udivsi3.c:65:5
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1251 :: (load (s32) from %stack.2); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1266; ../udivsi3.c:66:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1266; ../udivsi3.c:66:1
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1266; ../udivsi3.c:66:1
# Before:
not available
# After:
not available
#### Function: __umoddi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1268; ../umoddi3.c:23:5
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1268 :: (store (s32) into stack); ../umoddi3.c:23:5
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1268; ../umoddi3.c:23:5
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1269 :: (dereferenceable load (s32) from %ir.r, align 8); ../umoddi3.c:24:12
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1269 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../umoddi3.c:24:12
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1270; ../umoddi3.c:24:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1270; ../umoddi3.c:24:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1270; ../umoddi3.c:24:5
# Before:
not available
# After:
not available
#### Function: __umodsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1272; ../umodsi3.c:22:16
# Before:
not available
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !1272 :: (load (s32) from %stack.1); ../umodsi3.c:22:16
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1272; ../umodsi3.c:22:16
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1273 :: (load (s32) from %stack.0); ../umodsi3.c:22:32
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1273; ../umodsi3.c:22:32
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1274; ../umodsi3.c:22:14
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1275; ../umodsi3.c:22:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1275; ../umodsi3.c:22:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1275; ../umodsi3.c:22:5
# Before:
not available
# After:
not available
#### Function: compilerrt_abort_impl
### Basic Block: 0
#### Function: jfdctint_init
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{}
  ]
]
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7fffff0 |-> 0x1
}
  ]
]
# After:
not available
## Instruction: B %bb.1, debug-location !129; batchtest/jfdctint/jfdctint.c:153:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !130 :: (load (s32) from %stack.1); batchtest/jfdctint/jfdctint.c:0
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !130 :: (load (s32) from %stack.0); batchtest/jfdctint/jfdctint.c:0
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: CMPri renamable $r0, 16, 14, $noreg, implicit-def $cpsr, debug-location !132; batchtest/jfdctint/jfdctint.c:153:3
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 0, killed $cpsr, debug-location !132; batchtest/jfdctint/jfdctint.c:153:3
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !132; batchtest/jfdctint/jfdctint.c:153:3
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg :: (load (s32) from %stack.3)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x1
0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg :: (load (s32) from %stack.2)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x1
0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = MOVi 133, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MULv5 renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !133; batchtest/jfdctint/jfdctint.c:154:21
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDri killed renamable $r0, 81, 14, $noreg, $noreg, debug-location !134; batchtest/jfdctint/jfdctint.c:154:29
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x85,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x1
0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x85,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: dead early-clobber renamable $r3, early-clobber renamable $r1 = SMULLv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !135; batchtest/jfdctint/jfdctint.c:154:36
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = ADDrr killed renamable $r1, renamable $r0, 14, $noreg, $noreg, debug-location !135; batchtest/jfdctint/jfdctint.c:154:36
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVsi renamable $r3, 121, 14, $noreg, $noreg, debug-location !135; batchtest/jfdctint/jfdctint.c:154:36
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 251, 14, $noreg, $noreg, debug-location !135; batchtest/jfdctint/jfdctint.c:154:36
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = RSBrsi killed renamable $r1, renamable $r1, 130, 14, $noreg, $noreg, debug-location !135; batchtest/jfdctint/jfdctint.c:154:36
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !135; batchtest/jfdctint/jfdctint.c:154:36
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x1
0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !136 :: (load (s32) from constant-pool); batchtest/jfdctint/jfdctint.c:155:5
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x1
0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: STRrs renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !137 :: (store (s32) into %ir.arrayidx); batchtest/jfdctint/jfdctint.c:155:24
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> 0x0,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x1
0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.3, debug-location !138; batchtest/jfdctint/jfdctint.c:156:3
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !139 :: (load (s32) from %stack.4); batchtest/jfdctint/jfdctint.c:153:25
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> 0x0,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x1
0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !139 :: (load (s32) from %stack.3); batchtest/jfdctint/jfdctint.c:153:25
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x1
0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !139; batchtest/jfdctint/jfdctint.c:153:25
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x0,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x1
0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function jfdctint_init |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_init taken 0 times |->
      Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x0,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.1, debug-location !132; batchtest/jfdctint/jfdctint.c:153:3
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !142; batchtest/jfdctint/jfdctint.c:158:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, debug-location !142; batchtest/jfdctint/jfdctint.c:158:1
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: jfdctint_jpeg_fdct_islow
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r7, killed $r8, killed $r9, killed $r11, killed $lr
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff0,
 12 |-> top,
 13 |-> 0x7fffff0,
 14 |-> top,
 15 |-> top]
{0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: $r11 = frame-setup ADDri killed $sp, 24, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 32, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r1 = MOVi 3, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.1)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      Leaf:
[0 |-> 0xd0004, @jfdctint_data,
 1 |-> 0x3,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.0)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      Leaf:
[0 |-> 0xd0004, @jfdctint_data,
 1 |-> 0x3,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc8 |-> 0x3
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.1, debug-location !158; batchtest/jfdctint/jfdctint.c:190:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !159 :: (load (s32) from %stack.1); batchtest/jfdctint/jfdctint.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0xd0004, @jfdctint_data,
 1 |-> 0x3,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top, @jfdctint_data,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !159 :: (load (s32) from %stack.0); batchtest/jfdctint/jfdctint.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0x3,
 1 |-> 0x3,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0x3,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0x3,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !161; batchtest/jfdctint/jfdctint.c:190:3
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 4, killed $cpsr, debug-location !161; batchtest/jfdctint/jfdctint.c:190:3
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !161; batchtest/jfdctint/jfdctint.c:190:3
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !163 :: (load (s32) from %stack.3); batchtest/jfdctint/jfdctint.c:192:27
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0x3,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = LDRi12 renamable $r1, 28, 14, $noreg, debug-location !163 :: (load (s32) from %ir.arrayidx1); batchtest/jfdctint/jfdctint.c:192:27
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0x3,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !162 :: (load (s32) from %ir.dataptr.0); batchtest/jfdctint/jfdctint.c:192:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0x3,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r4 = LDRi12 renamable $r1, 4, 14, $noreg, debug-location !166 :: (load (s32) from %ir.arrayidx4); batchtest/jfdctint/jfdctint.c:194:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $lr = LDRi12 renamable $r1, 8, 14, $noreg, debug-location !170 :: (load (s32) from %ir.arrayidx10); batchtest/jfdctint/jfdctint.c:196:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = LDRi12 renamable $r1, 12, 14, $noreg, debug-location !174 :: (load (s32) from %ir.arrayidx16); batchtest/jfdctint/jfdctint.c:198:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r12 = nsw ADDrr renamable $r0, renamable $r3, 14, $noreg, $noreg, debug-location !164; batchtest/jfdctint/jfdctint.c:192:25
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = nsw SUBrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !165; batchtest/jfdctint/jfdctint.c:193:25
# Before:
not available
# After:
not available
## Instruction: renamable $r5 = LDRi12 renamable $r1, 24, 14, $noreg, debug-location !167 :: (load (s32) from %ir.arrayidx5); batchtest/jfdctint/jfdctint.c:194:27
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = nsw ADDrr renamable $r4, renamable $r5, 14, $noreg, $noreg, debug-location !168; batchtest/jfdctint/jfdctint.c:194:25
# Before:
not available
# After:
not available
## Instruction: renamable $r4 = nsw SUBrr killed renamable $r4, killed renamable $r5, 14, $noreg, $noreg, debug-location !169; batchtest/jfdctint/jfdctint.c:195:25
# Before:
not available
# After:
not available
## Instruction: renamable $r5 = LDRi12 renamable $r1, 20, 14, $noreg, debug-location !171 :: (load (s32) from %ir.arrayidx11); batchtest/jfdctint/jfdctint.c:196:27
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r6 = nsw ADDrr renamable $lr, renamable $r5, 14, $noreg, $noreg, debug-location !172; batchtest/jfdctint/jfdctint.c:196:25
# Before:
not available
# After:
not available
## Instruction: renamable $r5 = nsw SUBrr killed renamable $lr, killed renamable $r5, 14, $noreg, $noreg, debug-location !173; batchtest/jfdctint/jfdctint.c:197:25
# Before:
not available
# After:
not available
## Instruction: renamable $r7 = LDRi12 renamable $r1, 16, 14, $noreg, debug-location !175 :: (load (s32) from %ir.arrayidx17); batchtest/jfdctint/jfdctint.c:198:27
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $lr = nsw ADDrr renamable $r2, renamable $r7, 14, $noreg, $noreg, debug-location !176; batchtest/jfdctint/jfdctint.c:198:25
# Before:
not available
# After:
not available
## Instruction: renamable $r7 = nsw SUBrr killed renamable $r2, killed renamable $r7, 14, $noreg, $noreg, debug-location !177; batchtest/jfdctint/jfdctint.c:199:25
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw ADDrr renamable $r12, renamable $lr, 14, $noreg, $noreg, debug-location !178; batchtest/jfdctint/jfdctint.c:201:18
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nsw SUBrr killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !179; batchtest/jfdctint/jfdctint.c:202:18
# Before:
not available
# After:
not available
## Instruction: renamable $lr = nsw ADDrr renamable $r0, renamable $r6, 14, $noreg, $noreg, debug-location !180; batchtest/jfdctint/jfdctint.c:203:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r6, 14, $noreg, $noreg, debug-location !181; batchtest/jfdctint/jfdctint.c:204:18
# Before:
not available
# After:
not available
## Instruction: renamable $r6 = nsw ADDrr renamable $r2, renamable $lr, 14, $noreg, $noreg, debug-location !182; batchtest/jfdctint/jfdctint.c:206:38
# Before:
not available
# After:
not available
## Instruction: renamable $r6 = MOVsi killed renamable $r6, 18, 14, $noreg, $noreg, debug-location !183; batchtest/jfdctint/jfdctint.c:206:48
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r6, renamable $r1, 0, 14, $noreg, debug-location !184 :: (store (s32) into %ir.dataptr.0); batchtest/jfdctint/jfdctint.c:206:18
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = nsw SUBrr killed renamable $r2, killed renamable $lr, 14, $noreg, $noreg, debug-location !185; batchtest/jfdctint/jfdctint.c:207:38
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsi killed renamable $r2, 18, 14, $noreg, $noreg, debug-location !186; batchtest/jfdctint/jfdctint.c:207:48
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 16, 14, $noreg, debug-location !188 :: (store (s32) into %ir.arrayidx30); batchtest/jfdctint/jfdctint.c:207:18
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = nsw ADDrr renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !189; batchtest/jfdctint/jfdctint.c:209:18
# Before:
not available
# After:
not available
## Instruction: $lr = MOVi 126, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $lr = ORRri $lr, 6144, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r6 = nsw MULv5 killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !191; batchtest/jfdctint/jfdctint.c:210:28
# Before:
not available
# After:
not available
## Instruction: $r12 = MOVi 81, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r12 = ORRri $r12, 4352, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $lr = nsw MLAv5 renamable $r2, renamable $r12, killed renamable $r6, 14, $noreg, $noreg, debug-location !191; batchtest/jfdctint/jfdctint.c:210:28
# Before:
not available
# After:
not available
## Instruction: renamable $lr = nsw ADDri killed renamable $lr, 1024, 14, $noreg, $noreg, debug-location !191; batchtest/jfdctint/jfdctint.c:210:28
# Before:
not available
# After:
not available
## Instruction: renamable $lr = MOVsi killed renamable $lr, 89, 14, $noreg, $noreg, debug-location !191; batchtest/jfdctint/jfdctint.c:210:28
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $lr, renamable $r1, 8, 14, $noreg, debug-location !193 :: (store (s32) into %ir.arrayidx35); batchtest/jfdctint/jfdctint.c:210:18
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r6 = MVNi 32, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r6 = SUBri $r6, 15104, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $lr = nsw MULv5 killed renamable $r0, killed renamable $r6, 14, $noreg, $noreg, debug-location !194; batchtest/jfdctint/jfdctint.c:212:28
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MLAv5 killed renamable $r2, killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !194; batchtest/jfdctint/jfdctint.c:212:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDri killed renamable $r0, 1024, 14, $noreg, $noreg, debug-location !194; batchtest/jfdctint/jfdctint.c:212:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 89, 14, $noreg, $noreg, debug-location !194; batchtest/jfdctint/jfdctint.c:212:28
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 24, 14, $noreg, debug-location !196 :: (store (s32) into %ir.arrayidx40); batchtest/jfdctint/jfdctint.c:212:18
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> 0xffffc4df,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> 0xffffc4df,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r6 = nsw ADDrr renamable $r7, renamable $r3, 14, $noreg, $noreg, debug-location !197; batchtest/jfdctint/jfdctint.c:215:15
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nsw ADDrr renamable $r5, renamable $r4, 14, $noreg, $noreg, debug-location !198; batchtest/jfdctint/jfdctint.c:216:15
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw ADDrr renamable $r7, renamable $r4, 14, $noreg, $noreg, debug-location !199; batchtest/jfdctint/jfdctint.c:217:15
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDrr renamable $r5, renamable $r3, 14, $noreg, $noreg, debug-location !200; batchtest/jfdctint/jfdctint.c:218:15
# Before:
not available
# After:
not available
## Instruction: renamable $lr = nsw ADDrr renamable $r2, renamable $r0, 14, $noreg, $noreg, debug-location !201; batchtest/jfdctint/jfdctint.c:219:15
# Before:
not available
# After:
not available
## Instruction: $r8 = MOVi 161, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r8 = ORRri $r8, 9472, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r9 = nsw MULv5 killed renamable $lr, killed renamable $r8, 14, $noreg, $noreg, debug-location !202; batchtest/jfdctint/jfdctint.c:219:22
# Before:
not available
# After:
not available
## Instruction: $r8 = MVNi 204, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r8 = SUBri $r8, 7168, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $lr = nsw MULv5 killed renamable $r6, killed renamable $r8, 14, $noreg, $noreg, debug-location !207; batchtest/jfdctint/jfdctint.c:225:13
# Before:
not available
# After:
not available
## Instruction: $r8 = MVNi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r8 = SUBri $r8, 20992, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r6 = nsw MULv5 killed renamable $r12, killed renamable $r8, 14, $noreg, $noreg, debug-location !208; batchtest/jfdctint/jfdctint.c:226:13
# Before:
not available
# After:
not available
## Instruction: $r8 = MVNi 196, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r8 = SUBri $r8, 15872, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r12 = nsw MLAv5 killed renamable $r2, killed renamable $r8, renamable $r9, 14, $noreg, $noreg, debug-location !211; batchtest/jfdctint/jfdctint.c:230:8
# Before:
not available
# After:
not available
## Instruction: $r8 = MVNi 123, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r8 = SUBri $r8, 3072, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r2 = nsw MLAv5 killed renamable $r0, killed renamable $r8, killed renamable $r9, 14, $noreg, $noreg, debug-location !212; batchtest/jfdctint/jfdctint.c:231:8
# Before:
not available
# After:
not available
## Instruction: $r8 = MOVi 142, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r8 = ORRri $r8, 2304, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MLAv5 killed renamable $r7, killed renamable $r8, renamable $lr, 14, $noreg, $noreg, debug-location !213; batchtest/jfdctint/jfdctint.c:233:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDrr killed renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !213; batchtest/jfdctint/jfdctint.c:233:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDri killed renamable $r0, 1024, 14, $noreg, $noreg, debug-location !213; batchtest/jfdctint/jfdctint.c:233:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 89, 14, $noreg, $noreg, debug-location !213; batchtest/jfdctint/jfdctint.c:233:28
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 28, 14, $noreg, debug-location !215 :: (store (s32) into %ir.arrayidx61); batchtest/jfdctint/jfdctint.c:233:18
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r7 = MOVi 179, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r7 = ORRri $r7, 16640, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MLAv5 killed renamable $r5, killed renamable $r7, renamable $r6, 14, $noreg, $noreg, debug-location !216; batchtest/jfdctint/jfdctint.c:234:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !216; batchtest/jfdctint/jfdctint.c:234:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDri killed renamable $r0, 1024, 14, $noreg, $noreg, debug-location !216; batchtest/jfdctint/jfdctint.c:234:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 89, 14, $noreg, $noreg, debug-location !216; batchtest/jfdctint/jfdctint.c:234:28
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 20, 14, $noreg, debug-location !218 :: (store (s32) into %ir.arrayidx66); batchtest/jfdctint/jfdctint.c:234:18
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r5 = MOVi 596, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r5 = ORRri $r5, 24576, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MLAv5 killed renamable $r4, killed renamable $r5, killed renamable $r6, 14, $noreg, $noreg, debug-location !219; batchtest/jfdctint/jfdctint.c:235:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !219; batchtest/jfdctint/jfdctint.c:235:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDri killed renamable $r0, 1024, 14, $noreg, $noreg, debug-location !219; batchtest/jfdctint/jfdctint.c:235:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 89, 14, $noreg, $noreg, debug-location !219; batchtest/jfdctint/jfdctint.c:235:28
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 12, 14, $noreg, debug-location !221 :: (store (s32) into %ir.arrayidx71); batchtest/jfdctint/jfdctint.c:235:18
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r12 = MOVi 11, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r12 = ORRri $r12, 12288, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MLAv5 killed renamable $r3, killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !222; batchtest/jfdctint/jfdctint.c:236:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !222; batchtest/jfdctint/jfdctint.c:236:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDri killed renamable $r0, 1024, 14, $noreg, $noreg, debug-location !222; batchtest/jfdctint/jfdctint.c:236:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 89, 14, $noreg, $noreg, debug-location !222; batchtest/jfdctint/jfdctint.c:236:28
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 4, 14, $noreg, debug-location !224 :: (store (s32) into %ir.arrayidx76); batchtest/jfdctint/jfdctint.c:236:18
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.3, debug-location !225; batchtest/jfdctint/jfdctint.c:239:3
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r1 = LDRi12 $sp, 20, 14, $noreg, debug-location !226 :: (load (s32) from %stack.2); batchtest/jfdctint/jfdctint.c:238:13
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !226 :: (load (s32) from %stack.3); batchtest/jfdctint/jfdctint.c:238:13
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x3,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = nuw ADDri renamable $r0, 16, 14, $noreg, $noreg, debug-location !226; batchtest/jfdctint/jfdctint.c:238:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !227; batchtest/jfdctint/jfdctint.c:190:41
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.1)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0xd0014, @jfdctint_data,
 1 |-> 0x2,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x3
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top, @jfdctint_data,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.0)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0xd0014, @jfdctint_data,
 1 |-> 0x2,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffc0 |-> 0xd0004, @jfdctint_data
0x7ffffc4 |-> 0x3
0x7ffffc8 |-> 0x2
0x7ffffcc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top, @jfdctint_data,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.1, debug-location !161; batchtest/jfdctint/jfdctint.c:190:3
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r1 = MOVi 3, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      Leaf:
[0 |-> 0xd0004, @jfdctint_data,
 1 |-> 0x3,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      Leaf:
[0 |-> 0xd0004, @jfdctint_data,
 1 |-> 0x3,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb8 |-> 0x3
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.5, debug-location !229; batchtest/jfdctint/jfdctint.c:243:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !159 :: (load (s32) from %stack.5); batchtest/jfdctint/jfdctint.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0xd0004, @jfdctint_data,
 1 |-> 0x3,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top, @jfdctint_data,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !159 :: (load (s32) from %stack.4); batchtest/jfdctint/jfdctint.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0x3,
 1 |-> 0x3,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.7)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0x3,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0x3,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !231; batchtest/jfdctint/jfdctint.c:243:3
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 4, killed $cpsr, debug-location !231; batchtest/jfdctint/jfdctint.c:243:3
# Before:
not available
# After:
not available
## Instruction: B %bb.6, debug-location !231; batchtest/jfdctint/jfdctint.c:243:3
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !233 :: (load (s32) from %stack.7); batchtest/jfdctint/jfdctint.c:244:37
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0x3,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = LDRi12 renamable $r1, 112, 14, $noreg, debug-location !233 :: (load (s32) from %ir.arrayidx81); batchtest/jfdctint/jfdctint.c:244:37
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0x3,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !232 :: (load (s32) from %ir.dataptr.1); batchtest/jfdctint/jfdctint.c:244:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0x3,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r4 = LDRi12 renamable $r1, 16, 14, $noreg, debug-location !236 :: (load (s32) from %ir.arrayidx86); batchtest/jfdctint/jfdctint.c:246:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $lr = LDRi12 renamable $r1, 32, 14, $noreg, debug-location !240 :: (load (s32) from %ir.arrayidx92); batchtest/jfdctint/jfdctint.c:248:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = LDRi12 renamable $r1, 48, 14, $noreg, debug-location !244 :: (load (s32) from %ir.arrayidx98); batchtest/jfdctint/jfdctint.c:250:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r12 = nsw ADDrr renamable $r0, renamable $r3, 14, $noreg, $noreg, debug-location !234; batchtest/jfdctint/jfdctint.c:244:35
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = nsw SUBrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !235; batchtest/jfdctint/jfdctint.c:245:35
# Before:
not available
# After:
not available
## Instruction: renamable $r5 = LDRi12 renamable $r1, 96, 14, $noreg, debug-location !237 :: (load (s32) from %ir.arrayidx87); batchtest/jfdctint/jfdctint.c:246:37
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = nsw ADDrr renamable $r4, renamable $r5, 14, $noreg, $noreg, debug-location !238; batchtest/jfdctint/jfdctint.c:246:35
# Before:
not available
# After:
not available
## Instruction: renamable $r4 = nsw SUBrr killed renamable $r4, killed renamable $r5, 14, $noreg, $noreg, debug-location !239; batchtest/jfdctint/jfdctint.c:247:35
# Before:
not available
# After:
not available
## Instruction: renamable $r5 = LDRi12 renamable $r1, 80, 14, $noreg, debug-location !241 :: (load (s32) from %ir.arrayidx93); batchtest/jfdctint/jfdctint.c:248:37
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r6 = nsw ADDrr renamable $lr, renamable $r5, 14, $noreg, $noreg, debug-location !242; batchtest/jfdctint/jfdctint.c:248:35
# Before:
not available
# After:
not available
## Instruction: renamable $r5 = nsw SUBrr killed renamable $lr, killed renamable $r5, 14, $noreg, $noreg, debug-location !243; batchtest/jfdctint/jfdctint.c:249:35
# Before:
not available
# After:
not available
## Instruction: renamable $r7 = LDRi12 renamable $r1, 64, 14, $noreg, debug-location !245 :: (load (s32) from %ir.arrayidx99); batchtest/jfdctint/jfdctint.c:250:37
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $lr = nsw ADDrr renamable $r2, renamable $r7, 14, $noreg, $noreg, debug-location !246; batchtest/jfdctint/jfdctint.c:250:35
# Before:
not available
# After:
not available
## Instruction: renamable $r7 = nsw SUBrr killed renamable $r2, killed renamable $r7, 14, $noreg, $noreg, debug-location !247; batchtest/jfdctint/jfdctint.c:251:35
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw ADDrr renamable $r12, renamable $lr, 14, $noreg, $noreg, debug-location !248; batchtest/jfdctint/jfdctint.c:253:18
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nsw SUBrr killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !249; batchtest/jfdctint/jfdctint.c:254:18
# Before:
not available
# After:
not available
## Instruction: renamable $lr = nsw ADDrr renamable $r0, renamable $r6, 14, $noreg, $noreg, debug-location !250; batchtest/jfdctint/jfdctint.c:255:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r6, 14, $noreg, $noreg, debug-location !251; batchtest/jfdctint/jfdctint.c:256:18
# Before:
not available
# After:
not available
## Instruction: renamable $r6 = nsw ADDrr renamable $r2, renamable $lr, 14, $noreg, $noreg, debug-location !252; batchtest/jfdctint/jfdctint.c:258:38
# Before:
not available
# After:
not available
## Instruction: renamable $r6 = nsw ADDri killed renamable $r6, 2, 14, $noreg, $noreg, debug-location !252; batchtest/jfdctint/jfdctint.c:258:38
# Before:
not available
# After:
not available
## Instruction: renamable $r6 = MOVsi killed renamable $r6, 17, 14, $noreg, $noreg, debug-location !252; batchtest/jfdctint/jfdctint.c:258:38
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r6, renamable $r1, 0, 14, $noreg, debug-location !253 :: (store (s32) into %ir.dataptr.1); batchtest/jfdctint/jfdctint.c:258:28
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = nsw SUBrr killed renamable $r2, killed renamable $lr, 14, $noreg, $noreg, debug-location !254; batchtest/jfdctint/jfdctint.c:259:38
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw ADDri killed renamable $r2, 2, 14, $noreg, $noreg, debug-location !254; batchtest/jfdctint/jfdctint.c:259:38
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsi killed renamable $r2, 17, 14, $noreg, $noreg, debug-location !254; batchtest/jfdctint/jfdctint.c:259:38
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 64, 14, $noreg, debug-location !256 :: (store (s32) into %ir.arrayidx115); batchtest/jfdctint/jfdctint.c:259:28
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = nsw ADDrr renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !257; batchtest/jfdctint/jfdctint.c:261:18
# Before:
not available
# After:
not available
## Instruction: $lr = MOVi 126, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $lr = ORRri $lr, 6144, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r6 = nsw MULv5 killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !259; batchtest/jfdctint/jfdctint.c:262:38
# Before:
not available
# After:
not available
## Instruction: $r12 = MOVi 81, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r12 = ORRri $r12, 4352, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $lr = nsw MLAv5 renamable $r2, renamable $r12, killed renamable $r6, 14, $noreg, $noreg, debug-location !259; batchtest/jfdctint/jfdctint.c:262:38
# Before:
not available
# After:
not available
## Instruction: renamable $lr = nsw ADDri killed renamable $lr, 16384, 14, $noreg, $noreg, debug-location !259; batchtest/jfdctint/jfdctint.c:262:38
# Before:
not available
# After:
not available
## Instruction: renamable $lr = MOVsi killed renamable $lr, 121, 14, $noreg, $noreg, debug-location !259; batchtest/jfdctint/jfdctint.c:262:38
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $lr, renamable $r1, 32, 14, $noreg, debug-location !261 :: (store (s32) into %ir.arrayidx122); batchtest/jfdctint/jfdctint.c:262:28
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r6 = MVNi 32, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r6 = SUBri $r6, 15104, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $lr = nsw MULv5 killed renamable $r0, killed renamable $r6, 14, $noreg, $noreg, debug-location !262; batchtest/jfdctint/jfdctint.c:264:38
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MLAv5 killed renamable $r2, killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !262; batchtest/jfdctint/jfdctint.c:264:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDri killed renamable $r0, 16384, 14, $noreg, $noreg, debug-location !262; batchtest/jfdctint/jfdctint.c:264:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 121, 14, $noreg, $noreg, debug-location !262; batchtest/jfdctint/jfdctint.c:264:38
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 96, 14, $noreg, debug-location !264 :: (store (s32) into %ir.arrayidx127); batchtest/jfdctint/jfdctint.c:264:28
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> 0xffffc4df,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> 0xffffc4df,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r6 = nsw ADDrr renamable $r7, renamable $r3, 14, $noreg, $noreg, debug-location !265; batchtest/jfdctint/jfdctint.c:268:15
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nsw ADDrr renamable $r5, renamable $r4, 14, $noreg, $noreg, debug-location !266; batchtest/jfdctint/jfdctint.c:269:15
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw ADDrr renamable $r7, renamable $r4, 14, $noreg, $noreg, debug-location !267; batchtest/jfdctint/jfdctint.c:270:15
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDrr renamable $r5, renamable $r3, 14, $noreg, $noreg, debug-location !268; batchtest/jfdctint/jfdctint.c:271:15
# Before:
not available
# After:
not available
## Instruction: renamable $lr = nsw ADDrr renamable $r2, renamable $r0, 14, $noreg, $noreg, debug-location !269; batchtest/jfdctint/jfdctint.c:272:15
# Before:
not available
# After:
not available
## Instruction: $r8 = MOVi 161, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r8 = ORRri $r8, 9472, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r9 = nsw MULv5 killed renamable $lr, killed renamable $r8, 14, $noreg, $noreg, debug-location !270; batchtest/jfdctint/jfdctint.c:272:22
# Before:
not available
# After:
not available
## Instruction: $r8 = MVNi 204, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r8 = SUBri $r8, 7168, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $lr = nsw MULv5 killed renamable $r6, killed renamable $r8, 14, $noreg, $noreg, debug-location !275; batchtest/jfdctint/jfdctint.c:278:13
# Before:
not available
# After:
not available
## Instruction: $r8 = MVNi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r8 = SUBri $r8, 20992, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r6 = nsw MULv5 killed renamable $r12, killed renamable $r8, 14, $noreg, $noreg, debug-location !276; batchtest/jfdctint/jfdctint.c:279:13
# Before:
not available
# After:
not available
## Instruction: $r8 = MVNi 196, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r8 = SUBri $r8, 15872, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r12 = nsw MLAv5 killed renamable $r2, killed renamable $r8, renamable $r9, 14, $noreg, $noreg, debug-location !279; batchtest/jfdctint/jfdctint.c:283:8
# Before:
not available
# After:
not available
## Instruction: $r8 = MVNi 123, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r8 = SUBri $r8, 3072, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r2 = nsw MLAv5 killed renamable $r0, killed renamable $r8, killed renamable $r9, 14, $noreg, $noreg, debug-location !280; batchtest/jfdctint/jfdctint.c:284:8
# Before:
not available
# After:
not available
## Instruction: $r8 = MOVi 142, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r8 = ORRri $r8, 2304, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MLAv5 killed renamable $r7, killed renamable $r8, renamable $lr, 14, $noreg, $noreg, debug-location !281; batchtest/jfdctint/jfdctint.c:286:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDrr killed renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !281; batchtest/jfdctint/jfdctint.c:286:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDri killed renamable $r0, 16384, 14, $noreg, $noreg, debug-location !281; batchtest/jfdctint/jfdctint.c:286:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 121, 14, $noreg, $noreg, debug-location !281; batchtest/jfdctint/jfdctint.c:286:38
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 112, 14, $noreg, debug-location !283 :: (store (s32) into %ir.arrayidx148); batchtest/jfdctint/jfdctint.c:286:28
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r7 = MOVi 179, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r7 = ORRri $r7, 16640, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MLAv5 killed renamable $r5, killed renamable $r7, renamable $r6, 14, $noreg, $noreg, debug-location !284; batchtest/jfdctint/jfdctint.c:288:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !284; batchtest/jfdctint/jfdctint.c:288:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDri killed renamable $r0, 16384, 14, $noreg, $noreg, debug-location !284; batchtest/jfdctint/jfdctint.c:288:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 121, 14, $noreg, $noreg, debug-location !284; batchtest/jfdctint/jfdctint.c:288:38
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 80, 14, $noreg, debug-location !286 :: (store (s32) into %ir.arrayidx153); batchtest/jfdctint/jfdctint.c:288:28
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r5 = MOVi 596, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r5 = ORRri $r5, 24576, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MLAv5 killed renamable $r4, killed renamable $r5, killed renamable $r6, 14, $noreg, $noreg, debug-location !287; batchtest/jfdctint/jfdctint.c:290:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !287; batchtest/jfdctint/jfdctint.c:290:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDri killed renamable $r0, 16384, 14, $noreg, $noreg, debug-location !287; batchtest/jfdctint/jfdctint.c:290:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 121, 14, $noreg, $noreg, debug-location !287; batchtest/jfdctint/jfdctint.c:290:38
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 48, 14, $noreg, debug-location !289 :: (store (s32) into %ir.arrayidx158); batchtest/jfdctint/jfdctint.c:290:28
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r12 = MOVi 11, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r12 = ORRri $r12, 12288, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MLAv5 killed renamable $r3, killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !290; batchtest/jfdctint/jfdctint.c:292:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !290; batchtest/jfdctint/jfdctint.c:292:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDri killed renamable $r0, 16384, 14, $noreg, $noreg, debug-location !290; batchtest/jfdctint/jfdctint.c:292:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 121, 14, $noreg, $noreg, debug-location !290; batchtest/jfdctint/jfdctint.c:292:38
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 16, 14, $noreg, debug-location !292 :: (store (s32) into %ir.arrayidx163); batchtest/jfdctint/jfdctint.c:292:28
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.7, debug-location !293; batchtest/jfdctint/jfdctint.c:296:3
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !294 :: (load (s32) from %stack.6); batchtest/jfdctint/jfdctint.c:295:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0xd0004, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !294 :: (load (s32) from %stack.7); batchtest/jfdctint/jfdctint.c:295:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x3,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = nuw ADDri renamable $r0, 4, 14, $noreg, $noreg, debug-location !294; batchtest/jfdctint/jfdctint.c:295:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !295; batchtest/jfdctint/jfdctint.c:243:41
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0xd0008, @jfdctint_data,
 1 |-> 0x2,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x3
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top, @jfdctint_data,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      [
       Loop Peeling: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken 0 times |->
        Leaf:
[0 |-> 0xd0008, @jfdctint_data,
 1 |-> 0x2,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> 0xd0004, @jfdctint_data
0x7ffffb4 |-> 0x3
0x7ffffb8 |-> 0x2
0x7ffffbc |-> 0xd0004, @jfdctint_data
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

       Loop Iteration: Backedges {(BB7, BB5)} in function jfdctint_jpeg_fdct_islow taken at least 1 times |->
        Leaf:
[0 |-> top, @jfdctint_data,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffb0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.5, debug-location !231; batchtest/jfdctint/jfdctint.c:243:3
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: $sp = frame-destroy SUBri killed $r11, 24, 14, $noreg, $noreg, debug-location !297; batchtest/jfdctint/jfdctint.c:298:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r5, def $r6, def $r7, def $r8, def $r9, def $r11, def $lr, debug-location !297; batchtest/jfdctint/jfdctint.c:298:1
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location jfdctint_main_BB0_I6 |->
    [
     Call of function jfdctint_jpeg_fdct_islow |->
      Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: BX_RET 14, $noreg, debug-location !297; batchtest/jfdctint/jfdctint.c:298:1
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
#### Function: jfdctint_main
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function jfdctint_main |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{}
  ]
]
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL_pred @jfdctint_jpeg_fdct_islow, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !299; batchtest/jfdctint/jfdctint.c:309:3
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !300; batchtest/jfdctint/jfdctint.c:310:1
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function jfdctint_main |->
    Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff0,
 12 |-> top,
 13 |-> 0x7fffff0,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
  ]
]
# After:
not available
## Instruction: BX_RET 14, $noreg, debug-location !300; batchtest/jfdctint/jfdctint.c:310:1
# Before:
not available
# After:
not available
#### Function: jfdctint_return
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    Leaf:
[0 |-> top,
 1 |-> top, @jfdctint_data,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
  ]
]
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.0)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x0
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
  ]
]
# After:
not available
## Instruction: B %bb.1, debug-location !144; batchtest/jfdctint/jfdctint.c:166:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !145 :: (load (s32) from %stack.1); batchtest/jfdctint/jfdctint.c:0
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !145 :: (load (s32) from %stack.0); batchtest/jfdctint/jfdctint.c:0
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: CMPri renamable $r0, 16, 14, $noreg, implicit-def $cpsr, debug-location !147; batchtest/jfdctint/jfdctint.c:166:3
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 0, killed $cpsr, debug-location !147; batchtest/jfdctint/jfdctint.c:166:3
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !147; batchtest/jfdctint/jfdctint.c:166:3
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: B %bb.3, debug-location !148; batchtest/jfdctint/jfdctint.c:167:5
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !149 :: (load (s32) from %stack.2); batchtest/jfdctint/jfdctint.c:167:17
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !149 :: (load (s32) from %stack.3); batchtest/jfdctint/jfdctint.c:167:17
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.0, 0, 14, $noreg, debug-location !149 :: (load (s32) from constant-pool); batchtest/jfdctint/jfdctint.c:167:17
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = LDRrs killed renamable $r2, renamable $r1, 16386, 14, $noreg, debug-location !149 :: (load (s32) from %ir.arrayidx); batchtest/jfdctint/jfdctint.c:167:17
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> 0xd0004, @jfdctint_data,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0xd0004, @jfdctint_data,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = nsw ADDrr renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !150; batchtest/jfdctint/jfdctint.c:167:14
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nuw nsw ADDri renamable $r1, 1, 14, $noreg, $noreg, debug-location !151; batchtest/jfdctint/jfdctint.c:166:24
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_return taken 0 times |->
      Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.0)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function jfdctint_return taken 0 times |->
      Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x1
0x7fffff4 |-> 0x0
0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}

     Loop Iteration: Backedges {(BB3, BB1)} in function jfdctint_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.1, debug-location !147; batchtest/jfdctint/jfdctint.c:166:3
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg :: (load (s32) from %stack.3)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
  ]
]
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function jfdctint_return |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffe8,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
  ]
]
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, def $cpsr, debug-location !155; batchtest/jfdctint/jfdctint.c:168:12
# Before:
not available
# After:
not available
## Instruction: $r0 = MVNi 0, 1, killed $cpsr, $noreg, implicit renamable $r0, debug-location !155; batchtest/jfdctint/jfdctint.c:168:12
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 16, 14, $noreg, $noreg, debug-location !156; batchtest/jfdctint/jfdctint.c:168:3
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !156; batchtest/jfdctint/jfdctint.c:168:3
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: main
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
[
 Call of function main |->
  Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> top,
 12 |-> top,
 13 |-> 0x8000000,
 14 |-> top,
 15 |-> top]
{}
]
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL_pred @jfdctint_init, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !302; batchtest/jfdctint/jfdctint.c:315:3
# Before:
not available
# After:
not available
## Instruction: BL_pred @jfdctint_main, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !303; batchtest/jfdctint/jfdctint.c:316:3
# Before:
not available
# After:
not available
## Instruction: BL_pred @jfdctint_return, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $r0, debug-location !304; batchtest/jfdctint/jfdctint.c:318:12
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !305; batchtest/jfdctint/jfdctint.c:318:3
# Before:
[
 Call of function main |->
  Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{0x7ffffb0 |-> top, @jfdctint_data
0x7ffffbc |-> top, @jfdctint_data
0x7ffffc0 |-> top, @jfdctint_data
0x7ffffcc |-> top, @jfdctint_data
}
]
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !305; batchtest/jfdctint/jfdctint.c:318:3
# Before:
not available
# After:
not available
#### Function: memcpy
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: B %bb.1, debug-location !1277; ../memory.c:8:6
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1278 :: (load (s32) from %stack.3); ../memory.c:0
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1278 :: (load (s32) from %stack.0); ../memory.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1280; ../memory.c:8:2
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 0, killed $cpsr, debug-location !1280; ../memory.c:8:2
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1280; ../memory.c:8:2
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1281 :: (load (s32) from %stack.1); ../memory.c:9:21
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1281 :: (load (s32) from %stack.4); ../memory.c:9:21
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1281 :: (load (s32) from %stack.2); ../memory.c:9:21
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRBrs renamable $r0, renamable $r2, 0, 14, $noreg, debug-location !1281 :: (load (s8) from %ir.arrayidx); ../memory.c:9:21
# Before:
bot
# After:
not available
## Instruction: STRBrs killed renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1283 :: (store (s8) into %ir.arrayidx1); ../memory.c:9:19
# Before:
bot
# After:
not available
## Instruction: B %bb.3, debug-location !1284; ../memory.c:10:2
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1285 :: (load (s32) from %stack.4); ../memory.c:8:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1285; ../memory.c:8:26
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: B %bb.1, debug-location !1280; ../memory.c:8:2
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1287; ../memory.c:11:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1287; ../memory.c:11:1
# Before:
not available
# After:
not available
#### Function: memset
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: B %bb.1, debug-location !1289; ../memory.c:17:6
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1290 :: (load (s32) from %stack.3); ../memory.c:0
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1290 :: (load (s32) from %stack.0); ../memory.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1292; ../memory.c:17:2
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 0, killed $cpsr, debug-location !1292; ../memory.c:17:2
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1292; ../memory.c:17:2
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1295 :: (load (s32) from %stack.2); ../memory.c:18:11
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1295 :: (load (s32) from %stack.1); ../memory.c:18:11
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1295 :: (load (s32) from %stack.4); ../memory.c:18:11
# Before:
bot
# After:
not available
## Instruction: STRBrs renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1295 :: (store (s8) into %ir.arrayidx); ../memory.c:18:11
# Before:
bot
# After:
not available
## Instruction: B %bb.3, debug-location !1296; ../memory.c:19:2
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1297 :: (load (s32) from %stack.4); ../memory.c:17:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1297; ../memory.c:17:26
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: B %bb.1, debug-location !1292; ../memory.c:17:2
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1299 :: (load (s32) from %stack.1); ../memory.c:20:2
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1299; ../memory.c:20:2
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1299; ../memory.c:20:2
# Before:
not available
# After:
not available
