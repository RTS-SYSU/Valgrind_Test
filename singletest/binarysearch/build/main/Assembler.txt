Textual Machine Code Representation
------------------------------------

# Machine code for function binarysearch_initSeed: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: @binarysearch_seed, align=4

bb.0.entry:
  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !129 :: (load (s32) from constant-pool); batchtest/binarysearch/binarysearch.c:68:54
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !129 :: (volatile store (s32) into @binarysearch_seed); batchtest/binarysearch/binarysearch.c:68:54
  BX_RET 14, $noreg, debug-location !130; batchtest/binarysearch/binarysearch.c:68:59

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function binarysearch_initSeed.

# Machine code for function binarysearch_randomInteger: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: @binarysearch_seed, align=4
  cp#1: 271652039, align=4

bb.0.entry:
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !132 :: (load (s32) from constant-pool); batchtest/binarysearch/binarysearch.c:74:25
  renamable $r2 = LDRi12 renamable $r0, 0, 14, $noreg, debug-location !132 :: (volatile dereferenceable load (s32) from @binarysearch_seed); batchtest/binarysearch/binarysearch.c:74:25
  renamable $r3 = MOVi 133, 14, $noreg, $noreg
  early-clobber renamable $r1 = nsw MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !133; batchtest/binarysearch/binarysearch.c:74:43
  renamable $r1 = nsw ADDri killed renamable $r1, 81, 14, $noreg, $noreg, debug-location !134; batchtest/binarysearch/binarysearch.c:74:50
  renamable $r12 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  dead early-clobber renamable $r2, early-clobber renamable $r3 = SMULLv5 renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !135; batchtest/binarysearch/binarysearch.c:74:56
  renamable $r2 = MOVsi renamable $r3, 73, 14, $noreg, $noreg, debug-location !135; batchtest/binarysearch/binarysearch.c:74:56
  renamable $r3 = ADDrsi killed renamable $r2, killed renamable $r3, 251, 14, $noreg, $noreg, debug-location !135; batchtest/binarysearch/binarysearch.c:74:56
  $r12 = MOVi 159, 14, $noreg, $noreg
  $r12 = ORRri $r12, 7936, 14, $noreg, $noreg
  early-clobber renamable $r2 = MULv5 killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !135; batchtest/binarysearch/binarysearch.c:74:56
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !135; batchtest/binarysearch/binarysearch.c:74:56
  STRi12 killed renamable $r1, renamable $r0, 0, 14, $noreg, debug-location !136 :: (volatile store (s32) into @binarysearch_seed); batchtest/binarysearch/binarysearch.c:74:21
  renamable $r0 = LDRi12 killed renamable $r0, 0, 14, $noreg, debug-location !137 :: (volatile dereferenceable load (s32) from @binarysearch_seed); batchtest/binarysearch/binarysearch.c:75:11
  BX_RET 14, $noreg, implicit killed $r0, debug-location !138; batchtest/binarysearch/binarysearch.c:75:3

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function binarysearch_randomInteger.

# Machine code for function binarysearch_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-4]
  fi#4: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @binarysearch_data, align=4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  BL_pred @binarysearch_initSeed, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !140; batchtest/binarysearch/binarysearch.c:81:3
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !141; batchtest/binarysearch/binarysearch.c:83:43

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !142 :: (load (s32) from %stack.0); batchtest/binarysearch/binarysearch.c:0
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  CMPri renamable $r0, 15, 14, $noreg, implicit-def $cpsr, debug-location !144; batchtest/binarysearch/binarysearch.c:83:38
  Bcc %bb.4, 0, killed $cpsr, debug-location !144; batchtest/binarysearch/binarysearch.c:83:38
  B %bb.2, debug-location !144; batchtest/binarysearch/binarysearch.c:83:38

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  BL_pred @binarysearch_randomInteger, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $r0, debug-location !145; batchtest/binarysearch/binarysearch.c:84:32
  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !145 :: (load (s32) from %stack.1); batchtest/binarysearch/binarysearch.c:84:32
  $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !145; batchtest/binarysearch/binarysearch.c:84:32
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !146 :: (load (s32) from constant-pool); batchtest/binarysearch/binarysearch.c:84:26
  early-clobber renamable $r0 = STR_PRE_REG killed renamable $r1, renamable $r0(tied-def 0), renamable $r2, 16387, 14, $noreg, debug-location !147; batchtest/binarysearch/binarysearch.c:84:30
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  BL_pred @binarysearch_randomInteger, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $r0, debug-location !148; batchtest/binarysearch/binarysearch.c:85:34
  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !148 :: (load (s32) from %stack.2); batchtest/binarysearch/binarysearch.c:85:34
  STRi12 killed renamable $r0, killed renamable $r1, 4, 14, $noreg, debug-location !150 :: (store (s32) into %ir.value); batchtest/binarysearch/binarysearch.c:85:32
  B %bb.3, debug-location !151; batchtest/binarysearch/binarysearch.c:86:3

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !152 :: (load (s32) from %stack.1); batchtest/binarysearch/binarysearch.c:83:58
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !152; batchtest/binarysearch/binarysearch.c:83:58
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !144; batchtest/binarysearch/binarysearch.c:83:38

bb.4.for.end:
; predecessors: %bb.1

  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !155; batchtest/binarysearch/binarysearch.c:87:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !155; batchtest/binarysearch/binarysearch.c:87:1
  BX_RET 14, $noreg, debug-location !155; batchtest/binarysearch/binarysearch.c:87:1

bb.5 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function binarysearch_init.

# Machine code for function binarysearch_return: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: @binarysearch_result, align=4

bb.0.entry:
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !157 :: (load (s32) from constant-pool); batchtest/binarysearch/binarysearch.c:89:41
  renamable $r0 = LDRi12 killed renamable $r0, 0, 14, $noreg, debug-location !157 :: (dereferenceable load (s32) from @binarysearch_result); batchtest/binarysearch/binarysearch.c:89:41
  BX_RET 14, $noreg, implicit killed $r0, debug-location !158; batchtest/binarysearch/binarysearch.c:89:33

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function binarysearch_return.

# Machine code for function binarysearch_binary_search: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-24]
  fi#6: size=4, align=4, at location [SP-28]
  fi#7: size=4, align=4, at location [SP-32]
  fi#8: size=4, align=4, at location [SP-36]
  fi#9: size=4, align=4, at location [SP-40]
  fi#10: size=4, align=4, at location [SP-44]
Constant Pool:
  cp#0: @binarysearch_data, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0
  $sp = frame-setup SUBri killed $sp, 44, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 44
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.3)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  renamable $r1 = MVNi 0, 14, $noreg, $noreg
  renamable $r2 = MOVi 14, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r1, $sp, 36, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !160; batchtest/binarysearch/binarysearch.c:102:36

bb.1.while.cond:
; predecessors: %bb.0, %bb.8
  successors: %bb.9, %bb.2

  $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !161 :: (load (s32) from %stack.2); batchtest/binarysearch/binarysearch.c:0
  $r2 = LDRi12 $sp, 36, 14, $noreg, debug-location !161 :: (load (s32) from %stack.1); batchtest/binarysearch/binarysearch.c:0
  $r0 = LDRi12 $sp, 40, 14, $noreg, debug-location !161 :: (load (s32) from %stack.0); batchtest/binarysearch/binarysearch.c:0
  STRi12 $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r2, $sp, 20, 14, $noreg :: (store (s32) into %stack.5)
  STRi12 $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.4)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !160; batchtest/binarysearch/binarysearch.c:102:36
  Bcc %bb.9, 12, killed $cpsr, debug-location !160; batchtest/binarysearch/binarysearch.c:102:36
  B %bb.2, debug-location !160; batchtest/binarysearch/binarysearch.c:102:36

bb.2.while.body:
; predecessors: %bb.1
  successors: %bb.3, %bb.4

  $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !163 :: (load (s32) from %stack.3); batchtest/binarysearch/binarysearch.c:103:16
  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !163 :: (load (s32) from %stack.6); batchtest/binarysearch/binarysearch.c:103:16
  $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !163 :: (load (s32) from %stack.4); batchtest/binarysearch/binarysearch.c:103:16
  renamable $r0 = nsw ADDrr renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !163; batchtest/binarysearch/binarysearch.c:103:16
  renamable $r2 = MOVsi killed renamable $r0, 9, 14, $noreg, $noreg, debug-location !164; batchtest/binarysearch/binarysearch.c:103:22
  STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.7)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !165 :: (load (s32) from constant-pool); batchtest/binarysearch/binarysearch.c:105:32
  renamable $r0 = LDRrs killed renamable $r0, renamable $r2, 16387, 14, $noreg, debug-location !165 :: (load (s32) from %ir.key); batchtest/binarysearch/binarysearch.c:105:32
  CMPrr killed renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !167; batchtest/binarysearch/binarysearch.c:105:9
  Bcc %bb.4, 1, killed $cpsr, debug-location !167; batchtest/binarysearch/binarysearch.c:105:9
  B %bb.3, debug-location !167; batchtest/binarysearch/binarysearch.c:105:9

bb.3.if.then:
; predecessors: %bb.2
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !168 :: (load (s32) from %stack.7); batchtest/binarysearch/binarysearch.c:107:16
  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !168 :: (load (s32) from %stack.6); batchtest/binarysearch/binarysearch.c:107:16
  renamable $r1 = nsw SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !168; batchtest/binarysearch/binarysearch.c:107:16
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !169 :: (load (s32) from constant-pool); batchtest/binarysearch/binarysearch.c:108:39
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r2, 26, 14, $noreg, $noreg, debug-location !169; batchtest/binarysearch/binarysearch.c:108:39
  renamable $r0 = LDRi12 killed renamable $r0, 4, 14, $noreg, debug-location !169 :: (load (s32) from %ir.value); batchtest/binarysearch/binarysearch.c:108:39
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.9)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.8, debug-location !170; batchtest/binarysearch/binarysearch.c:109:5

bb.4.if.else:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !171 :: (load (s32) from %stack.3); batchtest/binarysearch/binarysearch.c:109:39
  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !171 :: (load (s32) from %stack.7); batchtest/binarysearch/binarysearch.c:109:39
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !171 :: (load (s32) from constant-pool); batchtest/binarysearch/binarysearch.c:109:39
  renamable $r0 = LDRrs killed renamable $r0, renamable $r2, 16387, 14, $noreg, debug-location !171 :: (load (s32) from %ir.key4); batchtest/binarysearch/binarysearch.c:109:39
  CMPrr killed renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !173; batchtest/binarysearch/binarysearch.c:109:16
  Bcc %bb.6, 13, killed $cpsr, debug-location !173; batchtest/binarysearch/binarysearch.c:109:16
  B %bb.5, debug-location !173; batchtest/binarysearch/binarysearch.c:109:16

bb.5.if.then6:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !174 :: (load (s32) from %stack.7); batchtest/binarysearch/binarysearch.c:111:16
  renamable $r0 = nsw SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !174; batchtest/binarysearch/binarysearch.c:111:16
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.10)
  B %bb.7, debug-location !175; batchtest/binarysearch/binarysearch.c:111:7

bb.6.if.else8:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r0 = LDRi12 $sp, 24, 14, $noreg :: (load (s32) from %stack.4)
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.10)
  B %bb.7

bb.7.if.end:
; predecessors: %bb.6, %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !161 :: (load (s32) from %stack.5); batchtest/binarysearch/binarysearch.c:0
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !161 :: (load (s32) from %stack.10); batchtest/binarysearch/binarysearch.c:0
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.9)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.8

bb.8.if.end10:
; predecessors: %bb.7, %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !161 :: (load (s32) from %stack.9); batchtest/binarysearch/binarysearch.c:0
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !161 :: (load (s32) from %stack.8); batchtest/binarysearch/binarysearch.c:0
  renamable $r0 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !176; batchtest/binarysearch/binarysearch.c:114:14
  STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r1, $sp, 36, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !160; batchtest/binarysearch/binarysearch.c:102:36

bb.9.while.end:
; predecessors: %bb.1

  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !179 :: (load (s32) from %stack.5); batchtest/binarysearch/binarysearch.c:117:3
  $sp = frame-destroy ADDri killed $sp, 44, 14, $noreg, $noreg, debug-location !179; batchtest/binarysearch/binarysearch.c:117:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !179; batchtest/binarysearch/binarysearch.c:117:3

bb.10 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function binarysearch_binary_search.

# Machine code for function binarysearch_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @binarysearch_result, align=4

bb.0.entry:
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  renamable $r0 = MOVi 8, 14, $noreg, $noreg
  BL_pred @binarysearch_binary_search, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !181; batchtest/binarysearch/binarysearch.c:125:25
  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !182 :: (load (s32) from constant-pool); batchtest/binarysearch/binarysearch.c:125:23
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !182 :: (store (s32) into @binarysearch_result); batchtest/binarysearch/binarysearch.c:125:23
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !183; batchtest/binarysearch/binarysearch.c:126:1
  BX_RET 14, $noreg, debug-location !183; batchtest/binarysearch/binarysearch.c:126:1

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function binarysearch_main.

# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]

bb.0.entry:
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  BL_pred @binarysearch_init, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !185; batchtest/binarysearch/binarysearch.c:129:3
  BL_pred @binarysearch_main, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !186; batchtest/binarysearch/binarysearch.c:130:3
  BL_pred @binarysearch_return, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $r0, debug-location !187; batchtest/binarysearch/binarysearch.c:132:11
  renamable $r1 = MVNi 0, 14, $noreg, $noreg
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, def $cpsr, debug-location !188; batchtest/binarysearch/binarysearch.c:132:40
  $r0 = MOVi 1, 1, killed $cpsr, $noreg, implicit renamable $r0, debug-location !188; batchtest/binarysearch/binarysearch.c:132:40
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !189; batchtest/binarysearch/binarysearch.c:132:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !189; batchtest/binarysearch/binarysearch.c:132:3

# End machine code for function main.

# Machine code for function __absvdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @__func__.__absvdi2, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  $r2 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  $r2 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !191; ../absvdi2.c:25:11
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !191; ../absvdi2.c:25:11
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !192; ../absvdi2.c:25:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !192; ../absvdi2.c:25:9
  B %bb.1, debug-location !192; ../absvdi2.c:25:9

bb.1.if.then:
; predecessors: %bb.0

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !193 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !193 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
  renamable $r1 = MOVi 26, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !193; ../absvdi2.c:26:9

bb.2.if.end:
; predecessors: %bb.0

  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !194 :: (load (s32) from %stack.1); ../absvdi2.c:28:20
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !194 :: (load (s32) from %stack.0); ../absvdi2.c:28:20
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !194; ../absvdi2.c:28:20
  renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !194; ../absvdi2.c:28:20
  renamable $r1 = ADCrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !194; ../absvdi2.c:28:20
  renamable $r1 = EORrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, debug-location !194; ../absvdi2.c:28:20
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !195; ../absvdi2.c:28:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !195; ../absvdi2.c:28:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !195; ../absvdi2.c:28:5

bb.3 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __absvdi2.

# Machine code for function compilerrt_abort_impl: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten

bb.0.entry:

# End machine code for function compilerrt_abort_impl.

# Machine code for function __absvsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.1, align=4
  cp#1: @__func__.__absvsi2, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !200; ../absvsi2.c:25:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !200; ../absvsi2.c:25:9
  B %bb.1, debug-location !200; ../absvsi2.c:25:9

bb.1.if.then:
; predecessors: %bb.0

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !201 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !201 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
  renamable $r1 = MOVi 26, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !201; ../absvsi2.c:26:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !202 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !202; ../absvsi2.c:28:20
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  Bcc %bb.4, 5, killed $cpsr, debug-location !202; ../absvsi2.c:28:20

bb.3.if.end:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !202 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
  renamable $r0 = RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !202; ../absvsi2.c:28:20
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)

bb.4.if.end:
; predecessors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !202 :: (load (s32) from %stack.1); ../absvsi2.c:28:20
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !203; ../absvsi2.c:28:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !203; ../absvsi2.c:28:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !203; ../absvsi2.c:28:5

bb.5 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __absvsi2.

# Machine code for function __addvdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-4]
  fi#5: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.2, align=4
  cp#1: @__func__.__addvdi3, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  $r12 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  $r12 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !205; ../addvdi3.c:24:27
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = ADCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !205; ../addvdi3.c:24:27
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !207; ../addvdi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !207; ../addvdi3.c:25:9
  B %bb.1, debug-location !207; ../addvdi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !208 :: (load (s32) from %stack.0); ../addvdi3.c:27:15
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !208 :: (load (s32) from %stack.3); ../addvdi3.c:27:15
  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !208 :: (load (s32) from %stack.1); ../addvdi3.c:27:15
  $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !208 :: (load (s32) from %stack.2); ../addvdi3.c:27:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !208; ../addvdi3.c:27:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !208; ../addvdi3.c:27:15
  Bcc %bb.3, 10, killed $cpsr, debug-location !209; ../addvdi3.c:27:13
  B %bb.2, debug-location !209; ../addvdi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !210 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !210 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !210; ../addvdi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !211; ../addvdi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !212 :: (load (s32) from %stack.0); ../addvdi3.c:32:15
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !212 :: (load (s32) from %stack.3); ../addvdi3.c:32:15
  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !212 :: (load (s32) from %stack.1); ../addvdi3.c:32:15
  $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !212 :: (load (s32) from %stack.2); ../addvdi3.c:32:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !212; ../addvdi3.c:32:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !212; ../addvdi3.c:32:15
  Bcc %bb.6, 11, killed $cpsr, debug-location !213; ../addvdi3.c:32:13
  B %bb.5, debug-location !213; ../addvdi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !214 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !214 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !214; ../addvdi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !215 :: (load (s32) from %stack.0); ../addvdi3.c:35:5
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !215 :: (load (s32) from %stack.1); ../addvdi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !215; ../addvdi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !215; ../addvdi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !215; ../addvdi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __addvdi3.

# Machine code for function __addvsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.3, align=4
  cp#1: @__func__.__addvsi3, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = ADDrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !217; ../addvsi3.c:24:27
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !219; ../addvsi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !219; ../addvsi3.c:25:9
  B %bb.1, debug-location !219; ../addvsi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !221 :: (load (s32) from %stack.0); ../addvsi3.c:27:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !221 :: (load (s32) from %stack.1); ../addvsi3.c:27:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !221; ../addvsi3.c:27:13
  Bcc %bb.3, 10, killed $cpsr, debug-location !221; ../addvsi3.c:27:13
  B %bb.2, debug-location !221; ../addvsi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !222 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !222 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !222; ../addvsi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !223; ../addvsi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !225 :: (load (s32) from %stack.0); ../addvsi3.c:32:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !225 :: (load (s32) from %stack.1); ../addvsi3.c:32:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !225; ../addvsi3.c:32:13
  Bcc %bb.6, 11, killed $cpsr, debug-location !225; ../addvsi3.c:32:13
  B %bb.5, debug-location !225; ../addvsi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !226 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !226 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !226; ../addvsi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !227 :: (load (s32) from %stack.0); ../addvsi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !227; ../addvsi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !227; ../addvsi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !227; ../addvsi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __addvsi3.

# Machine code for function __ashldi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.2, %bb.1
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 40
  STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  $r3 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  $r3 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !230 :: (store (s32) into %ir.all + 4, basealign 8); ../ashldi3.c:29:15
  STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !230 :: (store (s32) into %ir.all, align 8); ../ashldi3.c:29:15
  TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !232; ../ashldi3.c:30:9
  Bcc %bb.2, 0, killed $cpsr, debug-location !232; ../ashldi3.c:30:9
  B %bb.1, debug-location !232; ../ashldi3.c:30:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !234 :: (store (s32) into %ir.low, align 8); ../ashldi3.c:32:22
  renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !235 :: (dereferenceable load (s32) from %ir.low2, align 8); ../ashldi3.c:33:33
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !236; ../ashldi3.c:33:43
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !237; ../ashldi3.c:33:37
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !240 :: (store (s32) into %ir.high); ../ashldi3.c:33:23
  B %bb.5, debug-location !241; ../ashldi3.c:34:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !243 :: (load (s32) from %stack.4); ../ashldi3.c:37:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !243; ../ashldi3.c:37:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !243; ../ashldi3.c:37:13
  B %bb.3, debug-location !243; ../ashldi3.c:37:13

bb.3.if.then4:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
  $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !244; ../ashldi3.c:38:13

bb.4.if.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !245 :: (load (s32) from %stack.4); ../ashldi3.c:39:33
  renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !245 :: (dereferenceable load (s32) from %ir.low6, align 8); ../ashldi3.c:39:33
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !246; ../ashldi3.c:39:37
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !248 :: (store (s32) into %ir.low9, align 8); ../ashldi3.c:39:23
  renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !252 :: (dereferenceable load (s32) from %ir.low14, align 8); ../ashldi3.c:40:56
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !250 :: (dereferenceable load (s32) from %ir.high11); ../ashldi3.c:40:34
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !251; ../ashldi3.c:40:39
  renamable $r2 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !253; ../ashldi3.c:40:77
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !255; ../ashldi3.c:40:45
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !258 :: (store (s32) into %ir.high17); ../ashldi3.c:40:23
  B %bb.5

bb.5.if.end18:
; predecessors: %bb.1, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !259 :: (dereferenceable load (s32) from %ir.all19, align 8); ../ashldi3.c:42:19
  renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !259 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../ashldi3.c:42:19
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !260; ../ashldi3.c:42:5

bb.6.return:
; predecessors: %bb.5, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !261 :: (load (s32) from %stack.6); ../ashldi3.c:0
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !261 :: (load (s32) from %stack.5); ../ashldi3.c:0
  $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !262; ../ashldi3.c:43:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !262; ../ashldi3.c:43:1

# End machine code for function __ashldi3.

# Machine code for function __ashrdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.2, %bb.1
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 40
  STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  $r3 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  $r3 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !265 :: (store (s32) into %ir.all + 4, basealign 8); ../ashrdi3.c:29:15
  STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !265 :: (store (s32) into %ir.all, align 8); ../ashrdi3.c:29:15
  TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !267; ../ashrdi3.c:30:9
  Bcc %bb.2, 0, killed $cpsr, debug-location !267; ../ashrdi3.c:30:9
  B %bb.1, debug-location !267; ../ashrdi3.c:30:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !269 :: (load (s32) from %stack.4); ../ashrdi3.c:33:33
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !269 :: (dereferenceable load (s32) from %ir.high); ../ashrdi3.c:33:33
  renamable $r0 = MOVsi killed renamable $r0, 249, 14, $noreg, $noreg, debug-location !270; ../ashrdi3.c:33:38
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !273 :: (store (s32) into %ir.high2); ../ashrdi3.c:33:23
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !275 :: (dereferenceable load (s32) from %ir.high4); ../ashrdi3.c:34:32
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !276; ../ashrdi3.c:34:43
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 1, 14, $noreg, $noreg, debug-location !277; ../ashrdi3.c:34:37
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !279 :: (store (s32) into %ir.low, align 8); ../ashrdi3.c:34:22
  B %bb.5, debug-location !280; ../ashrdi3.c:35:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !282 :: (load (s32) from %stack.4); ../ashrdi3.c:38:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !282; ../ashrdi3.c:38:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !282; ../ashrdi3.c:38:13
  B %bb.3, debug-location !282; ../ashrdi3.c:38:13

bb.3.if.then7:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
  $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !283; ../ashrdi3.c:39:13

bb.4.if.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !285 :: (load (s32) from %stack.4); ../ashrdi3.c:40:34
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !285 :: (dereferenceable load (s32) from %ir.high9); ../ashrdi3.c:40:34
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 1, 14, $noreg, $noreg, debug-location !286; ../ashrdi3.c:40:39
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !289 :: (store (s32) into %ir.high12); ../ashrdi3.c:40:24
  renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !294 :: (dereferenceable load (s32) from %ir.low17, align 8); ../ashrdi3.c:41:72
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !291 :: (dereferenceable load (s32) from %ir.high14); ../ashrdi3.c:41:33
  renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !292; ../ashrdi3.c:41:55
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !293; ../ashrdi3.c:41:38
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !296; ../ashrdi3.c:41:61
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !298 :: (store (s32) into %ir.low20, align 8); ../ashrdi3.c:41:22
  B %bb.5

bb.5.if.end21:
; predecessors: %bb.1, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !299 :: (dereferenceable load (s32) from %ir.all22, align 8); ../ashrdi3.c:43:19
  renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !299 :: (dereferenceable load (s32) from %ir.all22 + 4, basealign 8); ../ashrdi3.c:43:19
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !300; ../ashrdi3.c:43:5

bb.6.return:
; predecessors: %bb.5, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !301 :: (load (s32) from %stack.6); ../ashrdi3.c:0
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !301 :: (load (s32) from %stack.5); ../ashrdi3.c:0
  $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !302; ../ashrdi3.c:44:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !302; ../ashrdi3.c:44:1

# End machine code for function __ashrdi3.

# Machine code for function __clzdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !305 :: (store (s32) into %ir.all + 4, basealign 8); ../clzdi2.c:25:11
  STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !305 :: (store (s32) into %ir.all, align 8); ../clzdi2.c:25:11
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !311 :: (dereferenceable load (s32) from %ir.low, align 8); ../clzdi2.c:27:49
  renamable $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !307 :: (dereferenceable load (s32) from %ir.high2); ../clzdi2.c:26:28
  CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !312; ../clzdi2.c:27:42
  $r0 = MOVr $r2, 14, $noreg, $noreg, debug-location !312; ../clzdi2.c:27:42
  $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !312; ../clzdi2.c:27:42
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !313; ../clzdi2.c:27:12
  renamable $r1 = MOVi 32, 14, $noreg, $noreg
  renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !316; ../clzdi2.c:27:59
  CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !316; ../clzdi2.c:27:59
  $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !316; ../clzdi2.c:27:59
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !317; ../clzdi2.c:27:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !317; ../clzdi2.c:27:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __clzdi2.

# Machine code for function __clzsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $r3 = MOVr killed $r0, 14, $noreg, $noreg
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  CMPri renamable $r3, 65536, 14, $noreg, implicit-def $cpsr
  $r2 = MOVi 1, 3, killed $cpsr, $noreg, implicit renamable $r2
  renamable $r0 = MOVsi renamable $r2, 34, 14, $noreg, $noreg, debug-location !320; ../clzsi2.c:25:40
  renamable $r1 = MOVi 16, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi killed renamable $r1, killed renamable $r2, 34, 14, $noreg, $noreg, debug-location !321; ../clzsi2.c:26:14
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !322; ../clzsi2.c:26:7
  renamable $r1 = MOVi 65280, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !323; ../clzsi2.c:29:13
  renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !323; ../clzsi2.c:29:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !323; ../clzsi2.c:29:13
  renamable $r3 = MOVi 8, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi killed renamable $r3, renamable $r1, 26, 14, $noreg, $noreg, debug-location !326; ../clzsi2.c:30:13
  renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !327; ../clzsi2.c:30:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !328; ../clzsi2.c:31:7
  renamable $r1 = MOVi 240, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !329; ../clzsi2.c:33:13
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !329; ../clzsi2.c:33:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !329; ../clzsi2.c:33:13
  renamable $r2 = MOVi 4, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi killed renamable $r2, renamable $r1, 18, 14, $noreg, $noreg, debug-location !332; ../clzsi2.c:34:13
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !333; ../clzsi2.c:34:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !334; ../clzsi2.c:35:7
  renamable $r1 = MOVi 12, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !335; ../clzsi2.c:37:13
  renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !335; ../clzsi2.c:37:13
  renamable $lr = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !335; ../clzsi2.c:37:13
  renamable $r1 = MOVi 2, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi renamable $r1, renamable $lr, 10, 14, $noreg, $noreg, debug-location !338; ../clzsi2.c:38:13
  renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !339; ../clzsi2.c:38:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $lr, 10, 14, $noreg, $noreg, debug-location !340; ../clzsi2.c:39:7
  renamable $r1 = SUBrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !341; ../clzsi2.c:52:20
  renamable $r2 = MVNi 1, 14, $noreg, $noreg
  renamable $r2 = ORRrsi killed renamable $r2, killed renamable $r3, 11, 14, $noreg, $noreg, debug-location !342; ../clzsi2.c:52:37
  renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !342; ../clzsi2.c:52:37
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !343; ../clzsi2.c:52:25
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !344; ../clzsi2.c:52:14
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !345; ../clzsi2.c:52:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !345; ../clzsi2.c:52:5

# End machine code for function __clzsi2.

# Machine code for function __cmpdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $r2, $r3
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !348 :: (store (s32) into %ir.all + 4, basealign 8); ../cmpdi2.c:26:11
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !348 :: (store (s32) into %ir.all, align 8); ../cmpdi2.c:26:11
  STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !350 :: (store (s32) into %ir.all1 + 4, basealign 8); ../cmpdi2.c:28:11
  STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !350 :: (store (s32) into %ir.all1, align 8); ../cmpdi2.c:28:11
  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !352 :: (dereferenceable load (s32) from %ir.high); ../cmpdi2.c:29:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !354 :: (dereferenceable load (s32) from %ir.high3); ../cmpdi2.c:29:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !356; ../cmpdi2.c:29:9
  Bcc %bb.2, 10, killed $cpsr, debug-location !356; ../cmpdi2.c:29:9
  B %bb.1, debug-location !356; ../cmpdi2.c:29:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !357; ../cmpdi2.c:30:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !359 :: (dereferenceable load (s32) from %ir.high5); ../cmpdi2.c:31:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !361 :: (dereferenceable load (s32) from %ir.high7); ../cmpdi2.c:31:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !363; ../cmpdi2.c:31:9
  Bcc %bb.4, 13, killed $cpsr, debug-location !363; ../cmpdi2.c:31:9
  B %bb.3, debug-location !363; ../cmpdi2.c:31:9

bb.3.if.then9:
; predecessors: %bb.2
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !364; ../cmpdi2.c:32:9

bb.4.if.end10:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !365 :: (dereferenceable load (s32) from %ir.low, align 8); ../cmpdi2.c:33:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !366 :: (dereferenceable load (s32) from %ir.low13, align 8); ../cmpdi2.c:33:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !368; ../cmpdi2.c:33:9
  Bcc %bb.6, 2, killed $cpsr, debug-location !368; ../cmpdi2.c:33:9
  B %bb.5, debug-location !368; ../cmpdi2.c:33:9

bb.5.if.then15:
; predecessors: %bb.4
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !369; ../cmpdi2.c:34:9

bb.6.if.end16:
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !370 :: (dereferenceable load (s32) from %ir.low18, align 8); ../cmpdi2.c:35:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !371 :: (dereferenceable load (s32) from %ir.low20, align 8); ../cmpdi2.c:35:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !373; ../cmpdi2.c:35:9
  Bcc %bb.8, 9, killed $cpsr, debug-location !373; ../cmpdi2.c:35:9
  B %bb.7, debug-location !373; ../cmpdi2.c:35:9

bb.7.if.then22:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !374; ../cmpdi2.c:36:9

bb.8.if.end23:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !375; ../cmpdi2.c:37:5

bb.9.return:
; predecessors: %bb.8, %bb.7, %bb.5, %bb.3, %bb.1

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !376 :: (load (s32) from %stack.2); ../cmpdi2.c:0
  $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !377; ../cmpdi2.c:38:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !377; ../cmpdi2.c:38:1

# End machine code for function __cmpdi2.

# Machine code for function __aeabi_lcmp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  BL_pred @__cmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !379; ../cmpdi2.c:48:9
  renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !380; ../cmpdi2.c:48:24
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !381; ../cmpdi2.c:48:2
  BX_RET 14, $noreg, implicit killed $r0, debug-location !381; ../cmpdi2.c:48:2

# End machine code for function __aeabi_lcmp.

# Machine code for function __ctzdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !384 :: (store (s32) into %ir.all + 4, basealign 8); ../ctzdi2.c:25:11
  STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !384 :: (store (s32) into %ir.all, align 8); ../ctzdi2.c:25:11
  renamable $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !385 :: (dereferenceable load (s32) from %ir.low, align 8); ../ctzdi2.c:26:28
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !388 :: (dereferenceable load (s32) from %ir.high); ../ctzdi2.c:27:31
  CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !389; ../ctzdi2.c:27:41
  $r1 = MOVr $r2, 14, $noreg, $noreg, debug-location !389; ../ctzdi2.c:27:41
  $r1 = MOVr killed renamable $r0, 0, killed $cpsr, $noreg, implicit renamable $r1, debug-location !389; ../ctzdi2.c:27:41
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !390; ../ctzdi2.c:27:12
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !390; ../ctzdi2.c:27:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !390; ../ctzdi2.c:27:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !390; ../ctzdi2.c:27:12
  renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !390; ../ctzdi2.c:27:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !390; ../ctzdi2.c:27:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !390; ../ctzdi2.c:27:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !390; ../ctzdi2.c:27:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !390; ../ctzdi2.c:27:12
  renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !390; ../ctzdi2.c:27:12
  renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !390; ../ctzdi2.c:27:12
  renamable $r1 = MOVi 32, 14, $noreg, $noreg
  renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !392; ../ctzdi2.c:27:59
  CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !392; ../ctzdi2.c:27:59
  $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !392; ../ctzdi2.c:27:59
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !393; ../ctzdi2.c:27:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !393; ../ctzdi2.c:27:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __ctzdi2.

# Machine code for function __ctzsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0
  $r2 = MOVr killed $r0, 14, $noreg, $noreg
  $r0 = MOVi 255, 14, $noreg, $noreg
  $r0 = ORRri $r0, 65280, 14, $noreg, $noreg
  renamable $r0 = ANDrr renamable $r2, killed renamable $r0, 14, $noreg, $noreg, debug-location !395; ../ctzsi2.c:25:20
  renamable $r1 = RSBri renamable $r0, 0, 14, $noreg, def $cpsr, debug-location !395; ../ctzsi2.c:25:20
  renamable $r0 = ADCrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !395; ../ctzsi2.c:25:20
  renamable $r0 = MOVsi killed renamable $r0, 34, 14, $noreg, $noreg, debug-location !397; ../ctzsi2.c:25:40
  renamable $r3 = MOVsr renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !398; ../ctzsi2.c:26:7
  renamable $r1 = MOVi 255, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !399; ../ctzsi2.c:29:13
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !399; ../ctzsi2.c:29:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !399; ../ctzsi2.c:29:13
  renamable $r12 = MOVsi renamable $r1, 26, 14, $noreg, $noreg, debug-location !401; ../ctzsi2.c:29:29
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !402; ../ctzsi2.c:30:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !403; ../ctzsi2.c:31:7
  renamable $r1 = MOVi 15, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !404; ../ctzsi2.c:33:13
  renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !404; ../ctzsi2.c:33:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !404; ../ctzsi2.c:33:13
  renamable $r12 = MOVsi renamable $r1, 18, 14, $noreg, $noreg, debug-location !406; ../ctzsi2.c:33:27
  renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !407; ../ctzsi2.c:34:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !408; ../ctzsi2.c:35:7
  renamable $r1 = MOVi 3, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !409; ../ctzsi2.c:37:13
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !409; ../ctzsi2.c:37:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !409; ../ctzsi2.c:37:13
  renamable $r12 = MOVsi renamable $r1, 10, 14, $noreg, $noreg, debug-location !411; ../ctzsi2.c:37:26
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !412; ../ctzsi2.c:38:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !413; ../ctzsi2.c:40:7
  renamable $r1 = MOVi 1, 14, $noreg, $noreg
  renamable $r1 = ANDrsi killed renamable $r1, killed renamable $r2, 11, 14, $noreg, $noreg, debug-location !414; ../ctzsi2.c:56:25
  renamable $r1 = nuw nsw RSBri killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !415; ../ctzsi2.c:56:20
  renamable $r2 = MVNi 1, 14, $noreg, $noreg
  renamable $r2 = ORRrsr killed renamable $r2, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !416; ../ctzsi2.c:56:44
  renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !416; ../ctzsi2.c:56:44
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !417; ../ctzsi2.c:56:32
  renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !418; ../ctzsi2.c:56:14
  BX_RET 14, $noreg, implicit killed $r0, debug-location !419; ../ctzsi2.c:56:5

# End machine code for function __ctzsi2.

# Machine code for function __divdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  $lr = MOVr killed $r3, 14, $noreg, $noreg
  $r3 = MOVr killed $r1, 14, $noreg, $noreg
  dead renamable $r1 = KILL renamable $lr
  dead renamable $r1 = KILL renamable $r2
  dead renamable $r1 = KILL renamable $r3
  dead renamable $r1 = KILL renamable $r0
  renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !421; ../divdi3.c:23:20
  renamable $r0 = EORrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, $noreg, debug-location !423; ../divdi3.c:25:12
  renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !423; ../divdi3.c:25:12
  renamable $r0 = SUBrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !424; ../divdi3.c:25:19
  renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !424; ../divdi3.c:25:19
  renamable $r2 = EORrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, $noreg, debug-location !425; ../divdi3.c:26:12
  renamable $r3 = EORrsi renamable $lr, renamable $lr, 249, 14, $noreg, $noreg, debug-location !425; ../divdi3.c:26:12
  renamable $r2 = SUBrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, def $cpsr, debug-location !426; ../divdi3.c:26:19
  renamable $r3 = SBCrsi killed renamable $r3, renamable $lr, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !426; ../divdi3.c:26:19
  renamable $r12 = EORrsi killed renamable $r12, killed renamable $lr, 249, 14, $noreg, $noreg, debug-location !427; ../divdi3.c:27:9
  STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !428; ../divdi3.c:28:13
  renamable $r12 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !428 :: (store (s32) into stack); ../divdi3.c:28:13
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !428; ../divdi3.c:28:13
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !428 :: (load (s32) from %stack.0); ../divdi3.c:28:13
  renamable $r1 = EORrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !429; ../divdi3.c:28:44
  renamable $r0 = EORrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !429; ../divdi3.c:28:44
  renamable $r0 = SUBrr killed renamable $r0, renamable $r2, 14, $noreg, def $cpsr, debug-location !430; ../divdi3.c:28:51
  renamable $r1 = SBCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !430; ../divdi3.c:28:51
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !431; ../divdi3.c:28:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !431; ../divdi3.c:28:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !431; ../divdi3.c:28:5

# End machine code for function __divdi3.

# Machine code for function __udivmoddi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=4, align=4, at location [SP-52]
  fi#7: size=4, align=4, at location [SP-56]
  fi#8: size=4, align=4, at location [SP-60]
  fi#9: size=4, align=4, at location [SP-64]
  fi#10: size=4, align=4, at location [SP-68]
  fi#11: size=4, align=4, at location [SP-72]
  fi#12: size=4, align=4, at location [SP-76]
  fi#13: size=4, align=4, at location [SP-80]
  fi#14: size=4, align=4, at location [SP-84]
  fi#15: size=4, align=4, at location [SP-88]
  fi#16: size=4, align=4, at location [SP-92]
  fi#17: size=4, align=4, at location [SP-96]
  fi#18: size=4, align=4, at location [SP-4]
  fi#19: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.8
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 88, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  renamable $r12 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
  STRi12 killed $r12, $r11, -36, 14, $noreg :: (store (s32) into %stack.4)
  STRi12 killed renamable $r1, $r11, -4, 14, $noreg, debug-location !434 :: (store (s32) into %ir.all + 4, basealign 8); ../udivmoddi4.c:29:11
  STRi12 killed renamable $r0, $r11, -8, 14, $noreg, debug-location !434 :: (store (s32) into %ir.all, align 8); ../udivmoddi4.c:29:11
  STRi12 killed renamable $r3, $r11, -12, 14, $noreg, debug-location !436 :: (store (s32) into %ir.all1 + 4, basealign 8); ../udivmoddi4.c:31:11
  STRi12 killed renamable $r2, $r11, -16, 14, $noreg, debug-location !436 :: (store (s32) into %ir.all1, align 8); ../udivmoddi4.c:31:11
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !438 :: (dereferenceable load (s32) from %ir.high); ../udivmoddi4.c:36:13
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !440; ../udivmoddi4.c:36:9
  Bcc %bb.8, 1, killed $cpsr, debug-location !440; ../udivmoddi4.c:36:9
  B %bb.1, debug-location !440; ../udivmoddi4.c:36:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.5

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !442 :: (dereferenceable load (s32) from %ir.high3); ../udivmoddi4.c:38:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !444; ../udivmoddi4.c:38:13
  Bcc %bb.5, 1, killed $cpsr, debug-location !444; ../udivmoddi4.c:38:13
  B %bb.2, debug-location !444; ../udivmoddi4.c:38:13

bb.2.if.then5:
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !445 :: (load (s32) from %stack.4); ../udivmoddi4.c:44:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !445; ../udivmoddi4.c:44:17
  Bcc %bb.4, 0, killed $cpsr, debug-location !445; ../udivmoddi4.c:44:17
  B %bb.3, debug-location !445; ../udivmoddi4.c:44:17

bb.3.if.then6:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !446 :: (dereferenceable load (s32) from %ir.low, align 8); ../udivmoddi4.c:45:28
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !447 :: (dereferenceable load (s32) from %ir.low9, align 8); ../udivmoddi4.c:45:38
  BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !448; ../udivmoddi4.c:45:32
  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !448 :: (load (s32) from %stack.4); ../udivmoddi4.c:45:32
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !450 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:45:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !450 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:45:22
  B %bb.4, debug-location !451; ../udivmoddi4.c:45:17

bb.4.if.end:
; predecessors: %bb.2, %bb.3
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !452 :: (dereferenceable load (s32) from %ir.low12, align 8); ../udivmoddi4.c:46:24
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !453 :: (dereferenceable load (s32) from %ir.low14, align 8); ../udivmoddi4.c:46:34
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !454; ../udivmoddi4.c:46:28
  $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !454; ../udivmoddi4.c:46:28
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !456; ../udivmoddi4.c:46:13

bb.5.if.end16:
; predecessors: %bb.1
  successors: %bb.7, %bb.6

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !457 :: (load (s32) from %stack.4); ../udivmoddi4.c:52:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !457; ../udivmoddi4.c:52:13
  Bcc %bb.7, 0, killed $cpsr, debug-location !457; ../udivmoddi4.c:52:13
  B %bb.6, debug-location !457; ../udivmoddi4.c:52:13

bb.6.if.then18:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !458 :: (load (s32) from %stack.4); ../udivmoddi4.c:53:24
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !458 :: (dereferenceable load (s32) from %ir.low20, align 8); ../udivmoddi4.c:53:24
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !460 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:53:18
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !460 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:53:18
  B %bb.7, debug-location !461; ../udivmoddi4.c:53:13

bb.7.if.end22:
; predecessors: %bb.5, %bb.6
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  $r1 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !462; ../udivmoddi4.c:54:9

bb.8.if.end23:
; predecessors: %bb.0
  successors: %bb.9, %bb.26

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !463 :: (dereferenceable load (s32) from %ir.low25, align 8); ../udivmoddi4.c:57:13
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !465; ../udivmoddi4.c:57:9
  Bcc %bb.26, 1, killed $cpsr, debug-location !465; ../udivmoddi4.c:57:9
  B %bb.9, debug-location !465; ../udivmoddi4.c:57:9

bb.9.if.then28:
; predecessors: %bb.8
  successors: %bb.10, %bb.13

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !467 :: (dereferenceable load (s32) from %ir.high30); ../udivmoddi4.c:59:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !469; ../udivmoddi4.c:59:13
  Bcc %bb.13, 1, killed $cpsr, debug-location !469; ../udivmoddi4.c:59:13
  B %bb.10, debug-location !469; ../udivmoddi4.c:59:13

bb.10.if.then33:
; predecessors: %bb.9
  successors: %bb.12, %bb.11

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !470 :: (load (s32) from %stack.4); ../udivmoddi4.c:65:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !470; ../udivmoddi4.c:65:17
  Bcc %bb.12, 0, killed $cpsr, debug-location !470; ../udivmoddi4.c:65:17
  B %bb.11, debug-location !470; ../udivmoddi4.c:65:17

bb.11.if.then35:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !472 :: (dereferenceable load (s32) from %ir.high37); ../udivmoddi4.c:66:28
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !473 :: (dereferenceable load (s32) from %ir.low39, align 8); ../udivmoddi4.c:66:39
  BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !474; ../udivmoddi4.c:66:33
  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !474 :: (load (s32) from %stack.4); ../udivmoddi4.c:66:33
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !476 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:66:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !476 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:66:22
  B %bb.12, debug-location !477; ../udivmoddi4.c:66:17

bb.12.if.end42:
; predecessors: %bb.10, %bb.11
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !479 :: (dereferenceable load (s32) from %ir.high44); ../udivmoddi4.c:67:24
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !480 :: (dereferenceable load (s32) from %ir.low46, align 8); ../udivmoddi4.c:67:35
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !481; ../udivmoddi4.c:67:29
  $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !481; ../udivmoddi4.c:67:29
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !483; ../udivmoddi4.c:67:13

bb.13.if.end49:
; predecessors: %bb.9
  successors: %bb.14, %bb.17

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !484 :: (dereferenceable load (s32) from %ir.low51, align 8); ../udivmoddi4.c:70:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !486; ../udivmoddi4.c:70:13
  Bcc %bb.17, 1, killed $cpsr, debug-location !486; ../udivmoddi4.c:70:13
  B %bb.14, debug-location !486; ../udivmoddi4.c:70:13

bb.14.if.then54:
; predecessors: %bb.13
  successors: %bb.16, %bb.15

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !487 :: (load (s32) from %stack.4); ../udivmoddi4.c:76:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !487; ../udivmoddi4.c:76:17
  Bcc %bb.16, 0, killed $cpsr, debug-location !487; ../udivmoddi4.c:76:17
  B %bb.15, debug-location !487; ../udivmoddi4.c:76:17

bb.15.if.then56:
; predecessors: %bb.14
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !489 :: (dereferenceable load (s32) from %ir.high58); ../udivmoddi4.c:78:32
  renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !491 :: (dereferenceable load (s32) from %ir.high60); ../udivmoddi4.c:78:43
  BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !492; ../udivmoddi4.c:78:37
  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !492 :: (load (s32) from %stack.4); ../udivmoddi4.c:78:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !495 :: (store (s32) into %ir.high63); ../udivmoddi4.c:78:26
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !497 :: (store (s32) into %ir.low65, align 8); ../udivmoddi4.c:79:25
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !498 :: (dereferenceable load (s32) from %ir.all66, align 8); ../udivmoddi4.c:80:26
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !498 :: (dereferenceable load (s32) from %ir.all66 + 4, basealign 8); ../udivmoddi4.c:80:26
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !499 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:80:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !499 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:80:22
  B %bb.16, debug-location !500; ../udivmoddi4.c:81:13

bb.16.if.end67:
; predecessors: %bb.14, %bb.15
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !502 :: (dereferenceable load (s32) from %ir.high69); ../udivmoddi4.c:82:24
  renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !504 :: (dereferenceable load (s32) from %ir.high71); ../udivmoddi4.c:82:35
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !505; ../udivmoddi4.c:82:29
  $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !505; ../udivmoddi4.c:82:29
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !507; ../udivmoddi4.c:82:13

bb.17.if.end74:
; predecessors: %bb.13
  successors: %bb.18, %bb.21

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !509 :: (dereferenceable load (s32) from %ir.high78); ../udivmoddi4.c:88:18
  renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:88:35
  TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !515; ../udivmoddi4.c:88:13
  Bcc %bb.21, 1, killed $cpsr, debug-location !515; ../udivmoddi4.c:88:13
  B %bb.18, debug-location !515; ../udivmoddi4.c:88:13

bb.18.if.then81:
; predecessors: %bb.17
  successors: %bb.20, %bb.19

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !516 :: (load (s32) from %stack.4); ../udivmoddi4.c:90:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !516; ../udivmoddi4.c:90:17
  Bcc %bb.20, 0, killed $cpsr, debug-location !516; ../udivmoddi4.c:90:17
  B %bb.19, debug-location !516; ../udivmoddi4.c:90:17

bb.19.if.then83:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !517 :: (load (s32) from %stack.4); ../udivmoddi4.c:92:31
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !517 :: (dereferenceable load (s32) from %ir.low85, align 8); ../udivmoddi4.c:92:31
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !519 :: (store (s32) into %ir.low87, align 8); ../udivmoddi4.c:92:25
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !521 :: (dereferenceable load (s32) from %ir.high89); ../udivmoddi4.c:93:32
  renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !523 :: (dereferenceable load (s32) from %ir.high91); ../udivmoddi4.c:93:44
  renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !524; ../udivmoddi4.c:93:49
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !525; ../udivmoddi4.c:93:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !528 :: (store (s32) into %ir.high95); ../udivmoddi4.c:93:26
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !529 :: (dereferenceable load (s32) from %ir.all96, align 8); ../udivmoddi4.c:94:26
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !529 :: (dereferenceable load (s32) from %ir.all96 + 4, basealign 8); ../udivmoddi4.c:94:26
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !530 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:94:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !530 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:94:22
  B %bb.20, debug-location !531; ../udivmoddi4.c:95:13

bb.20.if.end97:
; predecessors: %bb.18, %bb.19
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !533 :: (dereferenceable load (s32) from %ir.high99); ../udivmoddi4.c:96:24
  renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !535 :: (dereferenceable load (s32) from %ir.high101); ../udivmoddi4.c:96:50
  renamable $r1 = SUBri renamable $r2, 1, 14, $noreg, $noreg, debug-location !536; ../udivmoddi4.c:96:32
  renamable $r1 = BICrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !536; ../udivmoddi4.c:96:32
  renamable $r2 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r2 = ANDrsi killed renamable $r2, renamable $r1, 11, 14, $noreg, $noreg, debug-location !536; ../udivmoddi4.c:96:32
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !536; ../udivmoddi4.c:96:32
  renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r2 = ANDrsi renamable $r3, renamable $r1, 19, 14, $noreg, $noreg, debug-location !536; ../udivmoddi4.c:96:32
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !536; ../udivmoddi4.c:96:32
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !536; ../udivmoddi4.c:96:32
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !536; ../udivmoddi4.c:96:32
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !536; ../udivmoddi4.c:96:32
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !536; ../udivmoddi4.c:96:32
  renamable $r1 = MOVsi killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !536; ../udivmoddi4.c:96:32
  renamable $r1 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !537; ../udivmoddi4.c:96:29
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !539; ../udivmoddi4.c:96:13

bb.21.if.end103:
; predecessors: %bb.17
  successors: %bb.22, %bb.25

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !541 :: (dereferenceable load (s32) from %ir.high105); ../udivmoddi4.c:102:32
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:102:14
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !544 :: (dereferenceable load (s32) from %ir.high107); ../udivmoddi4.c:102:58
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !545; ../udivmoddi4.c:102:40
  renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !546; ../udivmoddi4.c:102:38
  STRi12 $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.7)
  CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !548; ../udivmoddi4.c:104:13
  Bcc %bb.25, 3, killed $cpsr, debug-location !548; ../udivmoddi4.c:104:13
  B %bb.22, debug-location !548; ../udivmoddi4.c:104:13

bb.22.if.then111:
; predecessors: %bb.21
  successors: %bb.24, %bb.23

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !549 :: (load (s32) from %stack.4); ../udivmoddi4.c:106:16
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !549; ../udivmoddi4.c:106:16
  Bcc %bb.24, 0, killed $cpsr, debug-location !549; ../udivmoddi4.c:106:16
  B %bb.23, debug-location !549; ../udivmoddi4.c:106:16

bb.23.if.then113:
; predecessors: %bb.22
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !550 :: (load (s32) from %stack.4); ../udivmoddi4.c:107:26
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !550 :: (dereferenceable load (s32) from %ir.all114, align 8); ../udivmoddi4.c:107:26
  renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !550 :: (dereferenceable load (s32) from %ir.all114 + 4, basealign 8); ../udivmoddi4.c:107:26
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !551 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:107:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !551 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:107:22
  B %bb.24, debug-location !552; ../udivmoddi4.c:107:17

bb.24.if.end115:
; predecessors: %bb.22, %bb.23
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  $r1 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !553; ../udivmoddi4.c:108:13

bb.25.if.end116:
; predecessors: %bb.21
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  $r2 = LDRi12 $sp, 40, 14, $noreg, debug-location !554 :: (load (s32) from %stack.7); ../udivmoddi4.c:110:9
  renamable $r0 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !554; ../udivmoddi4.c:110:9
  renamable $r1 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !556 :: (store (s32) into %ir.low118, align 8); ../udivmoddi4.c:113:17
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !557 :: (dereferenceable load (s32) from %ir.low120, align 8); ../udivmoddi4.c:114:24
  renamable $r3 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !558; ../udivmoddi4.c:114:45
  renamable $r1 = MOVsr killed renamable $r1, renamable $r3, 2, 14, $noreg, $noreg, debug-location !559; ../udivmoddi4.c:114:28
  STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !562 :: (store (s32) into %ir.high123); ../udivmoddi4.c:114:18
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !564 :: (dereferenceable load (s32) from %ir.high125); ../udivmoddi4.c:116:24
  renamable $r1 = MOVsr killed renamable $r1, renamable $r0, 3, 14, $noreg, $noreg, debug-location !565; ../udivmoddi4.c:116:29
  STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !568 :: (store (s32) into %ir.high128); ../udivmoddi4.c:116:18
  renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !573 :: (dereferenceable load (s32) from %ir.low134, align 8); ../udivmoddi4.c:117:60
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !570 :: (dereferenceable load (s32) from %ir.high130); ../udivmoddi4.c:117:24
  renamable $r1 = MOVsr killed renamable $r1, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !572; ../udivmoddi4.c:117:29
  renamable $r1 = ORRrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !575; ../udivmoddi4.c:117:53
  STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !577 :: (store (s32) into %ir.low137, align 8); ../udivmoddi4.c:117:17
  STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.49, debug-location !578; ../udivmoddi4.c:118:5

bb.26.if.else:
; predecessors: %bb.8
  successors: %bb.27, %bb.40

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !580 :: (dereferenceable load (s32) from %ir.high139); ../udivmoddi4.c:121:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !582; ../udivmoddi4.c:121:13
  Bcc %bb.40, 1, killed $cpsr, debug-location !582; ../udivmoddi4.c:121:13
  B %bb.27, debug-location !582; ../udivmoddi4.c:121:13

bb.27.if.then142:
; predecessors: %bb.26
  successors: %bb.28, %bb.33

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !583 :: (dereferenceable load (s32) from %ir.low144, align 8); ../udivmoddi4.c:127:22
  renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !585; ../udivmoddi4.c:127:17
  TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !585; ../udivmoddi4.c:127:17
  Bcc %bb.33, 1, killed $cpsr, debug-location !585; ../udivmoddi4.c:127:17
  B %bb.28, debug-location !585; ../udivmoddi4.c:127:17

bb.28.if.then151:
; predecessors: %bb.27
  successors: %bb.30, %bb.29

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !586 :: (load (s32) from %stack.4); ../udivmoddi4.c:129:21
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !586; ../udivmoddi4.c:129:21
  Bcc %bb.30, 0, killed $cpsr, debug-location !586; ../udivmoddi4.c:129:21
  B %bb.29, debug-location !586; ../udivmoddi4.c:129:21

bb.29.if.then153:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !587 :: (load (s32) from %stack.4); ../udivmoddi4.c:130:32
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !587 :: (dereferenceable load (s32) from %ir.low155, align 8); ../udivmoddi4.c:130:32
  renamable $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !588 :: (dereferenceable load (s32) from %ir.low157, align 8); ../udivmoddi4.c:130:43
  renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !589; ../udivmoddi4.c:130:47
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:130:36
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !592 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:130:26
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !592 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:130:26
  B %bb.30, debug-location !593; ../udivmoddi4.c:130:21

bb.30.if.end161:
; predecessors: %bb.28, %bb.29
  successors: %bb.31, %bb.32

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !594 :: (dereferenceable load (s32) from %ir.low163, align 8); ../udivmoddi4.c:131:25
  CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !596; ../udivmoddi4.c:131:21
  Bcc %bb.32, 1, killed $cpsr, debug-location !596; ../udivmoddi4.c:131:21
  B %bb.31, debug-location !596; ../udivmoddi4.c:131:21

bb.31.if.then166:
; predecessors: %bb.30
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !597 :: (dereferenceable load (s32) from %ir.all167, align 8); ../udivmoddi4.c:132:30
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !597 :: (dereferenceable load (s32) from %ir.all167 + 4, basealign 8); ../udivmoddi4.c:132:30
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !598; ../udivmoddi4.c:132:21

bb.32.if.end168:
; predecessors: %bb.30
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !599 :: (dereferenceable load (s32) from %ir.low170, align 8); ../udivmoddi4.c:133:40
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !600; ../udivmoddi4.c:133:22
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !600; ../udivmoddi4.c:133:22
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !600; ../udivmoddi4.c:133:22
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !600; ../udivmoddi4.c:133:22
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !600; ../udivmoddi4.c:133:22
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !600; ../udivmoddi4.c:133:22
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !600; ../udivmoddi4.c:133:22
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !600; ../udivmoddi4.c:133:22
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !600; ../udivmoddi4.c:133:22
  renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r12 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !600; ../udivmoddi4.c:133:22
  renamable $r2 = MOVsi renamable $r12, 195, 14, $noreg, $noreg, debug-location !600; ../udivmoddi4.c:133:22
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !602 :: (dereferenceable load (s32) from %ir.high172); ../udivmoddi4.c:134:32
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !603; ../udivmoddi4.c:134:37
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !606 :: (store (s32) into %ir.high175); ../udivmoddi4.c:134:26
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !611 :: (dereferenceable load (s32) from %ir.low181, align 8); ../udivmoddi4.c:135:68
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !608 :: (dereferenceable load (s32) from %ir.high177); ../udivmoddi4.c:135:32
  renamable $r3 = MOVi 32, 14, $noreg, $noreg
  renamable $r3 = nuw nsw SUBrsi killed renamable $r3, killed renamable $r12, 195, 14, $noreg, $noreg, debug-location !609; ../udivmoddi4.c:135:54
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !610; ../udivmoddi4.c:135:37
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !613; ../udivmoddi4.c:135:61
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !615 :: (store (s32) into %ir.low185, align 8); ../udivmoddi4.c:135:25
  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !616 :: (dereferenceable load (s32) from %ir.all186, align 8); ../udivmoddi4.c:136:26
  renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !616 :: (dereferenceable load (s32) from %ir.all186 + 4, basealign 8); ../udivmoddi4.c:136:26
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !617; ../udivmoddi4.c:136:17

bb.33.if.end187:
; predecessors: %bb.27
  successors: %bb.34, %bb.35

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !618 :: (dereferenceable load (s32) from %ir.low189, align 8); ../udivmoddi4.c:142:55
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !619; ../udivmoddi4.c:142:37
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !622 :: (dereferenceable load (s32) from %ir.high191); ../udivmoddi4.c:142:80
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !623; ../udivmoddi4.c:142:62
  renamable $r0 = SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !624; ../udivmoddi4.c:142:60
  renamable $r0 = ADDri killed renamable $r0, 33, 14, $noreg, $noreg, debug-location !624; ../udivmoddi4.c:142:60
  STRi12 $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.9)
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !626; ../udivmoddi4.c:147:17
  Bcc %bb.35, 1, killed $cpsr, debug-location !626; ../udivmoddi4.c:147:17
  B %bb.34, debug-location !626; ../udivmoddi4.c:147:17

bb.34.if.then195:
; predecessors: %bb.33
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -24, 14, $noreg, debug-location !628 :: (store (s32) into %ir.low197, align 8); ../udivmoddi4.c:149:25
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !629 :: (dereferenceable load (s32) from %ir.low199, align 8); ../udivmoddi4.c:150:32
  STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !632 :: (store (s32) into %ir.high201); ../udivmoddi4.c:150:26
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !635 :: (store (s32) into %ir.high203); ../udivmoddi4.c:151:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !637 :: (dereferenceable load (s32) from %ir.high205); ../udivmoddi4.c:152:31
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !639 :: (store (s32) into %ir.low207, align 8); ../udivmoddi4.c:152:25
  B %bb.39, debug-location !640; ../udivmoddi4.c:153:13

bb.35.if.else208:
; predecessors: %bb.33
  successors: %bb.36, %bb.37

  $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !642 :: (load (s32) from %stack.9); ../udivmoddi4.c:154:22
  CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !642; ../udivmoddi4.c:154:22
  Bcc %bb.37, 8, killed $cpsr, debug-location !642; ../udivmoddi4.c:154:22
  B %bb.36, debug-location !642; ../udivmoddi4.c:154:22

bb.36.if.then211:
; predecessors: %bb.35
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  $r2 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !644 :: (store (s32) into %ir.low213, align 8); ../udivmoddi4.c:156:25
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !645 :: (dereferenceable load (s32) from %ir.low215, align 8); ../udivmoddi4.c:157:32
  renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !646; ../udivmoddi4.c:157:53
  renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:157:36
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !650 :: (store (s32) into %ir.high219); ../udivmoddi4.c:157:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !652 :: (dereferenceable load (s32) from %ir.high221); ../udivmoddi4.c:158:32
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !653; ../udivmoddi4.c:158:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !656 :: (store (s32) into %ir.high224); ../udivmoddi4.c:158:26
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !661 :: (dereferenceable load (s32) from %ir.low230, align 8); ../udivmoddi4.c:159:68
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !658 :: (dereferenceable load (s32) from %ir.high226); ../udivmoddi4.c:159:32
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !660; ../udivmoddi4.c:159:37
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !663; ../udivmoddi4.c:159:61
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !665 :: (store (s32) into %ir.low234, align 8); ../udivmoddi4.c:159:25
  B %bb.38, debug-location !666; ../udivmoddi4.c:160:13

bb.37.if.else235:
; predecessors: %bb.35
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !667 :: (load (s32) from %stack.9); ../udivmoddi4.c:163:31
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !667 :: (dereferenceable load (s32) from %ir.low237, align 8); ../udivmoddi4.c:163:31
  renamable $r3 = nsw RSBri renamable $r1, 64, 14, $noreg, $noreg, debug-location !668; ../udivmoddi4.c:163:53
  renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !669; ../udivmoddi4.c:163:35
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !671 :: (store (s32) into %ir.low241, align 8); ../udivmoddi4.c:163:25
  renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !676 :: (dereferenceable load (s32) from %ir.low247, align 8); ../udivmoddi4.c:165:33
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !673 :: (dereferenceable load (s32) from %ir.high243); ../udivmoddi4.c:164:33
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !675; ../udivmoddi4.c:164:38
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !677; ../udivmoddi4.c:165:44
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r2, renamable $r1, 3, 14, $noreg, $noreg, debug-location !679; ../udivmoddi4.c:164:63
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !682 :: (store (s32) into %ir.high252); ../udivmoddi4.c:164:26
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !685 :: (store (s32) into %ir.high254); ../udivmoddi4.c:166:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !687 :: (dereferenceable load (s32) from %ir.high256); ../udivmoddi4.c:167:31
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !689; ../udivmoddi4.c:167:36
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !691 :: (store (s32) into %ir.low260, align 8); ../udivmoddi4.c:167:25
  B %bb.38

bb.38.if.end261:
; predecessors: %bb.37, %bb.36
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  B %bb.39

bb.39.if.end262:
; predecessors: %bb.38, %bb.34
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  $r0 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
  B %bb.48, debug-location !692; ../udivmoddi4.c:169:9

bb.40.if.else263:
; predecessors: %bb.26
  successors: %bb.41, %bb.44

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !694 :: (dereferenceable load (s32) from %ir.high265); ../udivmoddi4.c:176:36
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:176:18
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !697 :: (dereferenceable load (s32) from %ir.high267); ../udivmoddi4.c:176:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !698; ../udivmoddi4.c:176:44
  renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !699; ../udivmoddi4.c:176:42
  STRi12 $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.11)
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !701; ../udivmoddi4.c:178:17
  Bcc %bb.44, 3, killed $cpsr, debug-location !701; ../udivmoddi4.c:178:17
  B %bb.41, debug-location !701; ../udivmoddi4.c:178:17

bb.41.if.then271:
; predecessors: %bb.40
  successors: %bb.43, %bb.42

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !702 :: (load (s32) from %stack.4); ../udivmoddi4.c:180:21
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !702; ../udivmoddi4.c:180:21
  Bcc %bb.43, 0, killed $cpsr, debug-location !702; ../udivmoddi4.c:180:21
  B %bb.42, debug-location !702; ../udivmoddi4.c:180:21

bb.42.if.then273:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !703 :: (load (s32) from %stack.4); ../udivmoddi4.c:181:30
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !703 :: (dereferenceable load (s32) from %ir.all274, align 8); ../udivmoddi4.c:181:30
  renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !703 :: (dereferenceable load (s32) from %ir.all274 + 4, basealign 8); ../udivmoddi4.c:181:30
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !704 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:181:26
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !704 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:181:26
  B %bb.43, debug-location !705; ../udivmoddi4.c:181:21

bb.43.if.end275:
; predecessors: %bb.41, %bb.42
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  $r1 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !706; ../udivmoddi4.c:182:17

bb.44.if.end276:
; predecessors: %bb.40
  successors: %bb.45, %bb.46

  $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !707 :: (load (s32) from %stack.11); ../udivmoddi4.c:184:13
  renamable $r0 = nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !707; ../udivmoddi4.c:184:13
  STRi12 $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.12)
  renamable $r1 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !709 :: (store (s32) into %ir.low279, align 8); ../udivmoddi4.c:187:21
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !711; ../udivmoddi4.c:188:17
  Bcc %bb.46, 1, killed $cpsr, debug-location !711; ../udivmoddi4.c:188:17
  B %bb.45, debug-location !711; ../udivmoddi4.c:188:17

bb.45.if.then282:
; predecessors: %bb.44
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !712 :: (dereferenceable load (s32) from %ir.low284, align 8); ../udivmoddi4.c:190:32
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !715 :: (store (s32) into %ir.high286); ../udivmoddi4.c:190:26
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !718 :: (store (s32) into %ir.high288); ../udivmoddi4.c:191:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !720 :: (dereferenceable load (s32) from %ir.high290); ../udivmoddi4.c:192:31
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !722 :: (store (s32) into %ir.low292, align 8); ../udivmoddi4.c:192:25
  B %bb.47, debug-location !723; ../udivmoddi4.c:193:13

bb.46.if.else293:
; predecessors: %bb.44
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !724 :: (load (s32) from %stack.12); ../udivmoddi4.c:196:32
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !724 :: (load (s32) from %stack.11); ../udivmoddi4.c:196:32
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !724 :: (dereferenceable load (s32) from %ir.low295, align 8); ../udivmoddi4.c:196:32
  renamable $r3 = nsw RSBri renamable $r1, 31, 14, $noreg, $noreg, debug-location !725; ../udivmoddi4.c:196:53
  renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !726; ../udivmoddi4.c:196:36
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !729 :: (store (s32) into %ir.high299); ../udivmoddi4.c:196:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !731 :: (dereferenceable load (s32) from %ir.high301); ../udivmoddi4.c:197:32
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !732; ../udivmoddi4.c:197:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !735 :: (store (s32) into %ir.high304); ../udivmoddi4.c:197:26
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !740 :: (dereferenceable load (s32) from %ir.low310, align 8); ../udivmoddi4.c:198:68
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !737 :: (dereferenceable load (s32) from %ir.high306); ../udivmoddi4.c:198:32
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !739; ../udivmoddi4.c:198:37
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !742; ../udivmoddi4.c:198:61
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !744 :: (store (s32) into %ir.low314, align 8); ../udivmoddi4.c:198:25
  B %bb.47

bb.47.if.end315:
; predecessors: %bb.46, %bb.45
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  $r0 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.12)
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
  B %bb.48

bb.48.if.end316:
; predecessors: %bb.47, %bb.39
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !745 :: (load (s32) from %stack.10); ../udivmoddi4.c:0
  STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.49

bb.49.if.end317:
; predecessors: %bb.48, %bb.25
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !745 :: (load (s32) from %stack.8); ../udivmoddi4.c:0
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.50, debug-location !746; ../udivmoddi4.c:209:5

bb.50.for.cond:
; predecessors: %bb.49, %bb.52
  successors: %bb.53, %bb.51

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !745 :: (load (s32) from %stack.14); ../udivmoddi4.c:0
  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !745 :: (load (s32) from %stack.13); ../udivmoddi4.c:0
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.16)
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.15)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !746; ../udivmoddi4.c:209:5
  Bcc %bb.53, 0, killed $cpsr, debug-location !746; ../udivmoddi4.c:209:5
  B %bb.51, debug-location !746; ../udivmoddi4.c:209:5

bb.51.for.body:
; predecessors: %bb.50
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !750 :: (load (s32) from %stack.16); ../udivmoddi4.c:212:43
  renamable $r1 = LDRi12 $r11, -32, 14, $noreg, debug-location !750 :: (dereferenceable load (s32) from %ir.low324, align 8); ../udivmoddi4.c:212:43
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !749 :: (dereferenceable load (s32) from %ir.high321); ../udivmoddi4.c:212:25
  renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !751; ../udivmoddi4.c:212:36
  renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !751; ../udivmoddi4.c:212:36
  STRi12 killed renamable $r2, $r11, -28, 14, $noreg, debug-location !754 :: (store (s32) into %ir.high328); ../udivmoddi4.c:212:18
  renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !756 :: (dereferenceable load (s32) from %ir.high333); ../udivmoddi4.c:213:43
  renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !757; ../udivmoddi4.c:213:36
  renamable $r1 = ORRrsi killed renamable $r1, killed renamable $r2, 251, 14, $noreg, $noreg, debug-location !757; ../udivmoddi4.c:213:36
  STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !759 :: (store (s32) into %ir.low337, align 8); ../udivmoddi4.c:213:18
  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !762 :: (dereferenceable load (s32) from %ir.low342, align 8); ../udivmoddi4.c:214:43
  renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !761 :: (dereferenceable load (s32) from %ir.high339); ../udivmoddi4.c:214:25
  renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !763; ../udivmoddi4.c:214:36
  renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !763; ../udivmoddi4.c:214:36
  STRi12 killed renamable $r2, $r11, -20, 14, $noreg, debug-location !766 :: (store (s32) into %ir.high346); ../udivmoddi4.c:214:18
  renamable $r0 = ORRrsi renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !768; ../udivmoddi4.c:215:36
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !770 :: (store (s32) into %ir.low352, align 8); ../udivmoddi4.c:215:18
  renamable $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !771 :: (dereferenceable load (s32) from %ir.all354, align 8); ../udivmoddi4.c:223:37
  renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !771 :: (dereferenceable load (s32) from %ir.all354 + 4, basealign 8); ../udivmoddi4.c:223:37
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !772 :: (dereferenceable load (s32) from %ir.all355, align 8); ../udivmoddi4.c:223:45
  renamable $r1 = LDRi12 $r11, -28, 14, $noreg, debug-location !772 :: (dereferenceable load (s32) from %ir.all355 + 4, basealign 8); ../udivmoddi4.c:223:45
  renamable $r3 = MVNr renamable $r1, 14, $noreg, $noreg, debug-location !773; ../udivmoddi4.c:223:49
  renamable $lr = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !773; ../udivmoddi4.c:223:49
  dead renamable $lr = ADDrr renamable $r12, killed renamable $lr, 14, $noreg, def $cpsr, debug-location !773; ../udivmoddi4.c:223:49
  renamable $r3 = ADCrr renamable $r2, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !773; ../udivmoddi4.c:223:49
  STRi12 $r3, $sp, 0, 14, $noreg :: (store (s32) into %stack.17)
  renamable $r12 = SUBrr renamable $r0, killed renamable $r12, 14, $noreg, def $cpsr, debug-location !776; ../udivmoddi4.c:225:15
  renamable $r2 = SBCrr renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !776; ../udivmoddi4.c:225:15
  CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !776; ../udivmoddi4.c:225:15
  $r0 = MOVr killed renamable $r12, 4, killed $cpsr, $noreg, implicit renamable $r0, debug-location !776; ../udivmoddi4.c:225:15
  CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !776; ../udivmoddi4.c:225:15
  $r1 = MOVr killed renamable $r2, 4, killed $cpsr, $noreg, implicit renamable $r1, debug-location !776; ../udivmoddi4.c:225:15
  STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !776 :: (store (s32) into %ir.all363 + 4, basealign 8); ../udivmoddi4.c:225:15
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !776 :: (store (s32) into %ir.all363, align 8); ../udivmoddi4.c:225:15
  B %bb.52, debug-location !777; ../udivmoddi4.c:226:5

bb.52.for.inc:
; predecessors: %bb.51
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !778 :: (load (s32) from %stack.15); ../udivmoddi4.c:224:19
  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !778 :: (load (s32) from %stack.17); ../udivmoddi4.c:224:19
  renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !778; ../udivmoddi4.c:224:19
  renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !780; ../udivmoddi4.c:209:20
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.50, debug-location !746; ../udivmoddi4.c:209:5

bb.53.for.end:
; predecessors: %bb.50
  successors: %bb.55, %bb.54

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !782 :: (load (s32) from %stack.4); ../udivmoddi4.c:227:16
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !782 :: (load (s32) from %stack.16); ../udivmoddi4.c:227:16
  renamable $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !782 :: (dereferenceable load (s32) from %ir.all365, align 8); ../udivmoddi4.c:227:16
  renamable $r1 = LDRi12 $r11, -20, 14, $noreg, debug-location !782 :: (dereferenceable load (s32) from %ir.all365 + 4, basealign 8); ../udivmoddi4.c:227:16
  renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !783; ../udivmoddi4.c:227:20
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r3, 251, 14, $noreg, $noreg, debug-location !783; ../udivmoddi4.c:227:20
  renamable $r2 = ORRrsi renamable $r2, killed renamable $r3, 10, 14, $noreg, $noreg, debug-location !785; ../udivmoddi4.c:227:26
  STRi12 killed renamable $r2, $r11, -24, 14, $noreg, debug-location !787 :: (store (s32) into %ir.all369, align 8); ../udivmoddi4.c:227:11
  STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !787 :: (store (s32) into %ir.all369 + 4, basealign 8); ../udivmoddi4.c:227:11
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !788; ../udivmoddi4.c:228:9
  Bcc %bb.55, 0, killed $cpsr, debug-location !788; ../udivmoddi4.c:228:9
  B %bb.54, debug-location !788; ../udivmoddi4.c:228:9

bb.54.if.then371:
; predecessors: %bb.53
  successors: %bb.55(0x80000000); %bb.55(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !789 :: (load (s32) from %stack.4); ../udivmoddi4.c:229:18
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !789 :: (dereferenceable load (s32) from %ir.all372, align 8); ../udivmoddi4.c:229:18
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !789 :: (dereferenceable load (s32) from %ir.all372 + 4, basealign 8); ../udivmoddi4.c:229:18
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !790 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:229:14
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !790 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:229:14
  B %bb.55, debug-location !791; ../udivmoddi4.c:229:9

bb.55.if.end373:
; predecessors: %bb.53, %bb.54
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !792 :: (dereferenceable load (s32) from %ir.all374, align 8); ../udivmoddi4.c:230:14
  renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !792 :: (dereferenceable load (s32) from %ir.all374 + 4, basealign 8); ../udivmoddi4.c:230:14
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !793; ../udivmoddi4.c:230:5

bb.56.return:
; predecessors: %bb.43, %bb.32, %bb.31, %bb.55, %bb.24, %bb.20, %bb.16, %bb.12, %bb.7, %bb.4

  $r0 = LDRi12 $sp, 44, 14, $noreg, debug-location !745 :: (load (s32) from %stack.6); ../udivmoddi4.c:0
  $r1 = LDRi12 $r11, -40, 14, $noreg, debug-location !745 :: (load (s32) from %stack.5); ../udivmoddi4.c:0
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !794; ../udivmoddi4.c:231:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !794; ../udivmoddi4.c:231:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !794; ../udivmoddi4.c:231:1

bb.57 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __udivmoddi4.

# Machine code for function __divmoddi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-36]
  fi#3: size=4, align=4, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-4]
  fi#5: size=4, align=4, at location [SP-8]
  fi#6: size=4, align=4, at location [SP-12]
  fi#7: size=4, align=4, at location [SP-16]
  fi#8: size=4, align=4, at location [SP-20]
  fi#9: size=4, align=4, at location [SP-24]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r7, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r7, -12
  frame-setup CFI_INSTRUCTION offset $r6, -16
  frame-setup CFI_INSTRUCTION offset $r5, -20
  frame-setup CFI_INSTRUCTION offset $r4, -24
  $r11 = frame-setup ADDri killed $sp, 16, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  STRi12 $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.0)
  $r5 = MOVr killed $r2, 14, $noreg, $noreg
  STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  dead renamable $r2 = KILL renamable $r3
  dead renamable $r2 = KILL renamable $r5
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  renamable $r2 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
  STRi12 $r2, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  $r2 = MOVr $r5, 14, $noreg, $noreg, debug-location !796; ../divmoddi4.c:22:14
  BL_pred @__divdi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !796; ../divmoddi4.c:22:14
  $r12 = LDRi12 $sp, 0, 14, $noreg, debug-location !796 :: (load (s32) from %stack.3); ../divmoddi4.c:22:14
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !796 :: (load (s32) from %stack.2); ../divmoddi4.c:22:14
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !796 :: (load (s32) from %stack.1); ../divmoddi4.c:22:14
  $lr = LDRi12 $sp, 12, 14, $noreg, debug-location !796 :: (load (s32) from %stack.0); ../divmoddi4.c:22:14
  early-clobber renamable $r4, early-clobber renamable $r7 = UMULLv5 renamable $r0, renamable $r5, 14, $noreg, $noreg, debug-location !797; ../divmoddi4.c:23:16
  early-clobber renamable $r6 = MLAv5 renamable $r0, killed renamable $lr, killed renamable $r7, 14, $noreg, $noreg, debug-location !797; ../divmoddi4.c:23:16
  early-clobber renamable $lr = MLAv5 renamable $r1, killed renamable $r5, killed renamable $r6, 14, $noreg, $noreg, debug-location !797; ../divmoddi4.c:23:16
  renamable $r12 = SUBrr killed renamable $r12, killed renamable $r4, 14, $noreg, def $cpsr, debug-location !798; ../divmoddi4.c:23:12
  renamable $r2 = SBCrr killed renamable $r2, killed renamable $lr, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !798; ../divmoddi4.c:23:12
  STRi12 killed renamable $r12, renamable $r3, 0, 14, $noreg, debug-location !799 :: (store (s32) into %ir.rem, align 8); ../divmoddi4.c:23:8
  STRi12 killed renamable $r2, killed renamable $r3, 4, 14, $noreg, debug-location !799 :: (store (s32) into %ir.rem + 4, basealign 8); ../divmoddi4.c:23:8
  $sp = frame-destroy SUBri killed $r11, 16, 14, $noreg, $noreg, debug-location !800; ../divmoddi4.c:24:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r5, def $r6, def $r7, def $r11, def $lr, debug-location !800; ../divmoddi4.c:24:3
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !800; ../divmoddi4.c:24:3

# End machine code for function __divmoddi4.

# Machine code for function __divmodsi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-4]
  fi#4: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  liveins: $r0, $r1, $r2, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !802; ../divmodsi4.c:22:14
  $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !802 :: (load (s32) from %stack.2); ../divmodsi4.c:22:14
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !802 :: (load (s32) from %stack.1); ../divmodsi4.c:22:14
  $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !802 :: (load (s32) from %stack.0); ../divmodsi4.c:22:14
  early-clobber renamable $r3 = nsw MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !803; ../divmodsi4.c:23:16
  renamable $r1 = nsw SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !804; ../divmodsi4.c:23:12
  STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !805 :: (store (s32) into %ir.rem); ../divmodsi4.c:23:8
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !806; ../divmodsi4.c:24:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !806; ../divmodsi4.c:24:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !806; ../divmodsi4.c:24:3

# End machine code for function __divmodsi4.

# Machine code for function __divsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  $r3 = MOVr killed $r1, 14, $noreg, $noreg
  $r1 = MOVr killed $r0, 14, $noreg, $noreg
  renamable $r2 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !808; ../divsi3.c:25:20
  renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !810; ../divsi3.c:27:12
  renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 249, 14, $noreg, $noreg, debug-location !811; ../divsi3.c:27:19
  renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !812; ../divsi3.c:28:12
  renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !813; ../divsi3.c:28:19
  renamable $r2 = EORrsi killed renamable $r2, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !814; ../divsi3.c:29:9
  STRi12 $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !815; ../divsi3.c:36:22
  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !815 :: (load (s32) from %stack.0); ../divsi3.c:36:22
  renamable $r0 = EORrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !816; ../divsi3.c:36:33
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !817; ../divsi3.c:36:40
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !818; ../divsi3.c:36:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !818; ../divsi3.c:36:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !818; ../divsi3.c:36:5

# End machine code for function __divsi3.

# Machine code for function __ffsdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 12, 14, $noreg, debug-location !821 :: (store (s32) into %ir.all + 4, basealign 8); ../ffsdi2.c:25:11
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg, debug-location !821 :: (store (s32) into %ir.all, align 8); ../ffsdi2.c:25:11
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !822 :: (dereferenceable load (s32) from %ir.low, align 8); ../ffsdi2.c:26:13
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !824; ../ffsdi2.c:26:9
  Bcc %bb.4, 1, killed $cpsr, debug-location !824; ../ffsdi2.c:26:9
  B %bb.1, debug-location !824; ../ffsdi2.c:26:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !826 :: (dereferenceable load (s32) from %ir.high); ../ffsdi2.c:28:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !828; ../ffsdi2.c:28:13
  Bcc %bb.3, 1, killed $cpsr, debug-location !828; ../ffsdi2.c:28:13
  B %bb.2, debug-location !828; ../ffsdi2.c:28:13

bb.2.if.then3:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.5, debug-location !829; ../ffsdi2.c:29:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !831 :: (dereferenceable load (s32) from %ir.high5); ../ffsdi2.c:30:34
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !832; ../ffsdi2.c:30:16
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !832; ../ffsdi2.c:30:16
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !832; ../ffsdi2.c:30:16
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !832; ../ffsdi2.c:30:16
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !832; ../ffsdi2.c:30:16
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !832; ../ffsdi2.c:30:16
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !832; ../ffsdi2.c:30:16
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !832; ../ffsdi2.c:30:16
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !832; ../ffsdi2.c:30:16
  renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !832; ../ffsdi2.c:30:16
  renamable $r0 = MOVi 33, 14, $noreg, $noreg
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !833; ../ffsdi2.c:30:40
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.5, debug-location !834; ../ffsdi2.c:30:9

bb.4.if.end6:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !835 :: (dereferenceable load (s32) from %ir.low8, align 8); ../ffsdi2.c:32:30
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !836; ../ffsdi2.c:32:12
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !836; ../ffsdi2.c:32:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !836; ../ffsdi2.c:32:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !836; ../ffsdi2.c:32:12
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !836; ../ffsdi2.c:32:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !836; ../ffsdi2.c:32:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !836; ../ffsdi2.c:32:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !836; ../ffsdi2.c:32:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !836; ../ffsdi2.c:32:12
  renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !836; ../ffsdi2.c:32:12
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !837; ../ffsdi2.c:32:35
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.5, debug-location !838; ../ffsdi2.c:32:5

bb.5.return:
; predecessors: %bb.4, %bb.3, %bb.2

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !839 :: (load (s32) from %stack.1); ../ffsdi2.c:0
  $sp = frame-destroy ADDri killed $sp, 16, 14, $noreg, $noreg, debug-location !840; ../ffsdi2.c:33:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !840; ../ffsdi2.c:33:1

bb.6 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __ffsdi2.

# Machine code for function __ffssi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !843; ../ffssi2.c:24:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !843; ../ffssi2.c:24:9
  B %bb.1, debug-location !843; ../ffssi2.c:24:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.3, debug-location !844; ../ffssi2.c:26:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !845 :: (load (s32) from %stack.0); ../ffssi2.c:28:12
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !845; ../ffssi2.c:28:12
  renamable $r0 = BICrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !845; ../ffssi2.c:28:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !845; ../ffssi2.c:28:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !845; ../ffssi2.c:28:12
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !845; ../ffssi2.c:28:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !845; ../ffssi2.c:28:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !845; ../ffssi2.c:28:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !845; ../ffssi2.c:28:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !845; ../ffssi2.c:28:12
  renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !845; ../ffssi2.c:28:12
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !846; ../ffssi2.c:28:29
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.3, debug-location !847; ../ffssi2.c:28:5

bb.3.return:
; predecessors: %bb.2, %bb.1

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !848 :: (load (s32) from %stack.1); ../ffssi2.c:0
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !849; ../ffssi2.c:29:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !849; ../ffssi2.c:29:1

bb.4 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __ffssi2.

# Machine code for function __lshrdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.2, %bb.1
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 40
  STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  $r3 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  $r3 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !852 :: (store (s32) into %ir.all + 4, basealign 8); ../lshrdi3.c:29:15
  STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !852 :: (store (s32) into %ir.all, align 8); ../lshrdi3.c:29:15
  TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !854; ../lshrdi3.c:30:9
  Bcc %bb.2, 0, killed $cpsr, debug-location !854; ../lshrdi3.c:30:9
  B %bb.1, debug-location !854; ../lshrdi3.c:30:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !857 :: (store (s32) into %ir.high); ../lshrdi3.c:32:23
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !859 :: (dereferenceable load (s32) from %ir.high2); ../lshrdi3.c:33:32
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !860; ../lshrdi3.c:33:43
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !861; ../lshrdi3.c:33:37
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !863 :: (store (s32) into %ir.low, align 8); ../lshrdi3.c:33:22
  B %bb.5, debug-location !864; ../lshrdi3.c:34:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !866 :: (load (s32) from %stack.4); ../lshrdi3.c:37:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !866; ../lshrdi3.c:37:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !866; ../lshrdi3.c:37:13
  B %bb.3, debug-location !866; ../lshrdi3.c:37:13

bb.3.if.then4:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
  $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !867; ../lshrdi3.c:38:13

bb.4.if.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !869 :: (load (s32) from %stack.4); ../lshrdi3.c:39:34
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !869 :: (dereferenceable load (s32) from %ir.high6); ../lshrdi3.c:39:34
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !870; ../lshrdi3.c:39:39
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !873 :: (store (s32) into %ir.high9); ../lshrdi3.c:39:24
  renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !878 :: (dereferenceable load (s32) from %ir.low14, align 8); ../lshrdi3.c:40:72
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !875 :: (dereferenceable load (s32) from %ir.high11); ../lshrdi3.c:40:33
  renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !876; ../lshrdi3.c:40:55
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !877; ../lshrdi3.c:40:38
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !880; ../lshrdi3.c:40:61
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !882 :: (store (s32) into %ir.low17, align 8); ../lshrdi3.c:40:22
  B %bb.5

bb.5.if.end18:
; predecessors: %bb.1, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !883 :: (dereferenceable load (s32) from %ir.all19, align 8); ../lshrdi3.c:42:19
  renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !883 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../lshrdi3.c:42:19
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !884; ../lshrdi3.c:42:5

bb.6.return:
; predecessors: %bb.5, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !885 :: (load (s32) from %stack.6); ../lshrdi3.c:0
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !885 :: (load (s32) from %stack.5); ../lshrdi3.c:0
  $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !886; ../lshrdi3.c:43:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !886; ../lshrdi3.c:43:1

# End machine code for function __lshrdi3.

# Machine code for function __moddi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  $r12 = MOVr killed $r1, 14, $noreg, $noreg
  STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  dead renamable $r1 = KILL renamable $r3
  dead renamable $r1 = KILL renamable $r2
  dead renamable $r1 = KILL renamable $r12
  dead renamable $r1 = KILL renamable $r0
  renamable $r1 = ADDrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !888; ../moddi3.c:24:17
  renamable $r2 = EORrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !888; ../moddi3.c:24:17
  renamable $r1 = ADCrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !888; ../moddi3.c:24:17
  renamable $r3 = EORrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !888; ../moddi3.c:24:17
  renamable $r0 = EORrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !890; ../moddi3.c:26:12
  renamable $r1 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !890; ../moddi3.c:26:12
  renamable $r0 = SUBrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !891; ../moddi3.c:26:17
  renamable $r1 = SBCrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !891; ../moddi3.c:26:17
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !892; ../moddi3.c:28:5
  renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !892 :: (store (s32) into stack); ../moddi3.c:28:5
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !892; ../moddi3.c:28:5
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !892 :: (load (s32) from %stack.1); ../moddi3.c:28:5
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !893 :: (dereferenceable load (s32) from %ir.r, align 8); ../moddi3.c:29:21
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !893 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../moddi3.c:29:21
  renamable $r1 = EORrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !894; ../moddi3.c:29:23
  renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !894; ../moddi3.c:29:23
  renamable $r0 = SUBrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !895; ../moddi3.c:29:28
  renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !895; ../moddi3.c:29:28
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !896; ../moddi3.c:29:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !896; ../moddi3.c:29:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !896; ../moddi3.c:29:5

# End machine code for function __moddi3.

# Machine code for function __modsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !898; ../modsi3.c:22:16
  $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !898 :: (load (s32) from %stack.1); ../modsi3.c:22:16
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !898; ../modsi3.c:22:16
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !899 :: (load (s32) from %stack.0); ../modsi3.c:22:31
  early-clobber renamable $r1 = nsw MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !899; ../modsi3.c:22:31
  renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !900; ../modsi3.c:22:14
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !901; ../modsi3.c:22:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !901; ../modsi3.c:22:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !901; ../modsi3.c:22:5

# End machine code for function __modsi3.

# Machine code for function __mulvdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-44]
  fi#7: size=4, align=4, at location [SP-48]
  fi#8: size=4, align=4, at location [SP-52]
  fi#9: size=4, align=4, at location [SP-56]
  fi#10: size=4, align=4, at location [SP-60]
  fi#11: size=4, align=4, at location [SP-64]
  fi#12: size=4, align=4, at location [SP-4]
  fi#13: size=4, align=4, at location [SP-8]
  fi#14: size=4, align=4, at location [SP-12]
  fi#15: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str.8, align=4
  cp#1: @__func__.__mulvdi3, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.5
  liveins: $r0, $r1, $r2, $r3, $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 48, 14, $noreg, $noreg
  STRi12 killed $r3, $r11, -24, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r2, $r11, -20, 14, $noreg :: (store (s32) into %stack.2)
  $r2 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r2, $r11, -16, 14, $noreg :: (store (s32) into %stack.1)
  $r2 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r2, $r11, -12, 14, $noreg :: (store (s32) into %stack.0)
  renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !903; ../mulvdi3.c:27:11
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !903; ../mulvdi3.c:27:11
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !904; ../mulvdi3.c:27:9
  Bcc %bb.5, 1, killed $cpsr, debug-location !904; ../mulvdi3.c:27:9
  B %bb.1, debug-location !904; ../mulvdi3.c:27:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !905 :: (load (s32) from %stack.2); ../mulvdi3.c:29:15
  $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !905 :: (load (s32) from %stack.3); ../mulvdi3.c:29:15
  renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !905; ../mulvdi3.c:29:15
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !906; ../mulvdi3.c:29:20
  Bcc %bb.3, 0, killed $cpsr, debug-location !906; ../mulvdi3.c:29:20
  B %bb.2, debug-location !906; ../mulvdi3.c:29:20

bb.2.lor.lhs.false:
; predecessors: %bb.1
  successors: %bb.3, %bb.4

  $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !907 :: (load (s32) from %stack.3); ../mulvdi3.c:29:25
  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !907 :: (load (s32) from %stack.2); ../mulvdi3.c:29:25
  renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !907; ../mulvdi3.c:29:25
  renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !907; ../mulvdi3.c:29:25
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !908; ../mulvdi3.c:29:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !908; ../mulvdi3.c:29:13
  B %bb.3, debug-location !908; ../mulvdi3.c:29:13

bb.3.if.then3:
; predecessors: %bb.1, %bb.2
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !909; ../mulvdi3.c:30:13

bb.4.if.end:
; predecessors: %bb.2

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !910 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !910 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
  renamable $r1 = MOVi 31, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !910; ../mulvdi3.c:31:9

bb.5.if.end4:
; predecessors: %bb.0
  successors: %bb.6, %bb.10

  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !911 :: (load (s32) from %stack.2); ../mulvdi3.c:33:11
  $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !911 :: (load (s32) from %stack.3); ../mulvdi3.c:33:11
  renamable $r1 = EORri renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !911; ../mulvdi3.c:33:11
  renamable $r0 = ORRrr renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !911; ../mulvdi3.c:33:11
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !912; ../mulvdi3.c:33:9
  Bcc %bb.10, 1, killed $cpsr, debug-location !912; ../mulvdi3.c:33:9
  B %bb.6, debug-location !912; ../mulvdi3.c:33:9

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.8, %bb.7

  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !913 :: (load (s32) from %stack.0); ../mulvdi3.c:35:15
  $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !913 :: (load (s32) from %stack.1); ../mulvdi3.c:35:15
  renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !913; ../mulvdi3.c:35:15
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !914; ../mulvdi3.c:35:20
  Bcc %bb.8, 0, killed $cpsr, debug-location !914; ../mulvdi3.c:35:20
  B %bb.7, debug-location !914; ../mulvdi3.c:35:20

bb.7.lor.lhs.false8:
; predecessors: %bb.6
  successors: %bb.8, %bb.9

  $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !915 :: (load (s32) from %stack.1); ../mulvdi3.c:35:25
  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !915 :: (load (s32) from %stack.0); ../mulvdi3.c:35:25
  renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !915; ../mulvdi3.c:35:25
  renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !915; ../mulvdi3.c:35:25
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !916; ../mulvdi3.c:35:13
  Bcc %bb.9, 1, killed $cpsr, debug-location !916; ../mulvdi3.c:35:13
  B %bb.8, debug-location !916; ../mulvdi3.c:35:13

bb.8.if.then10:
; predecessors: %bb.6, %bb.7
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !917; ../mulvdi3.c:36:13

bb.9.if.end12:
; predecessors: %bb.7

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !918 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !918 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
  renamable $r1 = MOVi 37, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !918; ../mulvdi3.c:37:9

bb.10.if.end13:
; predecessors: %bb.5
  successors: %bb.12, %bb.11

  $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !919 :: (load (s32) from %stack.3); ../mulvdi3.c:39:19
  $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !919 :: (load (s32) from %stack.2); ../mulvdi3.c:39:19
  $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !919 :: (load (s32) from %stack.1); ../mulvdi3.c:39:19
  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !919 :: (load (s32) from %stack.0); ../mulvdi3.c:39:19
  renamable $r1 = MOVsi renamable $r12, 249, 14, $noreg, $noreg, debug-location !919; ../mulvdi3.c:39:19
  STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.11)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.10)
  renamable $r1 = EORrsi renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !920; ../mulvdi3.c:40:23
  renamable $r0 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !920; ../mulvdi3.c:40:23
  renamable $r1 = SUBrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !921; ../mulvdi3.c:40:29
  STRi12 $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.9)
  renamable $r0 = SBCrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !921; ../mulvdi3.c:40:29
  STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.8)
  renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !922; ../mulvdi3.c:41:19
  STRi12 $r12, $sp, 16, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r12, $sp, 20, 14, $noreg :: (store (s32) into %stack.6)
  renamable $r12 = EORrsi renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, debug-location !923; ../mulvdi3.c:42:23
  renamable $r2 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !923; ../mulvdi3.c:42:23
  renamable $r12 = SUBrsi killed renamable $r12, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !924; ../mulvdi3.c:42:29
  STRi12 killed $r12, $sp, 24, 14, $noreg :: (store (s32) into %stack.5)
  renamable $r2 = SBCrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !924; ../mulvdi3.c:42:29
  STRi12 killed $r2, $sp, 28, 14, $noreg :: (store (s32) into %stack.4)
  dead renamable $r1 = SUBri renamable $r1, 2, 14, $noreg, def $cpsr, debug-location !925; ../mulvdi3.c:43:15
  dead renamable $r0 = SBCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !925; ../mulvdi3.c:43:15
  Bcc %bb.12, 11, killed $cpsr, debug-location !926; ../mulvdi3.c:43:19
  B %bb.11, debug-location !926; ../mulvdi3.c:43:19

bb.11.lor.lhs.false18:
; predecessors: %bb.10
  successors: %bb.12, %bb.13

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !927 :: (load (s32) from %stack.4); ../mulvdi3.c:43:28
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !927 :: (load (s32) from %stack.5); ../mulvdi3.c:43:28
  dead renamable $r1 = RSBri renamable $r1, 1, 14, $noreg, def $cpsr, debug-location !927; ../mulvdi3.c:43:28
  dead renamable $r0 = RSCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !927; ../mulvdi3.c:43:28
  Bcc %bb.13, 11, killed $cpsr, debug-location !928; ../mulvdi3.c:43:9
  B %bb.12, debug-location !928; ../mulvdi3.c:43:9

bb.12.if.then20:
; predecessors: %bb.10, %bb.11
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !929; ../mulvdi3.c:44:9

bb.13.if.end22:
; predecessors: %bb.11
  successors: %bb.14, %bb.17

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !930 :: (load (s32) from %stack.10); ../mulvdi3.c:45:12
  $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !930 :: (load (s32) from %stack.6); ../mulvdi3.c:45:12
  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !930 :: (load (s32) from %stack.11); ../mulvdi3.c:45:12
  $r3 = LDRi12 $sp, 16, 14, $noreg, debug-location !930 :: (load (s32) from %stack.7); ../mulvdi3.c:45:12
  renamable $r0 = EORrr renamable $r0, renamable $r3, 14, $noreg, $noreg, debug-location !930; ../mulvdi3.c:45:12
  renamable $r1 = EORrr renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !930; ../mulvdi3.c:45:12
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !930; ../mulvdi3.c:45:12
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !931; ../mulvdi3.c:45:9
  Bcc %bb.17, 1, killed $cpsr, debug-location !931; ../mulvdi3.c:45:9
  B %bb.14, debug-location !931; ../mulvdi3.c:45:9

bb.14.if.then24:
; predecessors: %bb.13
  successors: %bb.15, %bb.16

  $r3 = LDRi12 $sp, 28, 14, $noreg, debug-location !932 :: (load (s32) from %stack.4); ../mulvdi3.c:47:25
  $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !932 :: (load (s32) from %stack.5); ../mulvdi3.c:47:25
  renamable $r0 = MVNi 0, 14, $noreg, $noreg
  renamable $r1 = MVNi -2147483648, 14, $noreg, $noreg
  BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !932; ../mulvdi3.c:47:25
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !932 :: (load (s32) from %stack.9); ../mulvdi3.c:47:25
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !932; ../mulvdi3.c:47:25
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !932 :: (load (s32) from %stack.8); ../mulvdi3.c:47:25
  dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !933; ../mulvdi3.c:47:19
  dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !933; ../mulvdi3.c:47:19
  Bcc %bb.16, 10, killed $cpsr, debug-location !934; ../mulvdi3.c:47:13
  B %bb.15, debug-location !934; ../mulvdi3.c:47:13

bb.15.if.then26:
; predecessors: %bb.14

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !935 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !935 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
  renamable $r1 = MOVi 48, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !935; ../mulvdi3.c:48:13

bb.16.if.end27:
; predecessors: %bb.14
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20, debug-location !936; ../mulvdi3.c:49:5

bb.17.if.else:
; predecessors: %bb.13
  successors: %bb.18, %bb.19

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !937 :: (load (s32) from %stack.4); ../mulvdi3.c:52:27
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !937 :: (load (s32) from %stack.5); ../mulvdi3.c:52:27
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !937; ../mulvdi3.c:52:27
  renamable $r3 = RSCri renamable $r0, 0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !937; ../mulvdi3.c:52:27
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  renamable $r1 = MOVi -2147483648, 14, $noreg, $noreg
  BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !938; ../mulvdi3.c:52:25
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !938 :: (load (s32) from %stack.9); ../mulvdi3.c:52:25
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !938; ../mulvdi3.c:52:25
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !938 :: (load (s32) from %stack.8); ../mulvdi3.c:52:25
  dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !939; ../mulvdi3.c:52:19
  dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !939; ../mulvdi3.c:52:19
  Bcc %bb.19, 10, killed $cpsr, debug-location !940; ../mulvdi3.c:52:13
  B %bb.18, debug-location !940; ../mulvdi3.c:52:13

bb.18.if.then31:
; predecessors: %bb.17

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !941 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !941 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
  renamable $r1 = MOVi 53, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !941; ../mulvdi3.c:53:13

bb.19.if.end32:
; predecessors: %bb.17
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20

bb.20.if.end33:
; predecessors: %bb.19, %bb.16
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !942; ../mulvdi3.c:55:5

bb.21.return:
; predecessors: %bb.20, %bb.12, %bb.8, %bb.3

  $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !943 :: (load (s32) from %stack.1); ../mulvdi3.c:0
  $r3 = LDRi12 $r11, -20, 14, $noreg, debug-location !943 :: (load (s32) from %stack.2); ../mulvdi3.c:0
  $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !943 :: (load (s32) from %stack.0); ../mulvdi3.c:0
  $lr = LDRi12 $r11, -24, 14, $noreg, debug-location !943 :: (load (s32) from %stack.3); ../mulvdi3.c:0
  early-clobber renamable $r0, early-clobber renamable $r4 = UMULLv5 renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !943; ../mulvdi3.c:0
  early-clobber renamable $r12 = MLAv5 killed renamable $r1, killed renamable $lr, killed renamable $r4, 14, $noreg, $noreg, debug-location !943; ../mulvdi3.c:0
  early-clobber renamable $r1 = MLAv5 killed renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !943; ../mulvdi3.c:0
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg, debug-location !944; ../mulvdi3.c:56:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr, debug-location !944; ../mulvdi3.c:56:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !944; ../mulvdi3.c:56:1

bb.22 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __mulvdi3.

# Machine code for function __mulvsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.9, align=4
  cp#1: @__func__.__mulvsi3, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.5
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  STRi12 killed $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !947; ../mulvsi3.c:27:9
  Bcc %bb.5, 1, killed $cpsr, debug-location !947; ../mulvsi3.c:27:9
  B %bb.1, debug-location !947; ../mulvsi3.c:27:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !949 :: (load (s32) from %stack.1); ../mulvsi3.c:29:20
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !949; ../mulvsi3.c:29:20
  Bcc %bb.3, 0, killed $cpsr, debug-location !949; ../mulvsi3.c:29:20
  B %bb.2, debug-location !949; ../mulvsi3.c:29:20

bb.2.lor.lhs.false:
; predecessors: %bb.1
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !951 :: (load (s32) from %stack.1); ../mulvsi3.c:29:13
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !951; ../mulvsi3.c:29:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !951; ../mulvsi3.c:29:13
  B %bb.3, debug-location !951; ../mulvsi3.c:29:13

bb.3.if.then3:
; predecessors: %bb.1, %bb.2
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !952; ../mulvsi3.c:30:13

bb.4.if.end:
; predecessors: %bb.2

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !953 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !953 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
  renamable $r1 = MOVi 31, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !953; ../mulvsi3.c:31:9

bb.5.if.end4:
; predecessors: %bb.0
  successors: %bb.6, %bb.10

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !955 :: (load (s32) from %stack.1); ../mulvsi3.c:33:9
  CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !955; ../mulvsi3.c:33:9
  Bcc %bb.10, 1, killed $cpsr, debug-location !955; ../mulvsi3.c:33:9
  B %bb.6, debug-location !955; ../mulvsi3.c:33:9

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.8, %bb.7

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !957 :: (load (s32) from %stack.0); ../mulvsi3.c:35:20
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !957; ../mulvsi3.c:35:20
  Bcc %bb.8, 0, killed $cpsr, debug-location !957; ../mulvsi3.c:35:20
  B %bb.7, debug-location !957; ../mulvsi3.c:35:20

bb.7.lor.lhs.false8:
; predecessors: %bb.6
  successors: %bb.8, %bb.9

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !959 :: (load (s32) from %stack.0); ../mulvsi3.c:35:13
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !959; ../mulvsi3.c:35:13
  Bcc %bb.9, 1, killed $cpsr, debug-location !959; ../mulvsi3.c:35:13
  B %bb.8, debug-location !959; ../mulvsi3.c:35:13

bb.8.if.then10:
; predecessors: %bb.6, %bb.7
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !960; ../mulvsi3.c:36:13

bb.9.if.end12:
; predecessors: %bb.7

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !961 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !961 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
  renamable $r1 = MOVi 37, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !961; ../mulvsi3.c:37:9

bb.10.if.end13:
; predecessors: %bb.5
  successors: %bb.12, %bb.11

  $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !962 :: (load (s32) from %stack.1); ../mulvsi3.c:39:19
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !962 :: (load (s32) from %stack.0); ../mulvsi3.c:39:19
  renamable $r0 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !962; ../mulvsi3.c:39:19
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.5)
  renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !963; ../mulvsi3.c:40:23
  renamable $r0 = nsw SUBrsi killed renamable $r0, renamable $r1, 249, 14, $noreg, $noreg, debug-location !964; ../mulvsi3.c:40:29
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.4)
  renamable $r1 = MOVsi renamable $r2, 249, 14, $noreg, $noreg, debug-location !965; ../mulvsi3.c:41:19
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.3)
  renamable $r1 = EORrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, debug-location !966; ../mulvsi3.c:42:23
  renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !967; ../mulvsi3.c:42:29
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.2)
  CMPri renamable $r0, 2, 14, $noreg, implicit-def $cpsr, debug-location !969; ../mulvsi3.c:43:19
  Bcc %bb.12, 11, killed $cpsr, debug-location !969; ../mulvsi3.c:43:19
  B %bb.11, debug-location !969; ../mulvsi3.c:43:19

bb.11.lor.lhs.false18:
; predecessors: %bb.10
  successors: %bb.12, %bb.13

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !971 :: (load (s32) from %stack.2); ../mulvsi3.c:43:9
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !971; ../mulvsi3.c:43:9
  Bcc %bb.13, 12, killed $cpsr, debug-location !971; ../mulvsi3.c:43:9
  B %bb.12, debug-location !971; ../mulvsi3.c:43:9

bb.12.if.then20:
; predecessors: %bb.10, %bb.11
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !972; ../mulvsi3.c:44:9

bb.13.if.end22:
; predecessors: %bb.11
  successors: %bb.14, %bb.17

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !974 :: (load (s32) from %stack.5); ../mulvsi3.c:45:9
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !974 :: (load (s32) from %stack.3); ../mulvsi3.c:45:9
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !974; ../mulvsi3.c:45:9
  Bcc %bb.17, 1, killed $cpsr, debug-location !974; ../mulvsi3.c:45:9
  B %bb.14, debug-location !974; ../mulvsi3.c:45:9

bb.14.if.then24:
; predecessors: %bb.13
  successors: %bb.15, %bb.16

  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !975 :: (load (s32) from %stack.2); ../mulvsi3.c:47:25
  renamable $r0 = MVNi -2147483648, 14, $noreg, $noreg
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !975; ../mulvsi3.c:47:25
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !975; ../mulvsi3.c:47:25
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !977 :: (load (s32) from %stack.4); ../mulvsi3.c:47:13
  CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !977; ../mulvsi3.c:47:13
  Bcc %bb.16, 13, killed $cpsr, debug-location !977; ../mulvsi3.c:47:13
  B %bb.15, debug-location !977; ../mulvsi3.c:47:13

bb.15.if.then26:
; predecessors: %bb.14

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !978 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !978 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
  renamable $r1 = MOVi 48, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !978; ../mulvsi3.c:48:13

bb.16.if.end27:
; predecessors: %bb.14
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20, debug-location !979; ../mulvsi3.c:49:5

bb.17.if.else:
; predecessors: %bb.13
  successors: %bb.18, %bb.19

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !980 :: (load (s32) from %stack.2); ../mulvsi3.c:52:27
  renamable $r1 = nsw RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !980; ../mulvsi3.c:52:27
  renamable $r0 = MOVi -2147483648, 14, $noreg, $noreg
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !981; ../mulvsi3.c:52:25
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !981; ../mulvsi3.c:52:25
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !983 :: (load (s32) from %stack.4); ../mulvsi3.c:52:13
  CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !983; ../mulvsi3.c:52:13
  Bcc %bb.19, 13, killed $cpsr, debug-location !983; ../mulvsi3.c:52:13
  B %bb.18, debug-location !983; ../mulvsi3.c:52:13

bb.18.if.then31:
; predecessors: %bb.17

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !984 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !984 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
  renamable $r1 = MOVi 53, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !984; ../mulvsi3.c:53:13

bb.19.if.end32:
; predecessors: %bb.17
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20

bb.20.if.end33:
; predecessors: %bb.19, %bb.16
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !985; ../mulvsi3.c:55:5

bb.21.return:
; predecessors: %bb.20, %bb.12, %bb.8, %bb.3

  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !986 :: (load (s32) from %stack.0); ../mulvsi3.c:0
  $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !986 :: (load (s32) from %stack.1); ../mulvsi3.c:0
  early-clobber renamable $r0 = nsw MULv5 killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !986; ../mulvsi3.c:0
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !987; ../mulvsi3.c:56:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !987; ../mulvsi3.c:56:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !987; ../mulvsi3.c:56:1

bb.22 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __mulvsi3.

# Machine code for function __paritydi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !990 :: (store (s32) into %ir.all + 4, basealign 8); ../paritydi2.c:23:11
  STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !990 :: (store (s32) into %ir.all, align 8); ../paritydi2.c:23:11
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !993 :: (dereferenceable load (s32) from %ir.low, align 8); ../paritydi2.c:24:39
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !992 :: (dereferenceable load (s32) from %ir.high); ../paritydi2.c:24:28
  renamable $r0 = EORrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !994; ../paritydi2.c:24:33
  BL_pred @__paritysi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !995; ../paritydi2.c:24:12
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !996; ../paritydi2.c:24:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !996; ../paritydi2.c:24:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !996; ../paritydi2.c:24:5

# End machine code for function __paritydi2.

# Machine code for function __paritysi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0
  renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !999; ../paritysi2.c:23:7
  renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1001; ../paritysi2.c:24:7
  renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1003; ../paritysi2.c:25:7
  renamable $r2 = ANDri killed renamable $r0, 15, 14, $noreg, $noreg, debug-location !1004; ../paritysi2.c:26:26
  $r1 = MOVi 150, 14, $noreg, $noreg
  $r1 = ORRri $r1, 26880, 14, $noreg, $noreg
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  renamable $r0 = ANDrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !1006; ../paritysi2.c:26:34
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1007; ../paritysi2.c:26:5

# End machine code for function __paritysi2.

# Machine code for function __popcountdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1
  $r2 = MOVr killed $r0, 14, $noreg, $noreg
  dead renamable $r0 = KILL renamable $r1
  dead renamable $r0 = KILL renamable $r2
  $r0 = MOVsi renamable $r1, 11, 14, $noreg, def $cpsr, debug-location !1009; ../popcountdi2.c:23:20
  $r3 = MOVsi renamable $r2, 5, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1009; ../popcountdi2.c:23:20
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !1010; ../popcountdi2.c:23:26
  renamable $r3 = ANDrr killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !1010; ../popcountdi2.c:23:26
  renamable $r2 = SUBrr killed renamable $r2, killed renamable $r3, 14, $noreg, def $cpsr, debug-location !1011; ../popcountdi2.c:23:13
  renamable $r3 = SBCrr killed renamable $r1, killed renamable $r0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1011; ../popcountdi2.c:23:13
  renamable $r12 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r3, 19, 14, $noreg, $noreg, debug-location !1013; ../popcountdi2.c:25:21
  renamable $r0 = ANDrsi renamable $r12, renamable $r2, 19, 14, $noreg, $noreg, debug-location !1013; ../popcountdi2.c:25:21
  renamable $r3 = ANDrr killed renamable $r3, renamable $r12, 14, $noreg, $noreg, debug-location !1014; ../popcountdi2.c:25:52
  renamable $r2 = ANDrr killed renamable $r2, killed renamable $r12, 14, $noreg, $noreg, debug-location !1014; ../popcountdi2.c:25:52
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1015; ../popcountdi2.c:25:46
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1015; ../popcountdi2.c:25:46
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1017; ../popcountdi2.c:27:14
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1017; ../popcountdi2.c:27:14
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !1018; ../popcountdi2.c:27:27
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1018; ../popcountdi2.c:27:27
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1020; ../popcountdi2.c:29:28
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1023; ../popcountdi2.c:32:11
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1025; ../popcountdi2.c:35:15
  renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !1026; ../popcountdi2.c:35:27
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1027; ../popcountdi2.c:35:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4

# End machine code for function __popcountdi2.

# Machine code for function __popcountsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1030; ../popcountsi2.c:23:23
  renamable $r1 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1031; ../popcountsi2.c:23:11
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrsi renamable $r2, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1033; ../popcountsi2.c:25:19
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1034; ../popcountsi2.c:25:38
  renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1035; ../popcountsi2.c:25:33
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1037; ../popcountsi2.c:27:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1038; ../popcountsi2.c:27:24
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1040; ../popcountsi2.c:29:12
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1042; ../popcountsi2.c:32:15
  renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !1043; ../popcountsi2.c:32:27
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1044; ../popcountsi2.c:32:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4

# End machine code for function __popcountsi2.

# Machine code for function __subvdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-4]
  fi#5: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.12, align=4
  cp#1: @__func__.__subvdi3, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  $r12 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  $r12 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !1046; ../subvdi3.c:24:27
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = SBCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1046; ../subvdi3.c:24:27
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !1048; ../subvdi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !1048; ../subvdi3.c:25:9
  B %bb.1, debug-location !1048; ../subvdi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1049 :: (load (s32) from %stack.3); ../subvdi3.c:27:15
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1049 :: (load (s32) from %stack.0); ../subvdi3.c:27:15
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1049 :: (load (s32) from %stack.2); ../subvdi3.c:27:15
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1049 :: (load (s32) from %stack.1); ../subvdi3.c:27:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1049; ../subvdi3.c:27:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1049; ../subvdi3.c:27:15
  Bcc %bb.3, 10, killed $cpsr, debug-location !1050; ../subvdi3.c:27:13
  B %bb.2, debug-location !1050; ../subvdi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1051 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1051 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1051; ../subvdi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !1052; ../subvdi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1053 :: (load (s32) from %stack.3); ../subvdi3.c:32:15
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1053 :: (load (s32) from %stack.0); ../subvdi3.c:32:15
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1053 :: (load (s32) from %stack.2); ../subvdi3.c:32:15
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1053 :: (load (s32) from %stack.1); ../subvdi3.c:32:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1053; ../subvdi3.c:32:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1053; ../subvdi3.c:32:15
  Bcc %bb.6, 11, killed $cpsr, debug-location !1054; ../subvdi3.c:32:13
  B %bb.5, debug-location !1054; ../subvdi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1055 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1055 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1055; ../subvdi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1056 :: (load (s32) from %stack.0); ../subvdi3.c:35:5
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1056 :: (load (s32) from %stack.1); ../subvdi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1056; ../subvdi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1056; ../subvdi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1056; ../subvdi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __subvdi3.

# Machine code for function __subvsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.13, align=4
  cp#1: @__func__.__subvsi3, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = SUBrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1058; ../subvsi3.c:24:27
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1060; ../subvsi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !1060; ../subvsi3.c:25:9
  B %bb.1, debug-location !1060; ../subvsi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1062 :: (load (s32) from %stack.0); ../subvsi3.c:27:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1062 :: (load (s32) from %stack.1); ../subvsi3.c:27:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1062; ../subvsi3.c:27:13
  Bcc %bb.3, 13, killed $cpsr, debug-location !1062; ../subvsi3.c:27:13
  B %bb.2, debug-location !1062; ../subvsi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1063 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1063 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1063; ../subvsi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !1064; ../subvsi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1066 :: (load (s32) from %stack.0); ../subvsi3.c:32:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1066 :: (load (s32) from %stack.1); ../subvsi3.c:32:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1066; ../subvsi3.c:32:13
  Bcc %bb.6, 12, killed $cpsr, debug-location !1066; ../subvsi3.c:32:13
  B %bb.5, debug-location !1066; ../subvsi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1067 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1067 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1067; ../subvsi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1068 :: (load (s32) from %stack.0); ../subvsi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1068; ../subvsi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1068; ../subvsi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1068; ../subvsi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __subvsi3.

# Machine code for function __ucmpdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $r2, $r3
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !1071 :: (store (s32) into %ir.all + 4, basealign 8); ../ucmpdi2.c:26:11
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !1071 :: (store (s32) into %ir.all, align 8); ../ucmpdi2.c:26:11
  STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !1073 :: (store (s32) into %ir.all1 + 4, basealign 8); ../ucmpdi2.c:28:11
  STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !1073 :: (store (s32) into %ir.all1, align 8); ../ucmpdi2.c:28:11
  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1075 :: (dereferenceable load (s32) from %ir.high); ../ucmpdi2.c:29:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1077 :: (dereferenceable load (s32) from %ir.high3); ../ucmpdi2.c:29:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1079; ../ucmpdi2.c:29:9
  Bcc %bb.2, 2, killed $cpsr, debug-location !1079; ../ucmpdi2.c:29:9
  B %bb.1, debug-location !1079; ../ucmpdi2.c:29:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1080; ../ucmpdi2.c:30:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1082 :: (dereferenceable load (s32) from %ir.high5); ../ucmpdi2.c:31:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1084 :: (dereferenceable load (s32) from %ir.high7); ../ucmpdi2.c:31:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1086; ../ucmpdi2.c:31:9
  Bcc %bb.4, 9, killed $cpsr, debug-location !1086; ../ucmpdi2.c:31:9
  B %bb.3, debug-location !1086; ../ucmpdi2.c:31:9

bb.3.if.then9:
; predecessors: %bb.2
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1087; ../ucmpdi2.c:32:9

bb.4.if.end10:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1088 :: (dereferenceable load (s32) from %ir.low, align 8); ../ucmpdi2.c:33:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1089 :: (dereferenceable load (s32) from %ir.low13, align 8); ../ucmpdi2.c:33:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1091; ../ucmpdi2.c:33:9
  Bcc %bb.6, 2, killed $cpsr, debug-location !1091; ../ucmpdi2.c:33:9
  B %bb.5, debug-location !1091; ../ucmpdi2.c:33:9

bb.5.if.then15:
; predecessors: %bb.4
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1092; ../ucmpdi2.c:34:9

bb.6.if.end16:
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1093 :: (dereferenceable load (s32) from %ir.low18, align 8); ../ucmpdi2.c:35:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1094 :: (dereferenceable load (s32) from %ir.low20, align 8); ../ucmpdi2.c:35:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1096; ../ucmpdi2.c:35:9
  Bcc %bb.8, 9, killed $cpsr, debug-location !1096; ../ucmpdi2.c:35:9
  B %bb.7, debug-location !1096; ../ucmpdi2.c:35:9

bb.7.if.then22:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1097; ../ucmpdi2.c:36:9

bb.8.if.end23:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1098; ../ucmpdi2.c:37:5

bb.9.return:
; predecessors: %bb.8, %bb.7, %bb.5, %bb.3, %bb.1

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1099 :: (load (s32) from %stack.2); ../ucmpdi2.c:0
  $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !1100; ../ucmpdi2.c:38:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1100; ../ucmpdi2.c:38:1

# End machine code for function __ucmpdi2.

# Machine code for function __aeabi_ulcmp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  BL_pred @__ucmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !1102; ../ucmpdi2.c:48:9
  renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !1103; ../ucmpdi2.c:48:25
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1104; ../ucmpdi2.c:48:2
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1104; ../ucmpdi2.c:48:2

# End machine code for function __aeabi_ulcmp.

# Machine code for function __udivdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1106; ../udivdi3.c:22:12
  renamable $r12 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1106 :: (store (s32) into stack); ../udivdi3.c:22:12
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1106; ../udivdi3.c:22:12
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1107; ../udivdi3.c:22:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1107; ../udivdi3.c:22:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1107; ../udivdi3.c:22:5

# End machine code for function __udivdi3.

# Machine code for function __udivmodsi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-4]
  fi#4: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  liveins: $r0, $r1, $r2, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1109; ../udivmodsi4.c:22:14
  $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !1109 :: (load (s32) from %stack.2); ../udivmodsi4.c:22:14
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1109 :: (load (s32) from %stack.1); ../udivmodsi4.c:22:14
  $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1109 :: (load (s32) from %stack.0); ../udivmodsi4.c:22:14
  early-clobber renamable $r3 = MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !1110; ../udivmodsi4.c:23:16
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1111; ../udivmodsi4.c:23:12
  STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !1112 :: (store (s32) into %ir.rem); ../udivmodsi4.c:23:8
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1113; ../udivmodsi4.c:24:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1113; ../udivmodsi4.c:24:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1113; ../udivmodsi4.c:24:3

# End machine code for function __udivmodsi4.

# Machine code for function __udivsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
  fi#7: size=4, align=4, at location [SP-40]
  fi#8: size=4, align=4, at location [SP-44]
  fi#9: size=4, align=4, at location [SP-48]
  fi#10: size=4, align=4, at location [SP-52]
  fi#11: size=4, align=4, at location [SP-56]
  fi#12: size=4, align=4, at location [SP-60]
  fi#13: size=4, align=4, at location [SP-64]
  fi#14: size=4, align=4, at location [SP-68]
  fi#15: size=4, align=4, at location [SP-4]
  fi#16: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 64, 14, $noreg, $noreg
  STRi12 $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1116; ../udivsi3.c:32:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !1116; ../udivsi3.c:32:9
  B %bb.1, debug-location !1116; ../udivsi3.c:32:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1117; ../udivsi3.c:33:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1119 :: (load (s32) from %stack.0); ../udivsi3.c:34:9
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1119; ../udivsi3.c:34:9
  Bcc %bb.4, 1, killed $cpsr, debug-location !1119; ../udivsi3.c:34:9
  B %bb.3, debug-location !1119; ../udivsi3.c:34:9

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1120; ../udivsi3.c:35:9

bb.4.if.end3:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1121 :: (load (s32) from %stack.1); ../udivsi3.c:36:10
  BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1121; ../udivsi3.c:36:10
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1121; ../udivsi3.c:36:10
  $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
  STRi12 $r1, $r11, -20, 14, $noreg :: (store (s32) into %stack.4)
  BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1122; ../udivsi3.c:36:29
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1122; ../udivsi3.c:36:29
  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1123 :: (load (s32) from %stack.4); ../udivsi3.c:36:27
  renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1123; ../udivsi3.c:36:27
  STRi12 $r0, $r11, -16, 14, $noreg :: (store (s32) into %stack.3)
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1125; ../udivsi3.c:38:9
  Bcc %bb.6, 3, killed $cpsr, debug-location !1125; ../udivsi3.c:38:9
  B %bb.5, debug-location !1125; ../udivsi3.c:38:9

bb.5.if.then5:
; predecessors: %bb.4
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1126; ../udivsi3.c:39:9

bb.6.if.end6:
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !1128 :: (load (s32) from %stack.3); ../udivsi3.c:40:9
  CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !1128; ../udivsi3.c:40:9
  Bcc %bb.8, 1, killed $cpsr, debug-location !1128; ../udivsi3.c:40:9
  B %bb.7, debug-location !1128; ../udivsi3.c:40:9

bb.7.if.then8:
; predecessors: %bb.6
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1129; ../udivsi3.c:41:9

bb.8.if.end9:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1130 :: (load (s32) from %stack.0); ../udivsi3.c:42:5
  $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !1130 :: (load (s32) from %stack.3); ../udivsi3.c:42:5
  renamable $r1 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !1130; ../udivsi3.c:42:5
  renamable $r2 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !1131; ../udivsi3.c:45:28
  renamable $r3 = MOVsr renamable $r0, killed renamable $r2, 2, 14, $noreg, $noreg, debug-location !1132; ../udivsi3.c:45:11
  renamable $r2 = MOVsr renamable $r0, renamable $r1, 3, 14, $noreg, $noreg, debug-location !1133; ../udivsi3.c:46:11
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
  STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.9, debug-location !1134; ../udivsi3.c:48:5

bb.9.for.cond:
; predecessors: %bb.8, %bb.11
  successors: %bb.12, %bb.10

  $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !1135 :: (load (s32) from %stack.8); ../udivsi3.c:0
  $r2 = LDRi12 $sp, 32, 14, $noreg, debug-location !1135 :: (load (s32) from %stack.7); ../udivsi3.c:0
  $r0 = LDRi12 $r11, -28, 14, $noreg, debug-location !1135 :: (load (s32) from %stack.6); ../udivsi3.c:0
  $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1135 :: (load (s32) from %stack.5); ../udivsi3.c:0
  STRi12 killed $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.12)
  STRi12 $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.11)
  STRi12 killed $r2, $sp, 20, 14, $noreg :: (store (s32) into %stack.10)
  STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.9)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1134; ../udivsi3.c:48:5
  Bcc %bb.12, 0, killed $cpsr, debug-location !1134; ../udivsi3.c:48:5
  B %bb.10, debug-location !1134; ../udivsi3.c:48:5

bb.10.for.body:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1137 :: (load (s32) from %stack.1); ../udivsi3.c:51:22
  $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !1137 :: (load (s32) from %stack.9); ../udivsi3.c:51:22
  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1137 :: (load (s32) from %stack.10); ../udivsi3.c:51:22
  renamable $r0 = MOVsi renamable $r0, 10, 14, $noreg, $noreg, debug-location !1137; ../udivsi3.c:51:22
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r2, 251, 14, $noreg, $noreg, debug-location !1137; ../udivsi3.c:51:22
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.14)
  renamable $r0 = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !1138; ../udivsi3.c:60:41
  renamable $r0 = ADDrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1138; ../udivsi3.c:60:41
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.11, debug-location !1139; ../udivsi3.c:63:5

bb.11.for.inc:
; predecessors: %bb.10
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !1141 :: (load (s32) from %stack.11); ../udivsi3.c:62:11
  $r3 = LDRi12 $sp, 12, 14, $noreg, debug-location !1141 :: (load (s32) from %stack.12); ../udivsi3.c:62:11
  $r12 = LDRi12 $sp, 24, 14, $noreg, debug-location !1141 :: (load (s32) from %stack.9); ../udivsi3.c:62:11
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1141 :: (load (s32) from %stack.13); ../udivsi3.c:62:11
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1141 :: (load (s32) from %stack.14); ../udivsi3.c:62:11
  $lr = LDRi12 $r11, -8, 14, $noreg, debug-location !1141 :: (load (s32) from %stack.1); ../udivsi3.c:62:11
  renamable $lr = SUBrr renamable $r2, renamable $lr, 14, $noreg, $noreg, debug-location !1141; ../udivsi3.c:62:11
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1141; ../udivsi3.c:62:11
  $r2 = MOVr killed renamable $lr, 4, killed $cpsr, $noreg, implicit renamable $r2, debug-location !1141; ../udivsi3.c:62:11
  renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !1142; ../udivsi3.c:61:19
  renamable $r3 = ORRrsi renamable $r3, renamable $r12, 10, 14, $noreg, $noreg, debug-location !1144; ../udivsi3.c:52:22
  renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1145; ../udivsi3.c:48:20
  STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
  STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.9, debug-location !1134; ../udivsi3.c:48:5

bb.12.for.end:
; predecessors: %bb.9
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1148 :: (load (s32) from %stack.12); ../udivsi3.c:64:18
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1148 :: (load (s32) from %stack.9); ../udivsi3.c:64:18
  renamable $r0 = ORRrsi renamable $r0, renamable $r1, 10, 14, $noreg, $noreg, debug-location !1148; ../udivsi3.c:64:18
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1149; ../udivsi3.c:65:5

bb.13.return:
; predecessors: %bb.12, %bb.7, %bb.5, %bb.3, %bb.1

  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1135 :: (load (s32) from %stack.2); ../udivsi3.c:0
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1150; ../udivsi3.c:66:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1150; ../udivsi3.c:66:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1150; ../udivsi3.c:66:1

# End machine code for function __udivsi3.

# Machine code for function __umoddi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1152; ../umoddi3.c:23:5
  renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1152 :: (store (s32) into stack); ../umoddi3.c:23:5
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1152; ../umoddi3.c:23:5
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1153 :: (dereferenceable load (s32) from %ir.r, align 8); ../umoddi3.c:24:12
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1153 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../umoddi3.c:24:12
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1154; ../umoddi3.c:24:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1154; ../umoddi3.c:24:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1154; ../umoddi3.c:24:5

# End machine code for function __umoddi3.

# Machine code for function __umodsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1156; ../umodsi3.c:22:16
  $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !1156 :: (load (s32) from %stack.1); ../umodsi3.c:22:16
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1156; ../umodsi3.c:22:16
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1157 :: (load (s32) from %stack.0); ../umodsi3.c:22:32
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1157; ../umodsi3.c:22:32
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1158; ../umodsi3.c:22:14
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1159; ../umodsi3.c:22:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1159; ../umodsi3.c:22:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1159; ../umodsi3.c:22:5

# End machine code for function __umodsi3.

# Machine code for function memcpy: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 20
  STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1161; ../memory.c:8:6

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1162 :: (load (s32) from %stack.3); ../memory.c:0
  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1162 :: (load (s32) from %stack.0); ../memory.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1164; ../memory.c:8:2
  Bcc %bb.4, 0, killed $cpsr, debug-location !1164; ../memory.c:8:2
  B %bb.2, debug-location !1164; ../memory.c:8:2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1165 :: (load (s32) from %stack.1); ../memory.c:9:21
  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1165 :: (load (s32) from %stack.4); ../memory.c:9:21
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1165 :: (load (s32) from %stack.2); ../memory.c:9:21
  renamable $r0 = LDRBrs renamable $r0, renamable $r2, 0, 14, $noreg, debug-location !1165 :: (load (s8) from %ir.arrayidx); ../memory.c:9:21
  STRBrs killed renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1167 :: (store (s8) into %ir.arrayidx1); ../memory.c:9:19
  B %bb.3, debug-location !1168; ../memory.c:10:2

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1169 :: (load (s32) from %stack.4); ../memory.c:8:26
  renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1169; ../memory.c:8:26
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1164; ../memory.c:8:2

bb.4.for.end:
; predecessors: %bb.1

  renamable $r0 = IMPLICIT_DEF
  $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1171; ../memory.c:11:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1171; ../memory.c:11:1

# End machine code for function memcpy.

# Machine code for function memset: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 20
  STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1173; ../memory.c:17:6

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1174 :: (load (s32) from %stack.3); ../memory.c:0
  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1174 :: (load (s32) from %stack.0); ../memory.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1176; ../memory.c:17:2
  Bcc %bb.4, 0, killed $cpsr, debug-location !1176; ../memory.c:17:2
  B %bb.2, debug-location !1176; ../memory.c:17:2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1179 :: (load (s32) from %stack.2); ../memory.c:18:11
  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1179 :: (load (s32) from %stack.1); ../memory.c:18:11
  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1179 :: (load (s32) from %stack.4); ../memory.c:18:11
  STRBrs renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1179 :: (store (s8) into %ir.arrayidx); ../memory.c:18:11
  B %bb.3, debug-location !1180; ../memory.c:19:2

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1181 :: (load (s32) from %stack.4); ../memory.c:17:26
  renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1181; ../memory.c:17:26
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1176; ../memory.c:17:2

bb.4.for.end:
; predecessors: %bb.1

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1183 :: (load (s32) from %stack.1); ../memory.c:20:2
  $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1183; ../memory.c:20:2
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1183; ../memory.c:20:2

# End machine code for function memset.

