##########################
## Analysis Information ##
##########################
#### Function: __absvdi2
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r2 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !296; ../absvdi2.c:25:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !296; ../absvdi2.c:25:11
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !297; ../absvdi2.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 1, killed $cpsr, debug-location !297; ../absvdi2.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !297; ../absvdi2.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !298 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !298 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 26, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !298; ../absvdi2.c:26:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !299 :: (load (s32) from %stack.1); ../absvdi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !299 :: (load (s32) from %stack.0); ../absvdi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !299; ../absvdi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !299; ../absvdi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !299; ../absvdi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, debug-location !299; ../absvdi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !300; ../absvdi2.c:28:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !300; ../absvdi2.c:28:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !300; ../absvdi2.c:28:5
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __absvsi2
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !305; ../absvsi2.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 1, killed $cpsr, debug-location !305; ../absvsi2.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !305; ../absvsi2.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !306 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !306 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 26, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !306; ../absvsi2.c:26:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !307 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !307; ../absvsi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: Bcc %bb.4, 5, killed $cpsr, debug-location !307; ../absvsi2.c:28:20
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !307 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !307; ../absvsi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !307 :: (load (s32) from %stack.1); ../absvsi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !308; ../absvsi2.c:28:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !308; ../absvsi2.c:28:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !308; ../absvsi2.c:28:5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __addvdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r12 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r12 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !310; ../addvdi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ADCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !310; ../addvdi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !312; ../addvdi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 4, killed $cpsr, debug-location !312; ../addvdi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !312; ../addvdi3.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !313 :: (load (s32) from %stack.0); ../addvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !313 :: (load (s32) from %stack.3); ../addvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !313 :: (load (s32) from %stack.1); ../addvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !313 :: (load (s32) from %stack.2); ../addvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !313; ../addvdi3.c:27:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !313; ../addvdi3.c:27:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 10, killed $cpsr, debug-location !314; ../addvdi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !314; ../addvdi3.c:27:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !315 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !315 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 28, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !315; ../addvdi3.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.7, debug-location !316; ../addvdi3.c:29:5
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !317 :: (load (s32) from %stack.0); ../addvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !317 :: (load (s32) from %stack.3); ../addvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !317 :: (load (s32) from %stack.1); ../addvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !317 :: (load (s32) from %stack.2); ../addvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !317; ../addvdi3.c:32:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !317; ../addvdi3.c:32:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 11, killed $cpsr, debug-location !318; ../addvdi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !318; ../addvdi3.c:32:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !319 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !319 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !319; ../addvdi3.c:33:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: B %bb.7
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !320 :: (load (s32) from %stack.0); ../addvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !320 :: (load (s32) from %stack.1); ../addvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !320; ../addvdi3.c:35:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !320; ../addvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !320; ../addvdi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __addvsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ADDrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !322; ../addvsi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !324; ../addvsi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 4, killed $cpsr, debug-location !324; ../addvsi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !324; ../addvsi3.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !326 :: (load (s32) from %stack.0); ../addvsi3.c:27:13
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !326 :: (load (s32) from %stack.1); ../addvsi3.c:27:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !326; ../addvsi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 10, killed $cpsr, debug-location !326; ../addvsi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !326; ../addvsi3.c:27:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !327 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !327 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 28, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !327; ../addvsi3.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.7, debug-location !328; ../addvsi3.c:29:5
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !330 :: (load (s32) from %stack.0); ../addvsi3.c:32:13
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !330 :: (load (s32) from %stack.1); ../addvsi3.c:32:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !330; ../addvsi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 11, killed $cpsr, debug-location !330; ../addvsi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !330; ../addvsi3.c:32:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !331 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !331 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !331; ../addvsi3.c:33:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: B %bb.7
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !332 :: (load (s32) from %stack.0); ../addvsi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !332; ../addvsi3.c:35:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !332; ../addvsi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !332; ../addvsi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __aeabi_lcmp
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL_pred @__cmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !484; ../cmpdi2.c:48:9
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !485; ../cmpdi2.c:48:24
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !486; ../cmpdi2.c:48:2
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !486; ../cmpdi2.c:48:2
# Before:
not available
# After:
not available
#### Function: __aeabi_ulcmp
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL_pred @__ucmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !1207; ../ucmpdi2.c:48:9
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !1208; ../ucmpdi2.c:48:25
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1209; ../ucmpdi2.c:48:2
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1209; ../ucmpdi2.c:48:2
# Before:
not available
# After:
not available
#### Function: __ashldi3
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !335 :: (store (s32) into %ir.all + 4, basealign 8); ../ashldi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !335 :: (store (s32) into %ir.all, align 8); ../ashldi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !337; ../ashldi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 0, killed $cpsr, debug-location !337; ../ashldi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !337; ../ashldi3.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !339 :: (store (s32) into %ir.low, align 8); ../ashldi3.c:32:22
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !340 :: (dereferenceable load (s32) from %ir.low2, align 8); ../ashldi3.c:33:33
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !341; ../ashldi3.c:33:43
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !342; ../ashldi3.c:33:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !345 :: (store (s32) into %ir.high); ../ashldi3.c:33:23
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !346; ../ashldi3.c:34:5
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !348 :: (load (s32) from %stack.4); ../ashldi3.c:37:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !348; ../ashldi3.c:37:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !348; ../ashldi3.c:37:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !348; ../ashldi3.c:37:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !349; ../ashldi3.c:38:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !350 :: (load (s32) from %stack.4); ../ashldi3.c:39:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !350 :: (dereferenceable load (s32) from %ir.low6, align 8); ../ashldi3.c:39:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !351; ../ashldi3.c:39:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !353 :: (store (s32) into %ir.low9, align 8); ../ashldi3.c:39:23
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !357 :: (dereferenceable load (s32) from %ir.low14, align 8); ../ashldi3.c:40:56
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !355 :: (dereferenceable load (s32) from %ir.high11); ../ashldi3.c:40:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !356; ../ashldi3.c:40:39
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !358; ../ashldi3.c:40:77
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !360; ../ashldi3.c:40:45
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !363 :: (store (s32) into %ir.high17); ../ashldi3.c:40:23
# Before:
bot
# After:
not available
## Instruction: B %bb.5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !364 :: (dereferenceable load (s32) from %ir.all19, align 8); ../ashldi3.c:42:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !364 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../ashldi3.c:42:19
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !365; ../ashldi3.c:42:5
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !366 :: (load (s32) from %stack.6); ../ashldi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !366 :: (load (s32) from %stack.5); ../ashldi3.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !367; ../ashldi3.c:43:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !367; ../ashldi3.c:43:1
# Before:
not available
# After:
not available
#### Function: __ashrdi3
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !370 :: (store (s32) into %ir.all + 4, basealign 8); ../ashrdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !370 :: (store (s32) into %ir.all, align 8); ../ashrdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !372; ../ashrdi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 0, killed $cpsr, debug-location !372; ../ashrdi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !372; ../ashrdi3.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !374 :: (load (s32) from %stack.4); ../ashrdi3.c:33:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !374 :: (dereferenceable load (s32) from %ir.high); ../ashrdi3.c:33:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 249, 14, $noreg, $noreg, debug-location !375; ../ashrdi3.c:33:38
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !378 :: (store (s32) into %ir.high2); ../ashrdi3.c:33:23
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !380 :: (dereferenceable load (s32) from %ir.high4); ../ashrdi3.c:34:32
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !381; ../ashrdi3.c:34:43
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 1, 14, $noreg, $noreg, debug-location !382; ../ashrdi3.c:34:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !384 :: (store (s32) into %ir.low, align 8); ../ashrdi3.c:34:22
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !385; ../ashrdi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !387 :: (load (s32) from %stack.4); ../ashrdi3.c:38:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !387; ../ashrdi3.c:38:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !387; ../ashrdi3.c:38:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !387; ../ashrdi3.c:38:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !388; ../ashrdi3.c:39:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !390 :: (load (s32) from %stack.4); ../ashrdi3.c:40:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !390 :: (dereferenceable load (s32) from %ir.high9); ../ashrdi3.c:40:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 1, 14, $noreg, $noreg, debug-location !391; ../ashrdi3.c:40:39
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !394 :: (store (s32) into %ir.high12); ../ashrdi3.c:40:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !399 :: (dereferenceable load (s32) from %ir.low17, align 8); ../ashrdi3.c:41:72
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !396 :: (dereferenceable load (s32) from %ir.high14); ../ashrdi3.c:41:33
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !397; ../ashrdi3.c:41:55
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !398; ../ashrdi3.c:41:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !401; ../ashrdi3.c:41:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !403 :: (store (s32) into %ir.low20, align 8); ../ashrdi3.c:41:22
# Before:
bot
# After:
not available
## Instruction: B %bb.5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !404 :: (dereferenceable load (s32) from %ir.all22, align 8); ../ashrdi3.c:43:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !404 :: (dereferenceable load (s32) from %ir.all22 + 4, basealign 8); ../ashrdi3.c:43:19
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !405; ../ashrdi3.c:43:5
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !406 :: (load (s32) from %stack.6); ../ashrdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !406 :: (load (s32) from %stack.5); ../ashrdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !407; ../ashrdi3.c:44:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !407; ../ashrdi3.c:44:1
# Before:
not available
# After:
not available
#### Function: __clzdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !410 :: (store (s32) into %ir.all + 4, basealign 8); ../clzdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !410 :: (store (s32) into %ir.all, align 8); ../clzdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !416 :: (dereferenceable load (s32) from %ir.low, align 8); ../clzdi2.c:27:49
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !412 :: (dereferenceable load (s32) from %ir.high2); ../clzdi2.c:26:28
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !417; ../clzdi2.c:27:42
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr $r2, 14, $noreg, $noreg, debug-location !417; ../clzdi2.c:27:42
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !417; ../clzdi2.c:27:42
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !418; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 32, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !421; ../clzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !421; ../clzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !421; ../clzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !422; ../clzdi2.c:27:5
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !422; ../clzdi2.c:27:5
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __clzsi2
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r3 = MOVr killed $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: CMPri renamable $r3, 65536, 14, $noreg, implicit-def $cpsr
# Before:
not available
# After:
not available
## Instruction: $r2 = MOVi 1, 3, killed $cpsr, $noreg, implicit renamable $r2
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r2, 34, 14, $noreg, $noreg, debug-location !425; ../clzsi2.c:25:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nuw nsw SUBrsi killed renamable $r1, killed renamable $r2, 34, 14, $noreg, $noreg, debug-location !426; ../clzsi2.c:26:14
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !427; ../clzsi2.c:26:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 65280, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !428; ../clzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !428; ../clzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !428; ../clzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVi 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nuw nsw SUBrsi killed renamable $r3, renamable $r1, 26, 14, $noreg, $noreg, debug-location !431; ../clzsi2.c:30:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !432; ../clzsi2.c:30:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !433; ../clzsi2.c:31:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 240, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !434; ../clzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !434; ../clzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !434; ../clzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVi 4, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nuw nsw SUBrsi killed renamable $r2, renamable $r1, 18, 14, $noreg, $noreg, debug-location !437; ../clzsi2.c:34:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !438; ../clzsi2.c:34:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !439; ../clzsi2.c:35:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 12, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !440; ../clzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !440; ../clzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $lr = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !440; ../clzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nuw nsw SUBrsi renamable $r1, renamable $lr, 10, 14, $noreg, $noreg, debug-location !443; ../clzsi2.c:38:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !444; ../clzsi2.c:38:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $lr, 10, 14, $noreg, $noreg, debug-location !445; ../clzsi2.c:39:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !446; ../clzsi2.c:52:20
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MVNi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsi killed renamable $r2, killed renamable $r3, 11, 14, $noreg, $noreg, debug-location !447; ../clzsi2.c:52:37
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !447; ../clzsi2.c:52:37
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !448; ../clzsi2.c:52:25
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !449; ../clzsi2.c:52:14
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !450; ../clzsi2.c:52:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !450; ../clzsi2.c:52:5
# Before:
not available
# After:
not available
#### Function: __cmpdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !453 :: (store (s32) into %ir.all + 4, basealign 8); ../cmpdi2.c:26:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !453 :: (store (s32) into %ir.all, align 8); ../cmpdi2.c:26:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !455 :: (store (s32) into %ir.all1 + 4, basealign 8); ../cmpdi2.c:28:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !455 :: (store (s32) into %ir.all1, align 8); ../cmpdi2.c:28:11
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !457 :: (dereferenceable load (s32) from %ir.high); ../cmpdi2.c:29:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !459 :: (dereferenceable load (s32) from %ir.high3); ../cmpdi2.c:29:24
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !461; ../cmpdi2.c:29:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 10, killed $cpsr, debug-location !461; ../cmpdi2.c:29:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !461; ../cmpdi2.c:29:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !462; ../cmpdi2.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !464 :: (dereferenceable load (s32) from %ir.high5); ../cmpdi2.c:31:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !466 :: (dereferenceable load (s32) from %ir.high7); ../cmpdi2.c:31:24
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !468; ../cmpdi2.c:31:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 13, killed $cpsr, debug-location !468; ../cmpdi2.c:31:9
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !468; ../cmpdi2.c:31:9
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r0 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !469; ../cmpdi2.c:32:9
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !470 :: (dereferenceable load (s32) from %ir.low, align 8); ../cmpdi2.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !471 :: (dereferenceable load (s32) from %ir.low13, align 8); ../cmpdi2.c:33:23
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !473; ../cmpdi2.c:33:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 2, killed $cpsr, debug-location !473; ../cmpdi2.c:33:9
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !473; ../cmpdi2.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !474; ../cmpdi2.c:34:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !475 :: (dereferenceable load (s32) from %ir.low18, align 8); ../cmpdi2.c:35:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !476 :: (dereferenceable load (s32) from %ir.low20, align 8); ../cmpdi2.c:35:23
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !478; ../cmpdi2.c:35:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 9, killed $cpsr, debug-location !478; ../cmpdi2.c:35:9
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !478; ../cmpdi2.c:35:9
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: renamable $r0 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !479; ../cmpdi2.c:36:9
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !480; ../cmpdi2.c:37:5
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !481 :: (load (s32) from %stack.2); ../cmpdi2.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !482; ../cmpdi2.c:38:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !482; ../cmpdi2.c:38:1
# Before:
not available
# After:
not available
#### Function: __ctzdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !489 :: (store (s32) into %ir.all + 4, basealign 8); ../ctzdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !489 :: (store (s32) into %ir.all, align 8); ../ctzdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !490 :: (dereferenceable load (s32) from %ir.low, align 8); ../ctzdi2.c:26:28
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !493 :: (dereferenceable load (s32) from %ir.high); ../ctzdi2.c:27:31
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !494; ../ctzdi2.c:27:41
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r2, 14, $noreg, $noreg, debug-location !494; ../ctzdi2.c:27:41
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed renamable $r0, 0, killed $cpsr, $noreg, implicit renamable $r1, debug-location !494; ../ctzdi2.c:27:41
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !495; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !495; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !495; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !495; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !495; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !495; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !495; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !495; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !495; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !495; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !495; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 32, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !497; ../ctzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !497; ../ctzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !497; ../ctzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !498; ../ctzdi2.c:27:5
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !498; ../ctzdi2.c:27:5
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __ctzsi2
### Basic Block: 0
## Instruction: $r2 = MOVr killed $r0, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: $r0 = MOVi 255, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r0 = ORRri $r0, 65280, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr renamable $r2, killed renamable $r0, 14, $noreg, $noreg, debug-location !500; ../ctzsi2.c:25:20
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = RSBri renamable $r0, 0, 14, $noreg, def $cpsr, debug-location !500; ../ctzsi2.c:25:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADCrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !500; ../ctzsi2.c:25:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 34, 14, $noreg, $noreg, debug-location !502; ../ctzsi2.c:25:40
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !503; ../ctzsi2.c:26:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 255, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !504; ../ctzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !504; ../ctzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !504; ../ctzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r1, 26, 14, $noreg, $noreg, debug-location !506; ../ctzsi2.c:29:29
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !507; ../ctzsi2.c:30:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !508; ../ctzsi2.c:31:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 15, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !509; ../ctzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !509; ../ctzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !509; ../ctzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r1, 18, 14, $noreg, $noreg, debug-location !511; ../ctzsi2.c:33:27
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !512; ../ctzsi2.c:34:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !513; ../ctzsi2.c:35:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 3, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !514; ../ctzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !514; ../ctzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !514; ../ctzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r1, 10, 14, $noreg, $noreg, debug-location !516; ../ctzsi2.c:37:26
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !517; ../ctzsi2.c:38:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !518; ../ctzsi2.c:40:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, killed renamable $r2, 11, 14, $noreg, $noreg, debug-location !519; ../ctzsi2.c:56:25
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nuw nsw RSBri killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !520; ../ctzsi2.c:56:20
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MVNi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsr killed renamable $r2, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !521; ../ctzsi2.c:56:44
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !521; ../ctzsi2.c:56:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !522; ../ctzsi2.c:56:32
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !523; ../ctzsi2.c:56:14
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !524; ../ctzsi2.c:56:5
# Before:
not available
# After:
not available
#### Function: __divdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $lr = MOVr killed $r3, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r3 = MOVr killed $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !526; ../divdi3.c:23:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, $noreg, debug-location !528; ../divdi3.c:25:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !528; ../divdi3.c:25:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !529; ../divdi3.c:25:19
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !529; ../divdi3.c:25:19
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = EORrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, $noreg, debug-location !530; ../divdi3.c:26:12
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = EORrsi renamable $lr, renamable $lr, 249, 14, $noreg, $noreg, debug-location !530; ../divdi3.c:26:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = SUBrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, def $cpsr, debug-location !531; ../divdi3.c:26:19
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = SBCrsi killed renamable $r3, renamable $lr, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !531; ../divdi3.c:26:19
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = EORrsi killed renamable $r12, killed renamable $lr, 249, 14, $noreg, $noreg, debug-location !532; ../divdi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !533; ../divdi3.c:28:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !533 :: (store (s32) into stack); ../divdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !533; ../divdi3.c:28:13
# Before:
not available
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !533 :: (load (s32) from %stack.0); ../divdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !534; ../divdi3.c:28:44
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !534; ../divdi3.c:28:44
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, renamable $r2, 14, $noreg, def $cpsr, debug-location !535; ../divdi3.c:28:51
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SBCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !535; ../divdi3.c:28:51
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !536; ../divdi3.c:28:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !536; ../divdi3.c:28:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !536; ../divdi3.c:28:5
# Before:
not available
# After:
not available
#### Function: __divmoddi4
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r7, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup ADDri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: $r5 = MOVr killed $r2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r2, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r5, 14, $noreg, $noreg, debug-location !901; ../divmoddi4.c:22:14
# Before:
not available
# After:
not available
## Instruction: BL_pred @__divdi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !901; ../divmoddi4.c:22:14
# Before:
not available
# After:
not available
## Instruction: $r12 = LDRi12 $sp, 0, 14, $noreg, debug-location !901 :: (load (s32) from %stack.3); ../divmoddi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !901 :: (load (s32) from %stack.2); ../divmoddi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !901 :: (load (s32) from %stack.1); ../divmoddi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $lr = LDRi12 $sp, 12, 14, $noreg, debug-location !901 :: (load (s32) from %stack.0); ../divmoddi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r4, early-clobber renamable $r7 = UMULLv5 renamable $r0, renamable $r5, 14, $noreg, $noreg, debug-location !902; ../divmoddi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r6 = MLAv5 renamable $r0, killed renamable $lr, killed renamable $r7, 14, $noreg, $noreg, debug-location !902; ../divmoddi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $lr = MLAv5 renamable $r1, killed renamable $r5, killed renamable $r6, 14, $noreg, $noreg, debug-location !902; ../divmoddi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = SUBrr killed renamable $r12, killed renamable $r4, 14, $noreg, def $cpsr, debug-location !903; ../divmoddi4.c:23:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = SBCrr killed renamable $r2, killed renamable $lr, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !903; ../divmoddi4.c:23:12
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, renamable $r3, 0, 14, $noreg, debug-location !904 :: (store (s32) into %ir.rem, align 8); ../divmoddi4.c:23:8
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, killed renamable $r3, 4, 14, $noreg, debug-location !904 :: (store (s32) into %ir.rem + 4, basealign 8); ../divmoddi4.c:23:8
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy SUBri killed $r11, 16, 14, $noreg, $noreg, debug-location !905; ../divmoddi4.c:24:3
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r5, def $r6, def $r7, def $r11, def $lr, debug-location !905; ../divmoddi4.c:24:3
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !905; ../divmoddi4.c:24:3
# Before:
not available
# After:
not available
#### Function: __divmodsi4
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !907; ../divmodsi4.c:22:14
# Before:
not available
# After:
not available
## Instruction: $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !907 :: (load (s32) from %stack.2); ../divmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !907 :: (load (s32) from %stack.1); ../divmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !907 :: (load (s32) from %stack.0); ../divmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r3 = nsw MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !908; ../divmodsi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !909; ../divmodsi4.c:23:12
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !910 :: (store (s32) into %ir.rem); ../divmodsi4.c:23:8
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !911; ../divmodsi4.c:24:3
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !911; ../divmodsi4.c:24:3
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !911; ../divmodsi4.c:24:3
# Before:
not available
# After:
not available
#### Function: __divsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r3 = MOVr killed $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !913; ../divsi3.c:25:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !915; ../divsi3.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 249, 14, $noreg, $noreg, debug-location !916; ../divsi3.c:27:19
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !917; ../divsi3.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !918; ../divsi3.c:28:19
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = EORrsi killed renamable $r2, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !919; ../divsi3.c:29:9
# Before:
not available
# After:
not available
## Instruction: STRi12 $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !920; ../divsi3.c:36:22
# Before:
not available
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !920 :: (load (s32) from %stack.0); ../divsi3.c:36:22
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !921; ../divsi3.c:36:33
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !922; ../divsi3.c:36:40
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !923; ../divsi3.c:36:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !923; ../divsi3.c:36:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !923; ../divsi3.c:36:5
# Before:
not available
# After:
not available
#### Function: __ffsdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 12, 14, $noreg, debug-location !926 :: (store (s32) into %ir.all + 4, basealign 8); ../ffsdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 8, 14, $noreg, debug-location !926 :: (store (s32) into %ir.all, align 8); ../ffsdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !927 :: (dereferenceable load (s32) from %ir.low, align 8); ../ffsdi2.c:26:13
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !929; ../ffsdi2.c:26:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !929; ../ffsdi2.c:26:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !929; ../ffsdi2.c:26:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !931 :: (dereferenceable load (s32) from %ir.high); ../ffsdi2.c:28:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !933; ../ffsdi2.c:28:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 1, killed $cpsr, debug-location !933; ../ffsdi2.c:28:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !933; ../ffsdi2.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !934; ../ffsdi2.c:29:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !936 :: (dereferenceable load (s32) from %ir.high5); ../ffsdi2.c:30:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !937; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !937; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !937; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !937; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !937; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !937; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !937; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !937; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !937; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !937; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !938; ../ffsdi2.c:30:40
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !939; ../ffsdi2.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !940 :: (dereferenceable load (s32) from %ir.low8, align 8); ../ffsdi2.c:32:30
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !941; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !941; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !941; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !941; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !941; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !941; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !941; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !941; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !941; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !941; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !942; ../ffsdi2.c:32:35
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !943; ../ffsdi2.c:32:5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !944 :: (load (s32) from %stack.1); ../ffsdi2.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 16, 14, $noreg, $noreg, debug-location !945; ../ffsdi2.c:33:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !945; ../ffsdi2.c:33:1
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __ffssi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !948; ../ffssi2.c:24:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 1, killed $cpsr, debug-location !948; ../ffssi2.c:24:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !948; ../ffssi2.c:24:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.3, debug-location !949; ../ffssi2.c:26:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !950 :: (load (s32) from %stack.0); ../ffssi2.c:28:12
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !950; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !950; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !950; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !950; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !950; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !950; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !950; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !950; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !950; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !950; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !951; ../ffssi2.c:28:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.3, debug-location !952; ../ffssi2.c:28:5
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !953 :: (load (s32) from %stack.1); ../ffssi2.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !954; ../ffssi2.c:29:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !954; ../ffssi2.c:29:1
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __lshrdi3
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !957 :: (store (s32) into %ir.all + 4, basealign 8); ../lshrdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !957 :: (store (s32) into %ir.all, align 8); ../lshrdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !959; ../lshrdi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 0, killed $cpsr, debug-location !959; ../lshrdi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !959; ../lshrdi3.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !962 :: (store (s32) into %ir.high); ../lshrdi3.c:32:23
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !964 :: (dereferenceable load (s32) from %ir.high2); ../lshrdi3.c:33:32
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !965; ../lshrdi3.c:33:43
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !966; ../lshrdi3.c:33:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !968 :: (store (s32) into %ir.low, align 8); ../lshrdi3.c:33:22
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !969; ../lshrdi3.c:34:5
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !971 :: (load (s32) from %stack.4); ../lshrdi3.c:37:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !971; ../lshrdi3.c:37:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !971; ../lshrdi3.c:37:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !971; ../lshrdi3.c:37:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !972; ../lshrdi3.c:38:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !974 :: (load (s32) from %stack.4); ../lshrdi3.c:39:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !974 :: (dereferenceable load (s32) from %ir.high6); ../lshrdi3.c:39:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !975; ../lshrdi3.c:39:39
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !978 :: (store (s32) into %ir.high9); ../lshrdi3.c:39:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !983 :: (dereferenceable load (s32) from %ir.low14, align 8); ../lshrdi3.c:40:72
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !980 :: (dereferenceable load (s32) from %ir.high11); ../lshrdi3.c:40:33
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !981; ../lshrdi3.c:40:55
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !982; ../lshrdi3.c:40:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !985; ../lshrdi3.c:40:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !987 :: (store (s32) into %ir.low17, align 8); ../lshrdi3.c:40:22
# Before:
bot
# After:
not available
## Instruction: B %bb.5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !988 :: (dereferenceable load (s32) from %ir.all19, align 8); ../lshrdi3.c:42:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !988 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../lshrdi3.c:42:19
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !989; ../lshrdi3.c:42:5
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !990 :: (load (s32) from %stack.6); ../lshrdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !990 :: (load (s32) from %stack.5); ../lshrdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !991; ../lshrdi3.c:43:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !991; ../lshrdi3.c:43:1
# Before:
not available
# After:
not available
#### Function: __moddi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r12 = MOVr killed $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !993; ../moddi3.c:24:17
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = EORrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !993; ../moddi3.c:24:17
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !993; ../moddi3.c:24:17
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = EORrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !993; ../moddi3.c:24:17
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !995; ../moddi3.c:26:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !995; ../moddi3.c:26:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !996; ../moddi3.c:26:17
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SBCrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !996; ../moddi3.c:26:17
# Before:
not available
# After:
not available
## Instruction: $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !997; ../moddi3.c:28:5
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !997 :: (store (s32) into stack); ../moddi3.c:28:5
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !997; ../moddi3.c:28:5
# Before:
not available
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !997 :: (load (s32) from %stack.1); ../moddi3.c:28:5
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !998 :: (dereferenceable load (s32) from %ir.r, align 8); ../moddi3.c:29:21
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !998 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../moddi3.c:29:21
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !999; ../moddi3.c:29:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !999; ../moddi3.c:29:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !1000; ../moddi3.c:29:28
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1000; ../moddi3.c:29:28
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1001; ../moddi3.c:29:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1001; ../moddi3.c:29:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1001; ../moddi3.c:29:5
# Before:
not available
# After:
not available
#### Function: __modsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1003; ../modsi3.c:22:16
# Before:
not available
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !1003 :: (load (s32) from %stack.1); ../modsi3.c:22:16
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1003; ../modsi3.c:22:16
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1004 :: (load (s32) from %stack.0); ../modsi3.c:22:31
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = nsw MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1004; ../modsi3.c:22:31
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1005; ../modsi3.c:22:14
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1006; ../modsi3.c:22:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1006; ../modsi3.c:22:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1006; ../modsi3.c:22:5
# Before:
not available
# After:
not available
#### Function: __mulvdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 48, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $r11, -24, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $r11, -20, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $r11, -16, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $r11, -12, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !1008; ../mulvdi3.c:27:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1008; ../mulvdi3.c:27:11
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1009; ../mulvdi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.5, 1, killed $cpsr, debug-location !1009; ../mulvdi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1009; ../mulvdi3.c:27:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1010 :: (load (s32) from %stack.2); ../mulvdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1010 :: (load (s32) from %stack.3); ../mulvdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1010; ../mulvdi3.c:29:15
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1011; ../mulvdi3.c:29:20
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 0, killed $cpsr, debug-location !1011; ../mulvdi3.c:29:20
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1011; ../mulvdi3.c:29:20
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1012 :: (load (s32) from %stack.3); ../mulvdi3.c:29:25
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1012 :: (load (s32) from %stack.2); ../mulvdi3.c:29:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1012; ../mulvdi3.c:29:25
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1012; ../mulvdi3.c:29:25
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1013; ../mulvdi3.c:29:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !1013; ../mulvdi3.c:29:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !1013; ../mulvdi3.c:29:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.21, debug-location !1014; ../mulvdi3.c:30:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1015 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1015 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 31, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1015; ../mulvdi3.c:31:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1016 :: (load (s32) from %stack.2); ../mulvdi3.c:33:11
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1016 :: (load (s32) from %stack.3); ../mulvdi3.c:33:11
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORri renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !1016; ../mulvdi3.c:33:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1016; ../mulvdi3.c:33:11
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1017; ../mulvdi3.c:33:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.10, 1, killed $cpsr, debug-location !1017; ../mulvdi3.c:33:9
# Before:
not available
# After:
not available
## Instruction: B %bb.6, debug-location !1017; ../mulvdi3.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1018 :: (load (s32) from %stack.0); ../mulvdi3.c:35:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1018 :: (load (s32) from %stack.1); ../mulvdi3.c:35:15
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1018; ../mulvdi3.c:35:15
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1019; ../mulvdi3.c:35:20
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 0, killed $cpsr, debug-location !1019; ../mulvdi3.c:35:20
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !1019; ../mulvdi3.c:35:20
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1020 :: (load (s32) from %stack.1); ../mulvdi3.c:35:25
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1020 :: (load (s32) from %stack.0); ../mulvdi3.c:35:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1020; ../mulvdi3.c:35:25
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1020; ../mulvdi3.c:35:25
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1021; ../mulvdi3.c:35:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.9, 1, killed $cpsr, debug-location !1021; ../mulvdi3.c:35:13
# Before:
not available
# After:
not available
## Instruction: B %bb.8, debug-location !1021; ../mulvdi3.c:35:13
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: B %bb.21, debug-location !1022; ../mulvdi3.c:36:13
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1023 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1023 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 37, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1023; ../mulvdi3.c:37:9
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1024 :: (load (s32) from %stack.3); ../mulvdi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !1024 :: (load (s32) from %stack.2); ../mulvdi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !1024 :: (load (s32) from %stack.1); ../mulvdi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1024 :: (load (s32) from %stack.0); ../mulvdi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsi renamable $r12, 249, 14, $noreg, $noreg, debug-location !1024; ../mulvdi3.c:39:19
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.11)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.10)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1025; ../mulvdi3.c:40:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1025; ../mulvdi3.c:40:23
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !1026; ../mulvdi3.c:40:29
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.9)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SBCrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1026; ../mulvdi3.c:40:29
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !1027; ../mulvdi3.c:41:19
# Before:
not available
# After:
not available
## Instruction: STRi12 $r12, $sp, 16, 14, $noreg :: (store (s32) into %stack.7)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 20, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: renamable $r12 = EORrsi renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1028; ../mulvdi3.c:42:23
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1028; ../mulvdi3.c:42:23
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = SUBrsi killed renamable $r12, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !1029; ../mulvdi3.c:42:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 24, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = SBCrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1029; ../mulvdi3.c:42:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 28, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: dead renamable $r1 = SUBri renamable $r1, 2, 14, $noreg, def $cpsr, debug-location !1030; ../mulvdi3.c:43:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1030; ../mulvdi3.c:43:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.12, 11, killed $cpsr, debug-location !1031; ../mulvdi3.c:43:19
# Before:
not available
# After:
not available
## Instruction: B %bb.11, debug-location !1031; ../mulvdi3.c:43:19
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1032 :: (load (s32) from %stack.4); ../mulvdi3.c:43:28
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1032 :: (load (s32) from %stack.5); ../mulvdi3.c:43:28
# Before:
bot
# After:
not available
## Instruction: dead renamable $r1 = RSBri renamable $r1, 1, 14, $noreg, def $cpsr, debug-location !1032; ../mulvdi3.c:43:28
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = RSCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1032; ../mulvdi3.c:43:28
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.13, 11, killed $cpsr, debug-location !1033; ../mulvdi3.c:43:9
# Before:
not available
# After:
not available
## Instruction: B %bb.12, debug-location !1033; ../mulvdi3.c:43:9
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: B %bb.21, debug-location !1034; ../mulvdi3.c:44:9
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1035 :: (load (s32) from %stack.10); ../mulvdi3.c:45:12
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !1035 :: (load (s32) from %stack.6); ../mulvdi3.c:45:12
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1035 :: (load (s32) from %stack.11); ../mulvdi3.c:45:12
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 16, 14, $noreg, debug-location !1035 :: (load (s32) from %stack.7); ../mulvdi3.c:45:12
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrr renamable $r0, renamable $r3, 14, $noreg, $noreg, debug-location !1035; ../mulvdi3.c:45:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrr renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !1035; ../mulvdi3.c:45:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1035; ../mulvdi3.c:45:12
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1036; ../mulvdi3.c:45:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.17, 1, killed $cpsr, debug-location !1036; ../mulvdi3.c:45:9
# Before:
not available
# After:
not available
## Instruction: B %bb.14, debug-location !1036; ../mulvdi3.c:45:9
# Before:
not available
# After:
not available
### Basic Block: 14
## Instruction: $r3 = LDRi12 $sp, 28, 14, $noreg, debug-location !1037 :: (load (s32) from %stack.4); ../mulvdi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !1037 :: (load (s32) from %stack.5); ../mulvdi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MVNi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MVNi -2147483648, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1037; ../mulvdi3.c:47:25
# Before:
not available
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1037 :: (load (s32) from %stack.9); ../mulvdi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1037; ../mulvdi3.c:47:25
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1037 :: (load (s32) from %stack.8); ../mulvdi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1038; ../mulvdi3.c:47:19
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1038; ../mulvdi3.c:47:19
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.16, 10, killed $cpsr, debug-location !1039; ../mulvdi3.c:47:13
# Before:
not available
# After:
not available
## Instruction: B %bb.15, debug-location !1039; ../mulvdi3.c:47:13
# Before:
not available
# After:
not available
### Basic Block: 15
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1040 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1040 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 48, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1040; ../mulvdi3.c:48:13
# Before:
not available
# After:
not available
### Basic Block: 16
## Instruction: B %bb.20, debug-location !1041; ../mulvdi3.c:49:5
# Before:
not available
# After:
not available
### Basic Block: 17
## Instruction: $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1042 :: (load (s32) from %stack.4); ../mulvdi3.c:52:27
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1042 :: (load (s32) from %stack.5); ../mulvdi3.c:52:27
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !1042; ../mulvdi3.c:52:27
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = RSCri renamable $r0, 0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1042; ../mulvdi3.c:52:27
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi -2147483648, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1043; ../mulvdi3.c:52:25
# Before:
not available
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1043 :: (load (s32) from %stack.9); ../mulvdi3.c:52:25
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1043; ../mulvdi3.c:52:25
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1043 :: (load (s32) from %stack.8); ../mulvdi3.c:52:25
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1044; ../mulvdi3.c:52:19
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1044; ../mulvdi3.c:52:19
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.19, 10, killed $cpsr, debug-location !1045; ../mulvdi3.c:52:13
# Before:
not available
# After:
not available
## Instruction: B %bb.18, debug-location !1045; ../mulvdi3.c:52:13
# Before:
not available
# After:
not available
### Basic Block: 18
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1046 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1046 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 53, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1046; ../mulvdi3.c:53:13
# Before:
not available
# After:
not available
### Basic Block: 19
## Instruction: B %bb.20
# Before:
not available
# After:
not available
### Basic Block: 20
## Instruction: B %bb.21, debug-location !1047; ../mulvdi3.c:55:5
# Before:
not available
# After:
not available
### Basic Block: 21
## Instruction: $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !1048 :: (load (s32) from %stack.1); ../mulvdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $r11, -20, 14, $noreg, debug-location !1048 :: (load (s32) from %stack.2); ../mulvdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !1048 :: (load (s32) from %stack.0); ../mulvdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $lr = LDRi12 $r11, -24, 14, $noreg, debug-location !1048 :: (load (s32) from %stack.3); ../mulvdi3.c:0
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0, early-clobber renamable $r4 = UMULLv5 renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !1048; ../mulvdi3.c:0
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r12 = MLAv5 killed renamable $r1, killed renamable $lr, killed renamable $r4, 14, $noreg, $noreg, debug-location !1048; ../mulvdi3.c:0
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MLAv5 killed renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !1048; ../mulvdi3.c:0
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg, debug-location !1049; ../mulvdi3.c:56:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr, debug-location !1049; ../mulvdi3.c:56:1
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1049; ../mulvdi3.c:56:1
# Before:
not available
# After:
not available
### Basic Block: 22
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __mulvsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !1052; ../mulvsi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.5, 1, killed $cpsr, debug-location !1052; ../mulvsi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1052; ../mulvsi3.c:27:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1054 :: (load (s32) from %stack.1); ../mulvsi3.c:29:20
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1054; ../mulvsi3.c:29:20
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 0, killed $cpsr, debug-location !1054; ../mulvsi3.c:29:20
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1054; ../mulvsi3.c:29:20
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1056 :: (load (s32) from %stack.1); ../mulvsi3.c:29:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1056; ../mulvsi3.c:29:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !1056; ../mulvsi3.c:29:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !1056; ../mulvsi3.c:29:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.21, debug-location !1057; ../mulvsi3.c:30:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1058 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1058 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 31, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1058; ../mulvsi3.c:31:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1060 :: (load (s32) from %stack.1); ../mulvsi3.c:33:9
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !1060; ../mulvsi3.c:33:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.10, 1, killed $cpsr, debug-location !1060; ../mulvsi3.c:33:9
# Before:
not available
# After:
not available
## Instruction: B %bb.6, debug-location !1060; ../mulvsi3.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1062 :: (load (s32) from %stack.0); ../mulvsi3.c:35:20
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1062; ../mulvsi3.c:35:20
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 0, killed $cpsr, debug-location !1062; ../mulvsi3.c:35:20
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !1062; ../mulvsi3.c:35:20
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1064 :: (load (s32) from %stack.0); ../mulvsi3.c:35:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1064; ../mulvsi3.c:35:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.9, 1, killed $cpsr, debug-location !1064; ../mulvsi3.c:35:13
# Before:
not available
# After:
not available
## Instruction: B %bb.8, debug-location !1064; ../mulvsi3.c:35:13
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: B %bb.21, debug-location !1065; ../mulvsi3.c:36:13
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1066 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1066 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 37, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1066; ../mulvsi3.c:37:9
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !1067 :: (load (s32) from %stack.1); ../mulvsi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1067 :: (load (s32) from %stack.0); ../mulvsi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !1067; ../mulvsi3.c:39:19
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !1068; ../mulvsi3.c:40:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrsi killed renamable $r0, renamable $r1, 249, 14, $noreg, $noreg, debug-location !1069; ../mulvsi3.c:40:29
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsi renamable $r2, 249, 14, $noreg, $noreg, debug-location !1070; ../mulvsi3.c:41:19
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1071; ../mulvsi3.c:42:23
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1072; ../mulvsi3.c:42:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 2, 14, $noreg, implicit-def $cpsr, debug-location !1074; ../mulvsi3.c:43:19
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.12, 11, killed $cpsr, debug-location !1074; ../mulvsi3.c:43:19
# Before:
not available
# After:
not available
## Instruction: B %bb.11, debug-location !1074; ../mulvsi3.c:43:19
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1076 :: (load (s32) from %stack.2); ../mulvsi3.c:43:9
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1076; ../mulvsi3.c:43:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.13, 12, killed $cpsr, debug-location !1076; ../mulvsi3.c:43:9
# Before:
not available
# After:
not available
## Instruction: B %bb.12, debug-location !1076; ../mulvsi3.c:43:9
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: B %bb.21, debug-location !1077; ../mulvsi3.c:44:9
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1079 :: (load (s32) from %stack.5); ../mulvsi3.c:45:9
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1079 :: (load (s32) from %stack.3); ../mulvsi3.c:45:9
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1079; ../mulvsi3.c:45:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.17, 1, killed $cpsr, debug-location !1079; ../mulvsi3.c:45:9
# Before:
not available
# After:
not available
## Instruction: B %bb.14, debug-location !1079; ../mulvsi3.c:45:9
# Before:
not available
# After:
not available
### Basic Block: 14
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1080 :: (load (s32) from %stack.2); ../mulvsi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MVNi -2147483648, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1080; ../mulvsi3.c:47:25
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1080; ../mulvsi3.c:47:25
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1082 :: (load (s32) from %stack.4); ../mulvsi3.c:47:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1082; ../mulvsi3.c:47:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.16, 13, killed $cpsr, debug-location !1082; ../mulvsi3.c:47:13
# Before:
not available
# After:
not available
## Instruction: B %bb.15, debug-location !1082; ../mulvsi3.c:47:13
# Before:
not available
# After:
not available
### Basic Block: 15
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1083 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1083 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 48, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1083; ../mulvsi3.c:48:13
# Before:
not available
# After:
not available
### Basic Block: 16
## Instruction: B %bb.20, debug-location !1084; ../mulvsi3.c:49:5
# Before:
not available
# After:
not available
### Basic Block: 17
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1085 :: (load (s32) from %stack.2); ../mulvsi3.c:52:27
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !1085; ../mulvsi3.c:52:27
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi -2147483648, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1086; ../mulvsi3.c:52:25
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1086; ../mulvsi3.c:52:25
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1088 :: (load (s32) from %stack.4); ../mulvsi3.c:52:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1088; ../mulvsi3.c:52:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.19, 13, killed $cpsr, debug-location !1088; ../mulvsi3.c:52:13
# Before:
not available
# After:
not available
## Instruction: B %bb.18, debug-location !1088; ../mulvsi3.c:52:13
# Before:
not available
# After:
not available
### Basic Block: 18
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1089 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1089 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 53, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1089; ../mulvsi3.c:53:13
# Before:
not available
# After:
not available
### Basic Block: 19
## Instruction: B %bb.20
# Before:
not available
# After:
not available
### Basic Block: 20
## Instruction: B %bb.21, debug-location !1090; ../mulvsi3.c:55:5
# Before:
not available
# After:
not available
### Basic Block: 21
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1091 :: (load (s32) from %stack.0); ../mulvsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !1091 :: (load (s32) from %stack.1); ../mulvsi3.c:0
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MULv5 killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1091; ../mulvsi3.c:0
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1092; ../mulvsi3.c:56:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1092; ../mulvsi3.c:56:1
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1092; ../mulvsi3.c:56:1
# Before:
not available
# After:
not available
### Basic Block: 22
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __paritydi2
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !1095 :: (store (s32) into %ir.all + 4, basealign 8); ../paritydi2.c:23:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !1095 :: (store (s32) into %ir.all, align 8); ../paritydi2.c:23:11
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1098 :: (dereferenceable load (s32) from %ir.low, align 8); ../paritydi2.c:24:39
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1097 :: (dereferenceable load (s32) from %ir.high); ../paritydi2.c:24:28
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1099; ../paritydi2.c:24:33
# Before:
not available
# After:
not available
## Instruction: BL_pred @__paritysi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1100; ../paritydi2.c:24:12
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1101; ../paritydi2.c:24:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1101; ../paritydi2.c:24:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1101; ../paritydi2.c:24:5
# Before:
not available
# After:
not available
#### Function: __paritysi2
### Basic Block: 0
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1104; ../paritysi2.c:23:7
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1106; ../paritysi2.c:24:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1108; ../paritysi2.c:25:7
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDri killed renamable $r0, 15, 14, $noreg, $noreg, debug-location !1109; ../paritysi2.c:26:26
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVi 150, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = ORRri $r1, 26880, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !1111; ../paritysi2.c:26:34
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1112; ../paritysi2.c:26:5
# Before:
not available
# After:
not available
#### Function: __popcountdi2
### Basic Block: 0
## Instruction: $r2 = MOVr killed $r0, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: $r0 = MOVsi renamable $r1, 11, 14, $noreg, def $cpsr, debug-location !1114; ../popcountdi2.c:23:20
# Before:
not available
# After:
not available
## Instruction: $r3 = MOVsi renamable $r2, 5, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1114; ../popcountdi2.c:23:20
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !1115; ../popcountdi2.c:23:26
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = ANDrr killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !1115; ../popcountdi2.c:23:26
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = SUBrr killed renamable $r2, killed renamable $r3, 14, $noreg, def $cpsr, debug-location !1116; ../popcountdi2.c:23:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = SBCrr killed renamable $r1, killed renamable $r0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1116; ../popcountdi2.c:23:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r12, renamable $r3, 19, 14, $noreg, $noreg, debug-location !1118; ../popcountdi2.c:25:21
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrsi renamable $r12, renamable $r2, 19, 14, $noreg, $noreg, debug-location !1118; ../popcountdi2.c:25:21
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = ANDrr killed renamable $r3, renamable $r12, 14, $noreg, $noreg, debug-location !1119; ../popcountdi2.c:25:52
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r2, killed renamable $r12, 14, $noreg, $noreg, debug-location !1119; ../popcountdi2.c:25:52
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1120; ../popcountdi2.c:25:46
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1120; ../popcountdi2.c:25:46
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1122; ../popcountdi2.c:27:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1122; ../popcountdi2.c:27:14
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !1123; ../popcountdi2.c:27:27
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1123; ../popcountdi2.c:27:27
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1125; ../popcountdi2.c:29:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1128; ../popcountdi2.c:32:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1130; ../popcountdi2.c:35:15
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !1131; ../popcountdi2.c:35:27
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1132; ../popcountdi2.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
#### Function: __popcountsi2
### Basic Block: 0
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1135; ../popcountsi2.c:23:23
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1136; ../popcountsi2.c:23:11
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrsi renamable $r2, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1138; ../popcountsi2.c:25:19
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1139; ../popcountsi2.c:25:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1140; ../popcountsi2.c:25:33
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1142; ../popcountsi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1143; ../popcountsi2.c:27:24
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1145; ../popcountsi2.c:29:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1147; ../popcountsi2.c:32:15
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !1148; ../popcountsi2.c:32:27
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1149; ../popcountsi2.c:32:5
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
#### Function: __subvdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r12 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r12 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !1151; ../subvdi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SBCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1151; ../subvdi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !1153; ../subvdi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 4, killed $cpsr, debug-location !1153; ../subvdi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1153; ../subvdi3.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1154 :: (load (s32) from %stack.3); ../subvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1154 :: (load (s32) from %stack.0); ../subvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1154 :: (load (s32) from %stack.2); ../subvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1154 :: (load (s32) from %stack.1); ../subvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1154; ../subvdi3.c:27:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1154; ../subvdi3.c:27:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 10, killed $cpsr, debug-location !1155; ../subvdi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1155; ../subvdi3.c:27:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1156 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1156 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 28, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1156; ../subvdi3.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.7, debug-location !1157; ../subvdi3.c:29:5
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1158 :: (load (s32) from %stack.3); ../subvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1158 :: (load (s32) from %stack.0); ../subvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1158 :: (load (s32) from %stack.2); ../subvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1158 :: (load (s32) from %stack.1); ../subvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1158; ../subvdi3.c:32:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1158; ../subvdi3.c:32:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 11, killed $cpsr, debug-location !1159; ../subvdi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !1159; ../subvdi3.c:32:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1160 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1160 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1160; ../subvdi3.c:33:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: B %bb.7
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1161 :: (load (s32) from %stack.0); ../subvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1161 :: (load (s32) from %stack.1); ../subvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1161; ../subvdi3.c:35:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1161; ../subvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1161; ../subvdi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __subvsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1163; ../subvsi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1165; ../subvsi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 4, killed $cpsr, debug-location !1165; ../subvsi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1165; ../subvsi3.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1167 :: (load (s32) from %stack.0); ../subvsi3.c:27:13
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1167 :: (load (s32) from %stack.1); ../subvsi3.c:27:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1167; ../subvsi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 13, killed $cpsr, debug-location !1167; ../subvsi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1167; ../subvsi3.c:27:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1168 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1168 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 28, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1168; ../subvsi3.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.7, debug-location !1169; ../subvsi3.c:29:5
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1171 :: (load (s32) from %stack.0); ../subvsi3.c:32:13
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1171 :: (load (s32) from %stack.1); ../subvsi3.c:32:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1171; ../subvsi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 12, killed $cpsr, debug-location !1171; ../subvsi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !1171; ../subvsi3.c:32:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1172 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1172 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1172; ../subvsi3.c:33:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: B %bb.7
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1173 :: (load (s32) from %stack.0); ../subvsi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1173; ../subvsi3.c:35:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1173; ../subvsi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1173; ../subvsi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __ucmpdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !1176 :: (store (s32) into %ir.all + 4, basealign 8); ../ucmpdi2.c:26:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !1176 :: (store (s32) into %ir.all, align 8); ../ucmpdi2.c:26:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !1178 :: (store (s32) into %ir.all1 + 4, basealign 8); ../ucmpdi2.c:28:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !1178 :: (store (s32) into %ir.all1, align 8); ../ucmpdi2.c:28:11
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1180 :: (dereferenceable load (s32) from %ir.high); ../ucmpdi2.c:29:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1182 :: (dereferenceable load (s32) from %ir.high3); ../ucmpdi2.c:29:24
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1184; ../ucmpdi2.c:29:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 2, killed $cpsr, debug-location !1184; ../ucmpdi2.c:29:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1184; ../ucmpdi2.c:29:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1185; ../ucmpdi2.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1187 :: (dereferenceable load (s32) from %ir.high5); ../ucmpdi2.c:31:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1189 :: (dereferenceable load (s32) from %ir.high7); ../ucmpdi2.c:31:24
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1191; ../ucmpdi2.c:31:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 9, killed $cpsr, debug-location !1191; ../ucmpdi2.c:31:9
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !1191; ../ucmpdi2.c:31:9
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r0 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1192; ../ucmpdi2.c:32:9
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1193 :: (dereferenceable load (s32) from %ir.low, align 8); ../ucmpdi2.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1194 :: (dereferenceable load (s32) from %ir.low13, align 8); ../ucmpdi2.c:33:23
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1196; ../ucmpdi2.c:33:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 2, killed $cpsr, debug-location !1196; ../ucmpdi2.c:33:9
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !1196; ../ucmpdi2.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1197; ../ucmpdi2.c:34:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1198 :: (dereferenceable load (s32) from %ir.low18, align 8); ../ucmpdi2.c:35:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1199 :: (dereferenceable load (s32) from %ir.low20, align 8); ../ucmpdi2.c:35:23
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1201; ../ucmpdi2.c:35:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 9, killed $cpsr, debug-location !1201; ../ucmpdi2.c:35:9
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !1201; ../ucmpdi2.c:35:9
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: renamable $r0 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1202; ../ucmpdi2.c:36:9
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1203; ../ucmpdi2.c:37:5
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1204 :: (load (s32) from %stack.2); ../ucmpdi2.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !1205; ../ucmpdi2.c:38:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1205; ../ucmpdi2.c:38:1
# Before:
not available
# After:
not available
#### Function: __udivdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1211; ../udivdi3.c:22:12
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1211 :: (store (s32) into stack); ../udivdi3.c:22:12
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1211; ../udivdi3.c:22:12
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1212; ../udivdi3.c:22:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1212; ../udivdi3.c:22:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1212; ../udivdi3.c:22:5
# Before:
not available
# After:
not available
#### Function: __udivmoddi4
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 88, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r12, $r11, -36, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -4, 14, $noreg, debug-location !539 :: (store (s32) into %ir.all + 4, basealign 8); ../udivmoddi4.c:29:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -8, 14, $noreg, debug-location !539 :: (store (s32) into %ir.all, align 8); ../udivmoddi4.c:29:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r3, $r11, -12, 14, $noreg, debug-location !541 :: (store (s32) into %ir.all1 + 4, basealign 8); ../udivmoddi4.c:31:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, $r11, -16, 14, $noreg, debug-location !541 :: (store (s32) into %ir.all1, align 8); ../udivmoddi4.c:31:11
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !543 :: (dereferenceable load (s32) from %ir.high); ../udivmoddi4.c:36:13
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !545; ../udivmoddi4.c:36:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 1, killed $cpsr, debug-location !545; ../udivmoddi4.c:36:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !545; ../udivmoddi4.c:36:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !547 :: (dereferenceable load (s32) from %ir.high3); ../udivmoddi4.c:38:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !549; ../udivmoddi4.c:38:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.5, 1, killed $cpsr, debug-location !549; ../udivmoddi4.c:38:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !549; ../udivmoddi4.c:38:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !550 :: (load (s32) from %stack.4); ../udivmoddi4.c:44:17
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !550; ../udivmoddi4.c:44:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 0, killed $cpsr, debug-location !550; ../udivmoddi4.c:44:17
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !550; ../udivmoddi4.c:44:17
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !551 :: (dereferenceable load (s32) from %ir.low, align 8); ../udivmoddi4.c:45:28
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !552 :: (dereferenceable load (s32) from %ir.low9, align 8); ../udivmoddi4.c:45:38
# Before:
bot
# After:
not available
## Instruction: BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !553; ../udivmoddi4.c:45:32
# Before:
not available
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !553 :: (load (s32) from %stack.4); ../udivmoddi4.c:45:32
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !555 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:45:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !555 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:45:22
# Before:
bot
# After:
not available
## Instruction: B %bb.4, debug-location !556; ../udivmoddi4.c:45:17
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !557 :: (dereferenceable load (s32) from %ir.low12, align 8); ../udivmoddi4.c:46:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !558 :: (dereferenceable load (s32) from %ir.low14, align 8); ../udivmoddi4.c:46:34
# Before:
bot
# After:
not available
## Instruction: BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !559; ../udivmoddi4.c:46:28
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !559; ../udivmoddi4.c:46:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !561; ../udivmoddi4.c:46:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !562 :: (load (s32) from %stack.4); ../udivmoddi4.c:52:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !562; ../udivmoddi4.c:52:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.7, 0, killed $cpsr, debug-location !562; ../udivmoddi4.c:52:13
# Before:
not available
# After:
not available
## Instruction: B %bb.6, debug-location !562; ../udivmoddi4.c:52:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !563 :: (load (s32) from %stack.4); ../udivmoddi4.c:53:24
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !563 :: (dereferenceable load (s32) from %ir.low20, align 8); ../udivmoddi4.c:53:24
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !565 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:53:18
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !565 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:53:18
# Before:
bot
# After:
not available
## Instruction: B %bb.7, debug-location !566; ../udivmoddi4.c:53:13
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !567; ../udivmoddi4.c:54:9
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !568 :: (dereferenceable load (s32) from %ir.low25, align 8); ../udivmoddi4.c:57:13
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !570; ../udivmoddi4.c:57:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.26, 1, killed $cpsr, debug-location !570; ../udivmoddi4.c:57:9
# Before:
not available
# After:
not available
## Instruction: B %bb.9, debug-location !570; ../udivmoddi4.c:57:9
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !572 :: (dereferenceable load (s32) from %ir.high30); ../udivmoddi4.c:59:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !574; ../udivmoddi4.c:59:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.13, 1, killed $cpsr, debug-location !574; ../udivmoddi4.c:59:13
# Before:
not available
# After:
not available
## Instruction: B %bb.10, debug-location !574; ../udivmoddi4.c:59:13
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !575 :: (load (s32) from %stack.4); ../udivmoddi4.c:65:17
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !575; ../udivmoddi4.c:65:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.12, 0, killed $cpsr, debug-location !575; ../udivmoddi4.c:65:17
# Before:
not available
# After:
not available
## Instruction: B %bb.11, debug-location !575; ../udivmoddi4.c:65:17
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !577 :: (dereferenceable load (s32) from %ir.high37); ../udivmoddi4.c:66:28
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !578 :: (dereferenceable load (s32) from %ir.low39, align 8); ../udivmoddi4.c:66:39
# Before:
bot
# After:
not available
## Instruction: BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !579; ../udivmoddi4.c:66:33
# Before:
not available
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !579 :: (load (s32) from %stack.4); ../udivmoddi4.c:66:33
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !581 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:66:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !581 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:66:22
# Before:
bot
# After:
not available
## Instruction: B %bb.12, debug-location !582; ../udivmoddi4.c:66:17
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !584 :: (dereferenceable load (s32) from %ir.high44); ../udivmoddi4.c:67:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !585 :: (dereferenceable load (s32) from %ir.low46, align 8); ../udivmoddi4.c:67:35
# Before:
bot
# After:
not available
## Instruction: BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !586; ../udivmoddi4.c:67:29
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:67:29
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !588; ../udivmoddi4.c:67:13
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !589 :: (dereferenceable load (s32) from %ir.low51, align 8); ../udivmoddi4.c:70:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !591; ../udivmoddi4.c:70:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.17, 1, killed $cpsr, debug-location !591; ../udivmoddi4.c:70:13
# Before:
not available
# After:
not available
## Instruction: B %bb.14, debug-location !591; ../udivmoddi4.c:70:13
# Before:
not available
# After:
not available
### Basic Block: 14
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !592 :: (load (s32) from %stack.4); ../udivmoddi4.c:76:17
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !592; ../udivmoddi4.c:76:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.16, 0, killed $cpsr, debug-location !592; ../udivmoddi4.c:76:17
# Before:
not available
# After:
not available
## Instruction: B %bb.15, debug-location !592; ../udivmoddi4.c:76:17
# Before:
not available
# After:
not available
### Basic Block: 15
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !594 :: (dereferenceable load (s32) from %ir.high58); ../udivmoddi4.c:78:32
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !596 :: (dereferenceable load (s32) from %ir.high60); ../udivmoddi4.c:78:43
# Before:
bot
# After:
not available
## Instruction: BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !597; ../udivmoddi4.c:78:37
# Before:
not available
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !597 :: (load (s32) from %stack.4); ../udivmoddi4.c:78:37
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !600 :: (store (s32) into %ir.high63); ../udivmoddi4.c:78:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !602 :: (store (s32) into %ir.low65, align 8); ../udivmoddi4.c:79:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !603 :: (dereferenceable load (s32) from %ir.all66, align 8); ../udivmoddi4.c:80:26
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !603 :: (dereferenceable load (s32) from %ir.all66 + 4, basealign 8); ../udivmoddi4.c:80:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !604 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:80:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !604 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:80:22
# Before:
bot
# After:
not available
## Instruction: B %bb.16, debug-location !605; ../udivmoddi4.c:81:13
# Before:
not available
# After:
not available
### Basic Block: 16
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !607 :: (dereferenceable load (s32) from %ir.high69); ../udivmoddi4.c:82:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !609 :: (dereferenceable load (s32) from %ir.high71); ../udivmoddi4.c:82:35
# Before:
bot
# After:
not available
## Instruction: BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !610; ../udivmoddi4.c:82:29
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !610; ../udivmoddi4.c:82:29
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !612; ../udivmoddi4.c:82:13
# Before:
not available
# After:
not available
### Basic Block: 17
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !614 :: (dereferenceable load (s32) from %ir.high78); ../udivmoddi4.c:88:18
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !617; ../udivmoddi4.c:88:35
# Before:
not available
# After:
not available
## Instruction: TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !620; ../udivmoddi4.c:88:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.21, 1, killed $cpsr, debug-location !620; ../udivmoddi4.c:88:13
# Before:
not available
# After:
not available
## Instruction: B %bb.18, debug-location !620; ../udivmoddi4.c:88:13
# Before:
not available
# After:
not available
### Basic Block: 18
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !621 :: (load (s32) from %stack.4); ../udivmoddi4.c:90:17
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !621; ../udivmoddi4.c:90:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.20, 0, killed $cpsr, debug-location !621; ../udivmoddi4.c:90:17
# Before:
not available
# After:
not available
## Instruction: B %bb.19, debug-location !621; ../udivmoddi4.c:90:17
# Before:
not available
# After:
not available
### Basic Block: 19
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !622 :: (load (s32) from %stack.4); ../udivmoddi4.c:92:31
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !622 :: (dereferenceable load (s32) from %ir.low85, align 8); ../udivmoddi4.c:92:31
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !624 :: (store (s32) into %ir.low87, align 8); ../udivmoddi4.c:92:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !626 :: (dereferenceable load (s32) from %ir.high89); ../udivmoddi4.c:93:32
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !628 :: (dereferenceable load (s32) from %ir.high91); ../udivmoddi4.c:93:44
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !629; ../udivmoddi4.c:93:49
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !630; ../udivmoddi4.c:93:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !633 :: (store (s32) into %ir.high95); ../udivmoddi4.c:93:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !634 :: (dereferenceable load (s32) from %ir.all96, align 8); ../udivmoddi4.c:94:26
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !634 :: (dereferenceable load (s32) from %ir.all96 + 4, basealign 8); ../udivmoddi4.c:94:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !635 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:94:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !635 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:94:22
# Before:
bot
# After:
not available
## Instruction: B %bb.20, debug-location !636; ../udivmoddi4.c:95:13
# Before:
not available
# After:
not available
### Basic Block: 20
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !638 :: (dereferenceable load (s32) from %ir.high99); ../udivmoddi4.c:96:24
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !640 :: (dereferenceable load (s32) from %ir.high101); ../udivmoddi4.c:96:50
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r2, 1, 14, $noreg, $noreg, debug-location !641; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = BICrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !641; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = ANDrsi killed renamable $r2, renamable $r1, 11, 14, $noreg, $noreg, debug-location !641; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !641; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = ANDrsi renamable $r3, renamable $r1, 19, 14, $noreg, $noreg, debug-location !641; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !641; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !641; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !641; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !641; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !641; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVsi killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !641; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !642; ../udivmoddi4.c:96:29
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !644; ../udivmoddi4.c:96:13
# Before:
not available
# After:
not available
### Basic Block: 21
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !646 :: (dereferenceable load (s32) from %ir.high105); ../udivmoddi4.c:102:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !647; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !649 :: (dereferenceable load (s32) from %ir.high107); ../udivmoddi4.c:102:58
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !650; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !651; ../udivmoddi4.c:102:38
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.7)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !653; ../udivmoddi4.c:104:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.25, 3, killed $cpsr, debug-location !653; ../udivmoddi4.c:104:13
# Before:
not available
# After:
not available
## Instruction: B %bb.22, debug-location !653; ../udivmoddi4.c:104:13
# Before:
not available
# After:
not available
### Basic Block: 22
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !654 :: (load (s32) from %stack.4); ../udivmoddi4.c:106:16
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !654; ../udivmoddi4.c:106:16
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.24, 0, killed $cpsr, debug-location !654; ../udivmoddi4.c:106:16
# Before:
not available
# After:
not available
## Instruction: B %bb.23, debug-location !654; ../udivmoddi4.c:106:16
# Before:
not available
# After:
not available
### Basic Block: 23
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !655 :: (load (s32) from %stack.4); ../udivmoddi4.c:107:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !655 :: (dereferenceable load (s32) from %ir.all114, align 8); ../udivmoddi4.c:107:26
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !655 :: (dereferenceable load (s32) from %ir.all114 + 4, basealign 8); ../udivmoddi4.c:107:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !656 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:107:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !656 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:107:22
# Before:
bot
# After:
not available
## Instruction: B %bb.24, debug-location !657; ../udivmoddi4.c:107:17
# Before:
not available
# After:
not available
### Basic Block: 24
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !658; ../udivmoddi4.c:108:13
# Before:
not available
# After:
not available
### Basic Block: 25
## Instruction: $r2 = LDRi12 $sp, 40, 14, $noreg, debug-location !659 :: (load (s32) from %stack.7); ../udivmoddi4.c:110:9
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !659; ../udivmoddi4.c:110:9
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !661 :: (store (s32) into %ir.low118, align 8); ../udivmoddi4.c:113:17
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !662 :: (dereferenceable load (s32) from %ir.low120, align 8); ../udivmoddi4.c:114:24
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !663; ../udivmoddi4.c:114:45
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVsr killed renamable $r1, renamable $r3, 2, 14, $noreg, $noreg, debug-location !664; ../udivmoddi4.c:114:28
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !667 :: (store (s32) into %ir.high123); ../udivmoddi4.c:114:18
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !669 :: (dereferenceable load (s32) from %ir.high125); ../udivmoddi4.c:116:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsr killed renamable $r1, renamable $r0, 3, 14, $noreg, $noreg, debug-location !670; ../udivmoddi4.c:116:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !673 :: (store (s32) into %ir.high128); ../udivmoddi4.c:116:18
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !678 :: (dereferenceable load (s32) from %ir.low134, align 8); ../udivmoddi4.c:117:60
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !675 :: (dereferenceable load (s32) from %ir.high130); ../udivmoddi4.c:117:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsr killed renamable $r1, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !677; ../udivmoddi4.c:117:29
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !680; ../udivmoddi4.c:117:53
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !682 :: (store (s32) into %ir.low137, align 8); ../udivmoddi4.c:117:17
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: B %bb.49, debug-location !683; ../udivmoddi4.c:118:5
# Before:
not available
# After:
not available
### Basic Block: 26
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !685 :: (dereferenceable load (s32) from %ir.high139); ../udivmoddi4.c:121:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !687; ../udivmoddi4.c:121:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.40, 1, killed $cpsr, debug-location !687; ../udivmoddi4.c:121:13
# Before:
not available
# After:
not available
## Instruction: B %bb.27, debug-location !687; ../udivmoddi4.c:121:13
# Before:
not available
# After:
not available
### Basic Block: 27
## Instruction: renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !688 :: (dereferenceable load (s32) from %ir.low144, align 8); ../udivmoddi4.c:127:22
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !690; ../udivmoddi4.c:127:17
# Before:
not available
# After:
not available
## Instruction: TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !690; ../udivmoddi4.c:127:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.33, 1, killed $cpsr, debug-location !690; ../udivmoddi4.c:127:17
# Before:
not available
# After:
not available
## Instruction: B %bb.28, debug-location !690; ../udivmoddi4.c:127:17
# Before:
not available
# After:
not available
### Basic Block: 28
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !691 :: (load (s32) from %stack.4); ../udivmoddi4.c:129:21
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !691; ../udivmoddi4.c:129:21
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.30, 0, killed $cpsr, debug-location !691; ../udivmoddi4.c:129:21
# Before:
not available
# After:
not available
## Instruction: B %bb.29, debug-location !691; ../udivmoddi4.c:129:21
# Before:
not available
# After:
not available
### Basic Block: 29
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !692 :: (load (s32) from %stack.4); ../udivmoddi4.c:130:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !692 :: (dereferenceable load (s32) from %ir.low155, align 8); ../udivmoddi4.c:130:32
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !693 :: (dereferenceable load (s32) from %ir.low157, align 8); ../udivmoddi4.c:130:43
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !694; ../udivmoddi4.c:130:47
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !695; ../udivmoddi4.c:130:36
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !697 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:130:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !697 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:130:26
# Before:
bot
# After:
not available
## Instruction: B %bb.30, debug-location !698; ../udivmoddi4.c:130:21
# Before:
not available
# After:
not available
### Basic Block: 30
## Instruction: renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !699 :: (dereferenceable load (s32) from %ir.low163, align 8); ../udivmoddi4.c:131:25
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !701; ../udivmoddi4.c:131:21
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.32, 1, killed $cpsr, debug-location !701; ../udivmoddi4.c:131:21
# Before:
not available
# After:
not available
## Instruction: B %bb.31, debug-location !701; ../udivmoddi4.c:131:21
# Before:
not available
# After:
not available
### Basic Block: 31
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !702 :: (dereferenceable load (s32) from %ir.all167, align 8); ../udivmoddi4.c:132:30
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !702 :: (dereferenceable load (s32) from %ir.all167 + 4, basealign 8); ../udivmoddi4.c:132:30
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !703; ../udivmoddi4.c:132:21
# Before:
not available
# After:
not available
### Basic Block: 32
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !704 :: (dereferenceable load (s32) from %ir.low170, align 8); ../udivmoddi4.c:133:40
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !705; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !705; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !705; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !705; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !705; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !705; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !705; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !705; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !705; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r12 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !705; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsi renamable $r12, 195, 14, $noreg, $noreg, debug-location !705; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !707 :: (dereferenceable load (s32) from %ir.high172); ../udivmoddi4.c:134:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !708; ../udivmoddi4.c:134:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !711 :: (store (s32) into %ir.high175); ../udivmoddi4.c:134:26
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !716 :: (dereferenceable load (s32) from %ir.low181, align 8); ../udivmoddi4.c:135:68
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !713 :: (dereferenceable load (s32) from %ir.high177); ../udivmoddi4.c:135:32
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = MOVi 32, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = nuw nsw SUBrsi killed renamable $r3, killed renamable $r12, 195, 14, $noreg, $noreg, debug-location !714; ../udivmoddi4.c:135:54
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !715; ../udivmoddi4.c:135:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !718; ../udivmoddi4.c:135:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !720 :: (store (s32) into %ir.low185, align 8); ../udivmoddi4.c:135:25
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !721 :: (dereferenceable load (s32) from %ir.all186, align 8); ../udivmoddi4.c:136:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !721 :: (dereferenceable load (s32) from %ir.all186 + 4, basealign 8); ../udivmoddi4.c:136:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !722; ../udivmoddi4.c:136:17
# Before:
not available
# After:
not available
### Basic Block: 33
## Instruction: renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !723 :: (dereferenceable load (s32) from %ir.low189, align 8); ../udivmoddi4.c:142:55
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !727 :: (dereferenceable load (s32) from %ir.high191); ../udivmoddi4.c:142:80
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !728; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !729; ../udivmoddi4.c:142:60
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDri killed renamable $r0, 33, 14, $noreg, $noreg, debug-location !729; ../udivmoddi4.c:142:60
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.9)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !731; ../udivmoddi4.c:147:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.35, 1, killed $cpsr, debug-location !731; ../udivmoddi4.c:147:17
# Before:
not available
# After:
not available
## Instruction: B %bb.34, debug-location !731; ../udivmoddi4.c:147:17
# Before:
not available
# After:
not available
### Basic Block: 34
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 renamable $r0, $r11, -24, 14, $noreg, debug-location !733 :: (store (s32) into %ir.low197, align 8); ../udivmoddi4.c:149:25
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !734 :: (dereferenceable load (s32) from %ir.low199, align 8); ../udivmoddi4.c:150:32
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !737 :: (store (s32) into %ir.high201); ../udivmoddi4.c:150:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !740 :: (store (s32) into %ir.high203); ../udivmoddi4.c:151:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !742 :: (dereferenceable load (s32) from %ir.high205); ../udivmoddi4.c:152:31
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !744 :: (store (s32) into %ir.low207, align 8); ../udivmoddi4.c:152:25
# Before:
bot
# After:
not available
## Instruction: B %bb.39, debug-location !745; ../udivmoddi4.c:153:13
# Before:
not available
# After:
not available
### Basic Block: 35
## Instruction: $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !747 :: (load (s32) from %stack.9); ../udivmoddi4.c:154:22
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !747; ../udivmoddi4.c:154:22
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.37, 8, killed $cpsr, debug-location !747; ../udivmoddi4.c:154:22
# Before:
not available
# After:
not available
## Instruction: B %bb.36, debug-location !747; ../udivmoddi4.c:154:22
# Before:
not available
# After:
not available
### Basic Block: 36
## Instruction: $r2 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !749 :: (store (s32) into %ir.low213, align 8); ../udivmoddi4.c:156:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !750 :: (dereferenceable load (s32) from %ir.low215, align 8); ../udivmoddi4.c:157:32
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !751; ../udivmoddi4.c:157:53
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !752; ../udivmoddi4.c:157:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !755 :: (store (s32) into %ir.high219); ../udivmoddi4.c:157:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !757 :: (dereferenceable load (s32) from %ir.high221); ../udivmoddi4.c:158:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !758; ../udivmoddi4.c:158:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !761 :: (store (s32) into %ir.high224); ../udivmoddi4.c:158:26
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !766 :: (dereferenceable load (s32) from %ir.low230, align 8); ../udivmoddi4.c:159:68
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !763 :: (dereferenceable load (s32) from %ir.high226); ../udivmoddi4.c:159:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !765; ../udivmoddi4.c:159:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !768; ../udivmoddi4.c:159:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !770 :: (store (s32) into %ir.low234, align 8); ../udivmoddi4.c:159:25
# Before:
bot
# After:
not available
## Instruction: B %bb.38, debug-location !771; ../udivmoddi4.c:160:13
# Before:
not available
# After:
not available
### Basic Block: 37
## Instruction: $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !772 :: (load (s32) from %stack.9); ../udivmoddi4.c:163:31
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !772 :: (dereferenceable load (s32) from %ir.low237, align 8); ../udivmoddi4.c:163:31
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r1, 64, 14, $noreg, $noreg, debug-location !773; ../udivmoddi4.c:163:53
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !774; ../udivmoddi4.c:163:35
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !776 :: (store (s32) into %ir.low241, align 8); ../udivmoddi4.c:163:25
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !781 :: (dereferenceable load (s32) from %ir.low247, align 8); ../udivmoddi4.c:165:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !778 :: (dereferenceable load (s32) from %ir.high243); ../udivmoddi4.c:164:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !780; ../udivmoddi4.c:164:38
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !782; ../udivmoddi4.c:165:44
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r2, renamable $r1, 3, 14, $noreg, $noreg, debug-location !784; ../udivmoddi4.c:164:63
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !787 :: (store (s32) into %ir.high252); ../udivmoddi4.c:164:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !790 :: (store (s32) into %ir.high254); ../udivmoddi4.c:166:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !792 :: (dereferenceable load (s32) from %ir.high256); ../udivmoddi4.c:167:31
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !794; ../udivmoddi4.c:167:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !796 :: (store (s32) into %ir.low260, align 8); ../udivmoddi4.c:167:25
# Before:
bot
# After:
not available
## Instruction: B %bb.38
# Before:
not available
# After:
not available
### Basic Block: 38
## Instruction: B %bb.39
# Before:
not available
# After:
not available
### Basic Block: 39
## Instruction: $r0 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
# Before:
bot
# After:
not available
## Instruction: B %bb.48, debug-location !797; ../udivmoddi4.c:169:9
# Before:
not available
# After:
not available
### Basic Block: 40
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !799 :: (dereferenceable load (s32) from %ir.high265); ../udivmoddi4.c:176:36
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !800; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !802 :: (dereferenceable load (s32) from %ir.high267); ../udivmoddi4.c:176:62
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !803; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !804; ../udivmoddi4.c:176:42
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.11)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !806; ../udivmoddi4.c:178:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.44, 3, killed $cpsr, debug-location !806; ../udivmoddi4.c:178:17
# Before:
not available
# After:
not available
## Instruction: B %bb.41, debug-location !806; ../udivmoddi4.c:178:17
# Before:
not available
# After:
not available
### Basic Block: 41
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !807 :: (load (s32) from %stack.4); ../udivmoddi4.c:180:21
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !807; ../udivmoddi4.c:180:21
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.43, 0, killed $cpsr, debug-location !807; ../udivmoddi4.c:180:21
# Before:
not available
# After:
not available
## Instruction: B %bb.42, debug-location !807; ../udivmoddi4.c:180:21
# Before:
not available
# After:
not available
### Basic Block: 42
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !808 :: (load (s32) from %stack.4); ../udivmoddi4.c:181:30
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !808 :: (dereferenceable load (s32) from %ir.all274, align 8); ../udivmoddi4.c:181:30
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !808 :: (dereferenceable load (s32) from %ir.all274 + 4, basealign 8); ../udivmoddi4.c:181:30
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !809 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:181:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !809 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:181:26
# Before:
bot
# After:
not available
## Instruction: B %bb.43, debug-location !810; ../udivmoddi4.c:181:21
# Before:
not available
# After:
not available
### Basic Block: 43
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !811; ../udivmoddi4.c:182:17
# Before:
not available
# After:
not available
### Basic Block: 44
## Instruction: $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !812 :: (load (s32) from %stack.11); ../udivmoddi4.c:184:13
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !812; ../udivmoddi4.c:184:13
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.12)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !814 :: (store (s32) into %ir.low279, align 8); ../udivmoddi4.c:187:21
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !816; ../udivmoddi4.c:188:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.46, 1, killed $cpsr, debug-location !816; ../udivmoddi4.c:188:17
# Before:
not available
# After:
not available
## Instruction: B %bb.45, debug-location !816; ../udivmoddi4.c:188:17
# Before:
not available
# After:
not available
### Basic Block: 45
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !817 :: (dereferenceable load (s32) from %ir.low284, align 8); ../udivmoddi4.c:190:32
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !820 :: (store (s32) into %ir.high286); ../udivmoddi4.c:190:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !823 :: (store (s32) into %ir.high288); ../udivmoddi4.c:191:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !825 :: (dereferenceable load (s32) from %ir.high290); ../udivmoddi4.c:192:31
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !827 :: (store (s32) into %ir.low292, align 8); ../udivmoddi4.c:192:25
# Before:
bot
# After:
not available
## Instruction: B %bb.47, debug-location !828; ../udivmoddi4.c:193:13
# Before:
not available
# After:
not available
### Basic Block: 46
## Instruction: $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !829 :: (load (s32) from %stack.12); ../udivmoddi4.c:196:32
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !829 :: (load (s32) from %stack.11); ../udivmoddi4.c:196:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !829 :: (dereferenceable load (s32) from %ir.low295, align 8); ../udivmoddi4.c:196:32
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r1, 31, 14, $noreg, $noreg, debug-location !830; ../udivmoddi4.c:196:53
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !831; ../udivmoddi4.c:196:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !834 :: (store (s32) into %ir.high299); ../udivmoddi4.c:196:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !836 :: (dereferenceable load (s32) from %ir.high301); ../udivmoddi4.c:197:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !837; ../udivmoddi4.c:197:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !840 :: (store (s32) into %ir.high304); ../udivmoddi4.c:197:26
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !845 :: (dereferenceable load (s32) from %ir.low310, align 8); ../udivmoddi4.c:198:68
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !842 :: (dereferenceable load (s32) from %ir.high306); ../udivmoddi4.c:198:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !844; ../udivmoddi4.c:198:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !847; ../udivmoddi4.c:198:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !849 :: (store (s32) into %ir.low314, align 8); ../udivmoddi4.c:198:25
# Before:
bot
# After:
not available
## Instruction: B %bb.47
# Before:
not available
# After:
not available
### Basic Block: 47
## Instruction: $r0 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.12)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
# Before:
bot
# After:
not available
## Instruction: B %bb.48
# Before:
not available
# After:
not available
### Basic Block: 48
## Instruction: $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !850 :: (load (s32) from %stack.10); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: B %bb.49
# Before:
not available
# After:
not available
### Basic Block: 49
## Instruction: $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !850 :: (load (s32) from %stack.8); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
# Before:
bot
# After:
not available
## Instruction: B %bb.50, debug-location !851; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
### Basic Block: 50
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !850 :: (load (s32) from %stack.14); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !850 :: (load (s32) from %stack.13); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.16)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.15)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !851; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.53, 0, killed $cpsr, debug-location !851; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
## Instruction: B %bb.51, debug-location !851; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
### Basic Block: 51
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !855 :: (load (s32) from %stack.16); ../udivmoddi4.c:212:43
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -32, 14, $noreg, debug-location !855 :: (dereferenceable load (s32) from %ir.low324, align 8); ../udivmoddi4.c:212:43
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !854 :: (dereferenceable load (s32) from %ir.high321); ../udivmoddi4.c:212:25
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !856; ../udivmoddi4.c:212:36
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !856; ../udivmoddi4.c:212:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, $r11, -28, 14, $noreg, debug-location !859 :: (store (s32) into %ir.high328); ../udivmoddi4.c:212:18
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !861 :: (dereferenceable load (s32) from %ir.high333); ../udivmoddi4.c:213:43
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !862; ../udivmoddi4.c:213:36
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, killed renamable $r2, 251, 14, $noreg, $noreg, debug-location !862; ../udivmoddi4.c:213:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !864 :: (store (s32) into %ir.low337, align 8); ../udivmoddi4.c:213:18
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !867 :: (dereferenceable load (s32) from %ir.low342, align 8); ../udivmoddi4.c:214:43
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !866 :: (dereferenceable load (s32) from %ir.high339); ../udivmoddi4.c:214:25
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !868; ../udivmoddi4.c:214:36
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !868; ../udivmoddi4.c:214:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, $r11, -20, 14, $noreg, debug-location !871 :: (store (s32) into %ir.high346); ../udivmoddi4.c:214:18
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !873; ../udivmoddi4.c:215:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !875 :: (store (s32) into %ir.low352, align 8); ../udivmoddi4.c:215:18
# Before:
bot
# After:
not available
## Instruction: renamable $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !876 :: (dereferenceable load (s32) from %ir.all354, align 8); ../udivmoddi4.c:223:37
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !876 :: (dereferenceable load (s32) from %ir.all354 + 4, basealign 8); ../udivmoddi4.c:223:37
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !877 :: (dereferenceable load (s32) from %ir.all355, align 8); ../udivmoddi4.c:223:45
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -28, 14, $noreg, debug-location !877 :: (dereferenceable load (s32) from %ir.all355 + 4, basealign 8); ../udivmoddi4.c:223:45
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = MVNr renamable $r1, 14, $noreg, $noreg, debug-location !878; ../udivmoddi4.c:223:49
# Before:
not available
# After:
not available
## Instruction: renamable $lr = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !878; ../udivmoddi4.c:223:49
# Before:
not available
# After:
not available
## Instruction: dead renamable $lr = ADDrr renamable $r12, killed renamable $lr, 14, $noreg, def $cpsr, debug-location !878; ../udivmoddi4.c:223:49
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = ADCrr renamable $r2, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !878; ../udivmoddi4.c:223:49
# Before:
not available
# After:
not available
## Instruction: STRi12 $r3, $sp, 0, 14, $noreg :: (store (s32) into %stack.17)
# Before:
bot
# After:
not available
## Instruction: renamable $r12 = SUBrr renamable $r0, killed renamable $r12, 14, $noreg, def $cpsr, debug-location !881; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = SBCrr renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !881; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !881; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr killed renamable $r12, 4, killed $cpsr, $noreg, implicit renamable $r0, debug-location !881; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !881; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed renamable $r2, 4, killed $cpsr, $noreg, implicit renamable $r1, debug-location !881; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !881 :: (store (s32) into %ir.all363 + 4, basealign 8); ../udivmoddi4.c:225:15
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !881 :: (store (s32) into %ir.all363, align 8); ../udivmoddi4.c:225:15
# Before:
bot
# After:
not available
## Instruction: B %bb.52, debug-location !882; ../udivmoddi4.c:226:5
# Before:
not available
# After:
not available
### Basic Block: 52
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !883 :: (load (s32) from %stack.15); ../udivmoddi4.c:224:19
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !883 :: (load (s32) from %stack.17); ../udivmoddi4.c:224:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !883; ../udivmoddi4.c:224:19
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:209:20
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
# Before:
bot
# After:
not available
## Instruction: B %bb.50, debug-location !851; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
### Basic Block: 53
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !887 :: (load (s32) from %stack.4); ../udivmoddi4.c:227:16
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !887 :: (load (s32) from %stack.16); ../udivmoddi4.c:227:16
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !887 :: (dereferenceable load (s32) from %ir.all365, align 8); ../udivmoddi4.c:227:16
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -20, 14, $noreg, debug-location !887 :: (dereferenceable load (s32) from %ir.all365 + 4, basealign 8); ../udivmoddi4.c:227:16
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:227:20
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r3, 251, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:227:20
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsi renamable $r2, killed renamable $r3, 10, 14, $noreg, $noreg, debug-location !890; ../udivmoddi4.c:227:26
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, $r11, -24, 14, $noreg, debug-location !892 :: (store (s32) into %ir.all369, align 8); ../udivmoddi4.c:227:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !892 :: (store (s32) into %ir.all369 + 4, basealign 8); ../udivmoddi4.c:227:11
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !893; ../udivmoddi4.c:228:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.55, 0, killed $cpsr, debug-location !893; ../udivmoddi4.c:228:9
# Before:
not available
# After:
not available
## Instruction: B %bb.54, debug-location !893; ../udivmoddi4.c:228:9
# Before:
not available
# After:
not available
### Basic Block: 54
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !894 :: (load (s32) from %stack.4); ../udivmoddi4.c:229:18
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !894 :: (dereferenceable load (s32) from %ir.all372, align 8); ../udivmoddi4.c:229:18
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !894 :: (dereferenceable load (s32) from %ir.all372 + 4, basealign 8); ../udivmoddi4.c:229:18
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !895 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:229:14
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !895 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:229:14
# Before:
bot
# After:
not available
## Instruction: B %bb.55, debug-location !896; ../udivmoddi4.c:229:9
# Before:
not available
# After:
not available
### Basic Block: 55
## Instruction: renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !897 :: (dereferenceable load (s32) from %ir.all374, align 8); ../udivmoddi4.c:230:14
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !897 :: (dereferenceable load (s32) from %ir.all374 + 4, basealign 8); ../udivmoddi4.c:230:14
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !898; ../udivmoddi4.c:230:5
# Before:
not available
# After:
not available
### Basic Block: 56
## Instruction: $r0 = LDRi12 $sp, 44, 14, $noreg, debug-location !850 :: (load (s32) from %stack.6); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -40, 14, $noreg, debug-location !850 :: (load (s32) from %stack.5); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !899; ../udivmoddi4.c:231:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !899; ../udivmoddi4.c:231:1
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !899; ../udivmoddi4.c:231:1
# Before:
not available
# After:
not available
### Basic Block: 57
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __udivmodsi4
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1214; ../udivmodsi4.c:22:14
# Before:
not available
# After:
not available
## Instruction: $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !1214 :: (load (s32) from %stack.2); ../udivmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1214 :: (load (s32) from %stack.1); ../udivmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1214 :: (load (s32) from %stack.0); ../udivmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r3 = MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !1215; ../udivmodsi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1216; ../udivmodsi4.c:23:12
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !1217 :: (store (s32) into %ir.rem); ../udivmodsi4.c:23:8
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1218; ../udivmodsi4.c:24:3
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1218; ../udivmodsi4.c:24:3
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1218; ../udivmodsi4.c:24:3
# Before:
not available
# After:
not available
#### Function: __udivsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 64, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1221; ../udivsi3.c:32:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 1, killed $cpsr, debug-location !1221; ../udivsi3.c:32:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1221; ../udivsi3.c:32:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1222; ../udivsi3.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1224 :: (load (s32) from %stack.0); ../udivsi3.c:34:9
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1224; ../udivsi3.c:34:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !1224; ../udivsi3.c:34:9
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !1224; ../udivsi3.c:34:9
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1225; ../udivsi3.c:35:9
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1226 :: (load (s32) from %stack.1); ../udivsi3.c:36:10
# Before:
bot
# After:
not available
## Instruction: BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1226; ../udivsi3.c:36:10
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1226; ../udivsi3.c:36:10
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r1, $r11, -20, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1227; ../udivsi3.c:36:29
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1227; ../udivsi3.c:36:29
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1228 :: (load (s32) from %stack.4); ../udivsi3.c:36:27
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1228; ../udivsi3.c:36:27
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $r11, -16, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1230; ../udivsi3.c:38:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 3, killed $cpsr, debug-location !1230; ../udivsi3.c:38:9
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !1230; ../udivsi3.c:38:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1231; ../udivsi3.c:39:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !1233 :: (load (s32) from %stack.3); ../udivsi3.c:40:9
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !1233; ../udivsi3.c:40:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 1, killed $cpsr, debug-location !1233; ../udivsi3.c:40:9
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !1233; ../udivsi3.c:40:9
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1234; ../udivsi3.c:41:9
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1235 :: (load (s32) from %stack.0); ../udivsi3.c:42:5
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !1235 :: (load (s32) from %stack.3); ../udivsi3.c:42:5
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !1235; ../udivsi3.c:42:5
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !1236; ../udivsi3.c:45:28
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r0, killed renamable $r2, 2, 14, $noreg, $noreg, debug-location !1237; ../udivsi3.c:45:11
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r0, renamable $r1, 3, 14, $noreg, $noreg, debug-location !1238; ../udivsi3.c:46:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1239; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !1240 :: (load (s32) from %stack.8); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 32, 14, $noreg, debug-location !1240 :: (load (s32) from %stack.7); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -28, 14, $noreg, debug-location !1240 :: (load (s32) from %stack.6); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1240 :: (load (s32) from %stack.5); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.12)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.11)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 20, 14, $noreg :: (store (s32) into %stack.10)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.9)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1239; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.12, 0, killed $cpsr, debug-location !1239; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
## Instruction: B %bb.10, debug-location !1239; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1242 :: (load (s32) from %stack.1); ../udivsi3.c:51:22
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !1242 :: (load (s32) from %stack.9); ../udivsi3.c:51:22
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1242 :: (load (s32) from %stack.10); ../udivsi3.c:51:22
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r0, 10, 14, $noreg, $noreg, debug-location !1242; ../udivsi3.c:51:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r2, 251, 14, $noreg, $noreg, debug-location !1242; ../udivsi3.c:51:22
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.14)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !1243; ../udivsi3.c:60:41
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1243; ../udivsi3.c:60:41
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.13)
# Before:
bot
# After:
not available
## Instruction: B %bb.11, debug-location !1244; ../udivsi3.c:63:5
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !1246 :: (load (s32) from %stack.11); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 12, 14, $noreg, debug-location !1246 :: (load (s32) from %stack.12); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $r12 = LDRi12 $sp, 24, 14, $noreg, debug-location !1246 :: (load (s32) from %stack.9); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1246 :: (load (s32) from %stack.13); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1246 :: (load (s32) from %stack.14); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $lr = LDRi12 $r11, -8, 14, $noreg, debug-location !1246 :: (load (s32) from %stack.1); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: renamable $lr = SUBrr renamable $r2, renamable $lr, 14, $noreg, $noreg, debug-location !1246; ../udivsi3.c:62:11
# Before:
not available
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1246; ../udivsi3.c:62:11
# Before:
not available
# After:
not available
## Instruction: $r2 = MOVr killed renamable $lr, 4, killed $cpsr, $noreg, implicit renamable $r2, debug-location !1246; ../udivsi3.c:62:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !1247; ../udivsi3.c:61:19
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = ORRrsi renamable $r3, renamable $r12, 10, 14, $noreg, $noreg, debug-location !1249; ../udivsi3.c:52:22
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1250; ../udivsi3.c:48:20
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1239; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1253 :: (load (s32) from %stack.12); ../udivsi3.c:64:18
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1253 :: (load (s32) from %stack.9); ../udivsi3.c:64:18
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi renamable $r0, renamable $r1, 10, 14, $noreg, $noreg, debug-location !1253; ../udivsi3.c:64:18
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1254; ../udivsi3.c:65:5
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1240 :: (load (s32) from %stack.2); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1255; ../udivsi3.c:66:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1255; ../udivsi3.c:66:1
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1255; ../udivsi3.c:66:1
# Before:
not available
# After:
not available
#### Function: __umoddi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1257; ../umoddi3.c:23:5
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1257 :: (store (s32) into stack); ../umoddi3.c:23:5
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1257; ../umoddi3.c:23:5
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1258 :: (dereferenceable load (s32) from %ir.r, align 8); ../umoddi3.c:24:12
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1258 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../umoddi3.c:24:12
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1259; ../umoddi3.c:24:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1259; ../umoddi3.c:24:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1259; ../umoddi3.c:24:5
# Before:
not available
# After:
not available
#### Function: __umodsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1261; ../umodsi3.c:22:16
# Before:
not available
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !1261 :: (load (s32) from %stack.1); ../umodsi3.c:22:16
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1261; ../umodsi3.c:22:16
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1262 :: (load (s32) from %stack.0); ../umodsi3.c:22:32
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1262; ../umodsi3.c:22:32
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1263; ../umodsi3.c:22:14
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1264; ../umodsi3.c:22:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1264; ../umodsi3.c:22:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1264; ../umodsi3.c:22:5
# Before:
not available
# After:
not available
#### Function: compilerrt_abort_impl
### Basic Block: 0
#### Function: ludcmp_fabs
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Function call at location ludcmp_test_BB5_I6 |->
      [
       Call of function ludcmp_fabs |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: VSTRD $d0, $sp, 2, 14, $noreg :: (store (s64) into %stack.0)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Function call at location ludcmp_test_BB5_I6 |->
      [
       Call of function ludcmp_fabs |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc08,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: VCMPZD renamable $d0, 14, $noreg, implicit-def $fpscr_nzcv, debug-location !184; batchtest/ludcmp/ludcmp.c:88:8
# Before:
not available
# After:
not available
## Instruction: FMSTAT 14, $noreg, implicit-def $cpsr, implicit killed $fpscr_nzcv, debug-location !184; batchtest/ludcmp/ludcmp.c:88:8
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 11, killed $cpsr, debug-location !184; batchtest/ludcmp/ludcmp.c:88:8
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !184; batchtest/ludcmp/ludcmp.c:88:8
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $d0 = VLDRD $sp, 2, 14, $noreg :: (load (s64) from %stack.0)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Function call at location ludcmp_test_BB5_I6 |->
      [
       Call of function ludcmp_fabs |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc08,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 0, 14, $noreg :: (store (s64) into %stack.1)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Function call at location ludcmp_test_BB5_I6 |->
      [
       Call of function ludcmp_fabs |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc08,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.3, debug-location !185; batchtest/ludcmp/ludcmp.c:89:5
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $d0 = VLDRD $sp, 2, 14, $noreg, debug-location !186 :: (load (s64) from %stack.0); batchtest/ludcmp/ludcmp.c:91:9
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Function call at location ludcmp_test_BB5_I6 |->
      [
       Call of function ludcmp_fabs |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc08,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $d0 = VNEGD renamable $d0, 14, $noreg, debug-location !186; batchtest/ludcmp/ludcmp.c:91:9
# Before:
not available
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 0, 14, $noreg :: (store (s64) into %stack.1)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Function call at location ludcmp_test_BB5_I6 |->
      [
       Call of function ludcmp_fabs |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc08,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.3
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $d0 = VLDRD $sp, 0, 14, $noreg, debug-location !187 :: (load (s64) from %stack.1); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Function call at location ludcmp_test_BB5_I6 |->
      [
       Call of function ludcmp_fabs |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc08,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 16, 14, $noreg, $noreg, debug-location !188; batchtest/ludcmp/ludcmp.c:93:3
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $d0, debug-location !188; batchtest/ludcmp/ludcmp.c:93:3
# Before:
not available
# After:
not available
#### Function: ludcmp_init
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 48, 14, $noreg, $noreg
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{}
  ]
]
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 renamable $r0, $sp, 44, 14, $noreg, debug-location !129 :: (volatile store (s32) into %ir.x); batchtest/ludcmp/ludcmp.c:47:19
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{}
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.1)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
  ]
]
# After:
not available
## Instruction: B %bb.1, debug-location !130; batchtest/ludcmp/ludcmp.c:50:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $sp, 40, 14, $noreg, debug-location !131 :: (load (s32) from %stack.1); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.2)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: CMPri renamable $r0, 2, 14, $noreg, implicit-def $cpsr, debug-location !133; batchtest/ludcmp/ludcmp.c:50:3
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.14, 0, killed $cpsr, debug-location !133; batchtest/ludcmp/ludcmp.c:50:3
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !133; batchtest/ludcmp/ludcmp.c:50:3
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $d0 = VLDRD %const.0, 0, 14, $noreg :: (load (s64) from constant-pool)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 6, 14, $noreg :: (store (s64) into %stack.4)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.3)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.3, debug-location !134; batchtest/ludcmp/ludcmp.c:53:11
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $d0 = VLDRD $sp, 6, 14, $noreg, debug-location !131 :: (load (s64) from %stack.4); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !131 :: (load (s32) from %stack.3); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.6)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 4, 14, $noreg :: (store (s64) into %stack.5)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !136; batchtest/ludcmp/ludcmp.c:53:5
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.10, 0, killed $cpsr, debug-location !136; batchtest/ludcmp/ludcmp.c:53:5
# Before:
not available
# After:
not available
## Instruction: B %bb.4, debug-location !136; batchtest/ludcmp/ludcmp.c:53:5
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !137 :: (load (s32) from %stack.2); batchtest/ludcmp/ludcmp.c:54:38
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !137 :: (load (s32) from %stack.6); batchtest/ludcmp/ludcmp.c:54:38
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = nuw ADDrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !137; batchtest/ludcmp/ludcmp.c:54:38
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nuw ADDri killed renamable $r2, 2, 14, $noreg, $noreg, debug-location !137; batchtest/ludcmp/ludcmp.c:54:38
# Before:
not available
# After:
not available
## Instruction: $s0 = VMOVSR killed $r2, 14, $noreg, debug-location !138; batchtest/ludcmp/ludcmp.c:54:28
# Before:
not available
# After:
not available
## Instruction: renamable $d0 = VSITOD killed renamable $s0, 14, $noreg, debug-location !138; batchtest/ludcmp/ludcmp.c:54:28
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRi12 %const.1, 0, 14, $noreg, debug-location !139 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:54:7
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = MOVi 400, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r2 = MLAv5 renamable $r0, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !139; batchtest/ludcmp/ludcmp.c:54:7
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ADDrsi killed renamable $r2, renamable $r1, 26, 14, $noreg, $noreg, debug-location !139; batchtest/ludcmp/ludcmp.c:54:7
# Before:
not available
# After:
not available
## Instruction: VSTRD killed renamable $d0, killed renamable $r2, 0, 14, $noreg, debug-location !140 :: (store (s64) into %ir.arrayidx6); batchtest/ludcmp/ludcmp.c:54:26
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !142; batchtest/ludcmp/ludcmp.c:56:12
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 1, killed $cpsr, debug-location !142; batchtest/ludcmp/ludcmp.c:56:12
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !142; batchtest/ludcmp/ludcmp.c:56:12
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !143 :: (load (s32) from %stack.6); batchtest/ludcmp/ludcmp.c:57:9
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 36, 14, $noreg, debug-location !143 :: (load (s32) from %stack.2); batchtest/ludcmp/ludcmp.c:57:9
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r12 = LDRi12 %const.1, 0, 14, $noreg, debug-location !143 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:57:9
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = MOVi 400, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = MLAv5 renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !143; batchtest/ludcmp/ludcmp.c:57:9
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 26, 14, $noreg, $noreg, debug-location !143; batchtest/ludcmp/ludcmp.c:57:9
# Before:
not available
# After:
not available
## Instruction: renamable $d0 = VLDRD renamable $r0, 0, 14, $noreg, debug-location !144 :: (load (s64) from %ir.arrayidx10); batchtest/ludcmp/ludcmp.c:57:28
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $d1 = VLDRD %const.2, 0, 14, $noreg :: (load (s64) from constant-pool)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $d0 = VMULD killed renamable $d0, killed renamable $d1, 14, $noreg, debug-location !144; batchtest/ludcmp/ludcmp.c:57:28
# Before:
not available
# After:
not available
## Instruction: VSTRD killed renamable $d0, killed renamable $r0, 0, 14, $noreg, debug-location !144 :: (store (s64) into %ir.arrayidx10); batchtest/ludcmp/ludcmp.c:57:28
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.6, debug-location !143; batchtest/ludcmp/ludcmp.c:57:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $d0 = VLDRD $sp, 4, 14, $noreg, debug-location !145 :: (load (s64) from %stack.5); batchtest/ludcmp/ludcmp.c:58:12
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !145 :: (load (s32) from %stack.6); batchtest/ludcmp/ludcmp.c:58:12
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 36, 14, $noreg, debug-location !145 :: (load (s32) from %stack.2); batchtest/ludcmp/ludcmp.c:58:12
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r12 = LDRi12 %const.1, 0, 14, $noreg, debug-location !145 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:58:12
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = MOVi 400, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = MLAv5 renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !145; batchtest/ludcmp/ludcmp.c:58:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 26, 14, $noreg, $noreg, debug-location !145; batchtest/ludcmp/ludcmp.c:58:12
# Before:
not available
# After:
not available
## Instruction: renamable $d1 = VLDRD killed renamable $r0, 0, 14, $noreg, debug-location !145 :: (load (s64) from %ir.arrayidx12); batchtest/ludcmp/ludcmp.c:58:12
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $d0 = VADDD renamable $d0, killed renamable $d1, 14, $noreg, debug-location !146; batchtest/ludcmp/ludcmp.c:58:9
# Before:
not available
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 0, 14, $noreg :: (store (s64) into %stack.7)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 44, 14, $noreg, debug-location !147 :: (volatile dereferenceable load (s32) from %ir.x); batchtest/ludcmp/ludcmp.c:60:12
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !147; batchtest/ludcmp/ludcmp.c:60:12
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 0, killed $cpsr, debug-location !147; batchtest/ludcmp/ludcmp.c:60:12
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !147; batchtest/ludcmp/ludcmp.c:60:12
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !148 :: (load (s32) from %stack.6); batchtest/ludcmp/ludcmp.c:61:31
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 36, 14, $noreg, debug-location !148 :: (load (s32) from %stack.2); batchtest/ludcmp/ludcmp.c:61:31
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $s0 = VLDRS $sp, 11, 14, $noreg, debug-location !148 :: (volatile dereferenceable load (s32) from %ir.x); batchtest/ludcmp/ludcmp.c:61:31
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $d1 = VSITOD killed renamable $s0, 14, $noreg, debug-location !148; batchtest/ludcmp/ludcmp.c:61:31
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRi12 %const.1, 0, 14, $noreg, debug-location !149 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:61:9
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = MOVi 400, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = MLAv5 renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !149; batchtest/ludcmp/ludcmp.c:61:9
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 26, 14, $noreg, $noreg, debug-location !149; batchtest/ludcmp/ludcmp.c:61:9
# Before:
not available
# After:
not available
## Instruction: renamable $d0 = VLDRD renamable $r0, 0, 14, $noreg, debug-location !150 :: (load (s64) from %ir.arrayidx17); batchtest/ludcmp/ludcmp.c:61:28
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $d0 = VADDD killed renamable $d0, killed renamable $d1, 14, $noreg, debug-location !150; batchtest/ludcmp/ludcmp.c:61:28
# Before:
not available
# After:
not available
## Instruction: VSTRD killed renamable $d0, killed renamable $r0, 0, 14, $noreg, debug-location !150 :: (store (s64) into %ir.arrayidx17); batchtest/ludcmp/ludcmp.c:61:28
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.8, debug-location !149; batchtest/ludcmp/ludcmp.c:61:9
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: B %bb.9, debug-location !151; batchtest/ludcmp/ludcmp.c:62:5
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: $d0 = VLDRD $sp, 0, 14, $noreg, debug-location !152 :: (load (s64) from %stack.7); batchtest/ludcmp/ludcmp.c:53:27
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !152 :: (load (s32) from %stack.6); batchtest/ludcmp/ludcmp.c:53:27
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !152; batchtest/ludcmp/ludcmp.c:53:27
# Before:
not available
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 6, 14, $noreg :: (store (s64) into %stack.4)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.3)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}
      ]

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      [
       Loop Peeling: Backedges {(BB9, BB3)} in function ludcmp_init taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0x0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffd4 |-> 0x0
0x7ffffe8 |-> 0x0
0x7fffff4 |-> 0x0
}

       Loop Iteration: Backedges {(BB9, BB3)} in function ludcmp_init taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.3, debug-location !136; batchtest/ludcmp/ludcmp.c:53:5
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $d0 = VLDRD $sp, 4, 14, $noreg, debug-location !155 :: (load (s64) from %stack.5); batchtest/ludcmp/ludcmp.c:64:5
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !155 :: (load (s32) from %stack.2); batchtest/ludcmp/ludcmp.c:64:5
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = LDRi12 %const.3, 0, 14, $noreg, debug-location !155 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:64:5
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 26, 14, $noreg, $noreg, debug-location !155; batchtest/ludcmp/ludcmp.c:64:5
# Before:
not available
# After:
not available
## Instruction: VSTRD renamable $d0, killed renamable $r0, 0, 14, $noreg, debug-location !156 :: (store (s64) into %ir.arrayidx20); batchtest/ludcmp/ludcmp.c:64:19
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> 0xd4e20,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 44, 14, $noreg, debug-location !157 :: (volatile dereferenceable load (s32) from %ir.x); batchtest/ludcmp/ludcmp.c:65:10
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> 0xd4e20,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !157; batchtest/ludcmp/ludcmp.c:65:10
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.12, 0, killed $cpsr, debug-location !157; batchtest/ludcmp/ludcmp.c:65:10
# Before:
not available
# After:
not available
## Instruction: B %bb.11, debug-location !157; batchtest/ludcmp/ludcmp.c:65:10
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !158 :: (load (s32) from %stack.2); batchtest/ludcmp/ludcmp.c:66:24
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $s0 = VLDRS $sp, 11, 14, $noreg, debug-location !158 :: (volatile dereferenceable load (s32) from %ir.x); batchtest/ludcmp/ludcmp.c:66:24
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $d1 = VSITOD killed renamable $s0, 14, $noreg, debug-location !158; batchtest/ludcmp/ludcmp.c:66:24
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = LDRi12 %const.3, 0, 14, $noreg, debug-location !159 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:66:7
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 26, 14, $noreg, $noreg, debug-location !159; batchtest/ludcmp/ludcmp.c:66:7
# Before:
not available
# After:
not available
## Instruction: renamable $d0 = VLDRD renamable $r0, 0, 14, $noreg, debug-location !160 :: (load (s64) from %ir.arrayidx24); batchtest/ludcmp/ludcmp.c:66:21
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> 0xd4e20,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $d0 = VADDD killed renamable $d0, killed renamable $d1, 14, $noreg, debug-location !160; batchtest/ludcmp/ludcmp.c:66:21
# Before:
not available
# After:
not available
## Instruction: VSTRD killed renamable $d0, killed renamable $r0, 0, 14, $noreg, debug-location !160 :: (store (s64) into %ir.arrayidx24); batchtest/ludcmp/ludcmp.c:66:21
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> 0xd4e20,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.12, debug-location !159; batchtest/ludcmp/ludcmp.c:66:7
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: B %bb.13, debug-location !161; batchtest/ludcmp/ludcmp.c:67:3
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !162 :: (load (s32) from %stack.2); batchtest/ludcmp/ludcmp.c:50:25
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !162; batchtest/ludcmp/ludcmp.c:50:25
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.1)
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function ludcmp_init |->
    [
     Loop Peeling: Backedges {(BB13, BB1)} in function ludcmp_init taken 0 times |->
      Leaf:
[0 |-> 0x1,
 1 |-> 0x0,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7ffffec |-> 0x0
0x7fffff0 |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB13, BB1)} in function ludcmp_init taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffc8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.1, debug-location !133; batchtest/ludcmp/ludcmp.c:50:3
# Before:
not available
# After:
not available
### Basic Block: 14
## Instruction: $sp = frame-destroy ADDri killed $sp, 48, 14, $noreg, $noreg, debug-location !164; batchtest/ludcmp/ludcmp.c:68:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, debug-location !164; batchtest/ludcmp/ludcmp.c:68:1
# Before:
not available
# After:
not available
### Basic Block: 15
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 8
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 8
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: ludcmp_main
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function ludcmp_main |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{0x7fffff4 |-> 0x0
}
  ]
]
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $d0 = VLDRD %const.0, 0, 14, $noreg :: (load (s64) from constant-pool)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function ludcmp_main |->
    Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff0,
 12 |-> top,
 13 |-> 0x7fffff0,
 14 |-> top,
 15 |-> top]
{0x7fffff0 |-> 0x7fffff8
}
  ]
]
# After:
not available
## Instruction: BL_pred @ludcmp_test, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $d0, implicit-def $sp, implicit-def $r0, debug-location !287; batchtest/ludcmp/ludcmp.c:168:19
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !288 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:168:17
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function ludcmp_main |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff0,
 12 |-> top,
 13 |-> 0x7fffff0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !288 :: (store (s32) into @ludcmp_chkerr); batchtest/ludcmp/ludcmp.c:168:17
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function ludcmp_main |->
    Leaf:
[0 |-> top,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff0,
 12 |-> top,
 13 |-> 0x7fffff0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !289; batchtest/ludcmp/ludcmp.c:169:1
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function ludcmp_main |->
    Leaf:
[0 |-> top,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff0,
 12 |-> top,
 13 |-> 0x7fffff0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: BX_RET 14, $noreg, debug-location !289; batchtest/ludcmp/ludcmp.c:169:1
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 8
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: ludcmp_return
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> top,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !166 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:73:21
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> top,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: renamable $s0 = VLDRS killed renamable $r0, 0, 14, $noreg, debug-location !166 :: (dereferenceable load (s32) from @ludcmp_chkerr); batchtest/ludcmp/ludcmp.c:73:21
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> 0xd4fb0, @ludcmp_chkerr,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: renamable $d0 = VSITOD killed renamable $s0, 14, $noreg, debug-location !166; batchtest/ludcmp/ludcmp.c:73:21
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 6, 14, $noreg :: (store (s64) into %stack.1)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> 0x0,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.0)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> 0x0,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: B %bb.1, debug-location !167; batchtest/ludcmp/ludcmp.c:76:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $d0 = VLDRD $sp, 6, 14, $noreg, debug-location !168 :: (load (s64) from %stack.1); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function ludcmp_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function ludcmp_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !168 :: (load (s32) from %stack.0); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function ludcmp_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function ludcmp_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.3)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function ludcmp_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function ludcmp_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 4, 14, $noreg :: (store (s64) into %stack.2)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function ludcmp_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffdc |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function ludcmp_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: CMPri renamable $r0, 2, 14, $noreg, implicit-def $cpsr, debug-location !170; batchtest/ludcmp/ludcmp.c:76:3
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 0, killed $cpsr, debug-location !170; batchtest/ludcmp/ludcmp.c:76:3
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !170; batchtest/ludcmp/ludcmp.c:76:3
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: B %bb.3, debug-location !171; batchtest/ludcmp/ludcmp.c:77:5
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !172 :: (load (s32) from %stack.3); batchtest/ludcmp/ludcmp.c:77:17
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function ludcmp_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffdc |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function ludcmp_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: $d0 = VLDRD $sp, 4, 14, $noreg, debug-location !172 :: (load (s64) from %stack.2); batchtest/ludcmp/ludcmp.c:77:17
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function ludcmp_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffdc |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function ludcmp_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !172 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:77:17
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function ludcmp_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0xd4fb0, @ludcmp_chkerr,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffdc |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function ludcmp_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r0, 26, 14, $noreg, $noreg, debug-location !172; batchtest/ludcmp/ludcmp.c:77:17
# Before:
not available
# After:
not available
## Instruction: renamable $d1 = VLDRD killed renamable $r1, 0, 14, $noreg, debug-location !172 :: (load (s64) from %ir.arrayidx); batchtest/ludcmp/ludcmp.c:77:17
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function ludcmp_return taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0xd4fb8,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffdc |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function ludcmp_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $d0 = VADDD renamable $d0, killed renamable $d1, 14, $noreg, debug-location !173; batchtest/ludcmp/ludcmp.c:77:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !174; batchtest/ludcmp/ludcmp.c:76:25
# Before:
not available
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 6, 14, $noreg :: (store (s64) into %stack.1)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function ludcmp_return taken 0 times |->
      Leaf:
[0 |-> 0x1,
 1 |-> 0xd4fb8,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffdc |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function ludcmp_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.0)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function ludcmp_return taken 0 times |->
      Leaf:
[0 |-> 0x1,
 1 |-> 0xd4fb8,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffdc |-> 0x0
0x7fffff4 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function ludcmp_return taken at least 1 times |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.1, debug-location !170; batchtest/ludcmp/ludcmp.c:76:3
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $d0 = VLDRD $sp, 4, 14, $noreg :: (load (s64) from %stack.2)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: renamable $d1 = VLDRD %const.2, 0, 14, $noreg :: (load (s64) from constant-pool)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: renamable $d0 = VADDD renamable $d0, killed renamable $d1, 14, $noreg, debug-location !177; batchtest/ludcmp/ludcmp.c:80:12
# Before:
not available
# After:
not available
## Instruction: VSTRD $d0, $sp, 0, 14, $noreg :: (store (s64) into %stack.5)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: renamable $r0 = MVNi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $d1 = VLDRD %const.3, 0, 14, $noreg :: (load (s64) from constant-pool)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> 0xffffffff,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: VCMPD renamable $d0, killed renamable $d1, 14, $noreg, implicit-def $fpscr_nzcv, debug-location !179; batchtest/ludcmp/ludcmp.c:81:34
# Before:
not available
# After:
not available
## Instruction: FMSTAT 14, $noreg, implicit-def $cpsr, implicit killed $fpscr_nzcv, debug-location !179; batchtest/ludcmp/ludcmp.c:81:34
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.4)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> 0xffffffff,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: Bcc %bb.6, 5, killed $cpsr, debug-location !179; batchtest/ludcmp/ludcmp.c:81:34
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !179; batchtest/ludcmp/ludcmp.c:81:34
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $d0 = VLDRD $sp, 0, 14, $noreg :: (load (s64) from %stack.5)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> 0xffffffff,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffd8 |-> 0xffffffff
}
  ]
]
# After:
not available
## Instruction: renamable $d1 = VLDRD %const.4, 0, 14, $noreg :: (load (s64) from constant-pool)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> 0xffffffff,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffd8 |-> 0xffffffff
}
  ]
]
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: VCMPD renamable $d0, killed renamable $d1, 14, $noreg, implicit-def $fpscr_nzcv
# Before:
not available
# After:
not available
## Instruction: FMSTAT 14, $noreg, implicit-def $cpsr, implicit killed $fpscr_nzcv
# Before:
not available
# After:
not available
## Instruction: $r0 = MVNi 0, 13, killed $cpsr, $noreg, implicit renamable $r0
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.4)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffd8 |-> 0xffffffff
}
  ]
]
# After:
not available
## Instruction: B %bb.6
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg :: (load (s32) from %stack.4)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function ludcmp_return |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7ffffd0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
  ]
]
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !181; batchtest/ludcmp/ludcmp.c:81:3
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !181; batchtest/ludcmp/ludcmp.c:81:3
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 8
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 8
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 4, %const.4, 8
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: ludcmp_test
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r5, killed $r11, killed $lr
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff0,
 12 |-> top,
 13 |-> 0x7fffff0,
 14 |-> top,
 15 |-> top]
{0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 968, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 38, 14, $noreg :: (store (s64) into %stack.2)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 164, 14, $noreg :: (store (s32) into %stack.1)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: CMPri renamable $r0, 99, 14, $noreg, implicit-def $cpsr, debug-location !191; batchtest/ludcmp/ludcmp.c:102:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 12, killed $cpsr, debug-location !191; batchtest/ludcmp/ludcmp.c:102:15
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !191; batchtest/ludcmp/ludcmp.c:102:15
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $d0 = VLDRD $sp, 38, 14, $noreg, debug-location !193 :: (load (s64) from %stack.2); batchtest/ludcmp/ludcmp.c:102:8
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: VCMPZD renamable $d0, 14, $noreg, implicit-def $fpscr_nzcv, debug-location !193; batchtest/ludcmp/ludcmp.c:102:8
# Before:
not available
# After:
not available
## Instruction: FMSTAT 14, $noreg, implicit-def $cpsr, implicit killed $fpscr_nzcv, debug-location !193; batchtest/ludcmp/ludcmp.c:102:8
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 8, killed $cpsr, debug-location !193; batchtest/ludcmp/ludcmp.c:102:8
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !193; batchtest/ludcmp/ludcmp.c:102:8
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = MOVi 231, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r0 = ORRri $r0, 768, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 148, 14, $noreg :: (store (s32) into %stack.3)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.38, debug-location !194; batchtest/ludcmp/ludcmp.c:103:5
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 164, 14, $noreg, debug-location !195 :: (load (s32) from %stack.1); batchtest/ludcmp/ludcmp.c:106:9
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r1 = ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !195; batchtest/ludcmp/ludcmp.c:106:9
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 132, 14, $noreg :: (store (s32) into %stack.7)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> 0x2,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = BICrsi renamable $r0, renamable $r0, 249, 14, $noreg, $noreg, debug-location !195; batchtest/ludcmp/ludcmp.c:106:9
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 136, 14, $noreg :: (store (s32) into %stack.6)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> top,
 1 |-> 0x2,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 140, 14, $noreg :: (store (s32) into %stack.5)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 144, 14, $noreg :: (store (s32) into %stack.4)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.4, debug-location !195; batchtest/ludcmp/ludcmp.c:106:9
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r1 = LDRi12 $sp, 136, 14, $noreg, debug-location !196 :: (load (s32) from %stack.6); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 140, 14, $noreg, debug-location !196 :: (load (s32) from %stack.5); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 144, 14, $noreg, debug-location !196 :: (load (s32) from %stack.4); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x1,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 124, 14, $noreg :: (store (s32) into %stack.9)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x1,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 128, 14, $noreg :: (store (s32) into %stack.8)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x1,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !198; batchtest/ludcmp/ludcmp.c:106:3
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.21, 0, killed $cpsr, debug-location !198; batchtest/ludcmp/ludcmp.c:106:3
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !198; batchtest/ludcmp/ludcmp.c:106:3
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r1 = LDRi12 $sp, 124, 14, $noreg, debug-location !199 :: (load (s32) from %stack.9); batchtest/ludcmp/ludcmp.c:107:23
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x1,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = LDRi12 %const.0, 0, 14, $noreg, debug-location !199 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:107:23
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> 0x1,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = MOVi 400, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = MLAv5 renamable $r1, killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !199; batchtest/ludcmp/ludcmp.c:107:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 26, 14, $noreg, $noreg, debug-location !199; batchtest/ludcmp/ludcmp.c:107:23
# Before:
not available
# After:
not available
## Instruction: renamable $d0 = VLDRD killed renamable $r0, 0, 14, $noreg, debug-location !199 :: (load (s64) from %ir.arrayidx3); batchtest/ludcmp/ludcmp.c:107:23
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: BL_pred @ludcmp_fabs, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !200; batchtest/ludcmp/ludcmp.c:107:10
# Before:
not available
# After:
not available
## Instruction: $d1 = VLDRD $sp, 38, 14, $noreg, debug-location !200 :: (load (s64) from %stack.2); batchtest/ludcmp/ludcmp.c:107:10
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: VCMPD killed renamable $d0, renamable $d1, 14, $noreg, implicit-def $fpscr_nzcv, debug-location !200; batchtest/ludcmp/ludcmp.c:107:10
# Before:
not available
# After:
not available
## Instruction: FMSTAT 14, $noreg, implicit-def $cpsr, implicit killed $fpscr_nzcv, debug-location !200; batchtest/ludcmp/ludcmp.c:107:10
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.7, 8, killed $cpsr, debug-location !200; batchtest/ludcmp/ludcmp.c:107:10
# Before:
not available
# After:
not available
## Instruction: B %bb.6, debug-location !200; batchtest/ludcmp/ludcmp.c:107:10
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 148, 14, $noreg :: (store (s32) into %stack.3)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.38, debug-location !202; batchtest/ludcmp/ludcmp.c:108:7
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r0 = LDRi12 $sp, 124, 14, $noreg :: (load (s32) from %stack.9)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 120, 14, $noreg :: (store (s32) into %stack.10)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.8, debug-location !203; batchtest/ludcmp/ludcmp.c:111:11
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: $r1 = LDRi12 $sp, 164, 14, $noreg :: (load (s32) from %stack.1)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc90 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 120, 14, $noreg :: (load (s32) from %stack.10)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc90 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !196; batchtest/ludcmp/ludcmp.c:0
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 116, 14, $noreg :: (store (s32) into %stack.11)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc90 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: CMPrr killed renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !205; batchtest/ludcmp/ludcmp.c:111:5
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.11, 0, killed $cpsr, debug-location !205; batchtest/ludcmp/ludcmp.c:111:5
# Before:
not available
# After:
not available
## Instruction: B %bb.9, debug-location !205; batchtest/ludcmp/ludcmp.c:111:5
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: $r2 = LDRi12 $sp, 124, 14, $noreg, debug-location !206 :: (load (s32) from %stack.9); batchtest/ludcmp/ludcmp.c:112:11
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc8c |-> 0x1
0x7fffc90 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 116, 14, $noreg, debug-location !206 :: (load (s32) from %stack.11); batchtest/ludcmp/ludcmp.c:112:11
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc8c |-> 0x1
0x7fffc90 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r12 = LDRi12 %const.0, 0, 14, $noreg, debug-location !206 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:112:11
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc8c |-> 0x1
0x7fffc90 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = MOVi 400, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = MLAv5 renamable $r1, renamable $r3, renamable $r12, 14, $noreg, $noreg, debug-location !206; batchtest/ludcmp/ludcmp.c:112:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r2, 26, 14, $noreg, $noreg, debug-location !206; batchtest/ludcmp/ludcmp.c:112:11
# Before:
not available
# After:
not available
## Instruction: renamable $d0 = VLDRD renamable $r0, 0, 14, $noreg, debug-location !206 :: (load (s64) from %ir.arrayidx11); batchtest/ludcmp/ludcmp.c:112:11
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc8c |-> 0x1
0x7fffc90 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: early-clobber renamable $r1 = MLAv5 renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !207; batchtest/ludcmp/ludcmp.c:120:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r2, 26, 14, $noreg, $noreg, debug-location !207; batchtest/ludcmp/ludcmp.c:120:32
# Before:
not available
# After:
not available
## Instruction: renamable $d1 = VLDRD killed renamable $r1, 0, 14, $noreg, debug-location !207 :: (load (s64) from %ir.arrayidx13); batchtest/ludcmp/ludcmp.c:120:32
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc8c |-> 0x1
0x7fffc90 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $d0 = VDIVD killed renamable $d0, killed renamable $d1, 14, $noreg, debug-location !208; batchtest/ludcmp/ludcmp.c:120:30
# Before:
not available
# After:
not available
## Instruction: VSTRD killed renamable $d0, killed renamable $r0, 0, 14, $noreg, debug-location !210 :: (store (s64) into %ir.arrayidx15); batchtest/ludcmp/ludcmp.c:120:26
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc8c |-> 0x1
0x7fffc90 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.10, debug-location !211; batchtest/ludcmp/ludcmp.c:121:5
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $r0 = LDRi12 $sp, 116, 14, $noreg :: (load (s32) from %stack.11)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc8c |-> 0x1
0x7fffc90 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 120, 14, $noreg :: (store (s32) into %stack.10)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc8c |-> 0x1
0x7fffc90 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB10, BB8)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB10, BB8)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.8, debug-location !205; batchtest/ludcmp/ludcmp.c:111:5
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: $r0 = LDRi12 $sp, 124, 14, $noreg :: (load (s32) from %stack.9)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 112, 14, $noreg :: (store (s32) into %stack.12)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.12, debug-location !213; batchtest/ludcmp/ludcmp.c:124:11
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: $r1 = LDRi12 $sp, 164, 14, $noreg :: (load (s32) from %stack.1)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 112, 14, $noreg :: (load (s32) from %stack.12)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !196; batchtest/ludcmp/ludcmp.c:0
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 108, 14, $noreg :: (store (s32) into %stack.13)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: CMPrr killed renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !215; batchtest/ludcmp/ludcmp.c:124:5
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.19, 0, killed $cpsr, debug-location !215; batchtest/ludcmp/ludcmp.c:124:5
# Before:
not available
# After:
not available
## Instruction: B %bb.13, debug-location !215; batchtest/ludcmp/ludcmp.c:124:5
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: $r1 = LDRi12 $sp, 108, 14, $noreg, debug-location !217 :: (load (s32) from %stack.13); batchtest/ludcmp/ludcmp.c:125:11
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 124, 14, $noreg, debug-location !217 :: (load (s32) from %stack.9); batchtest/ludcmp/ludcmp.c:125:11
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r12 = LDRi12 %const.0, 0, 14, $noreg, debug-location !217 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:125:11
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = MOVi 400, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = MLAv5 renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !217; batchtest/ludcmp/ludcmp.c:125:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 26, 14, $noreg, $noreg, debug-location !217; batchtest/ludcmp/ludcmp.c:125:11
# Before:
not available
# After:
not available
## Instruction: renamable $d0 = VLDRD killed renamable $r0, 100, 14, $noreg, debug-location !217 :: (load (s64) from %ir.arrayidx22); batchtest/ludcmp/ludcmp.c:125:11
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 92, 14, $noreg :: (store (s32) into %stack.15)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 24, 14, $noreg :: (store (s64) into %stack.14)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.14, debug-location !218; batchtest/ludcmp/ludcmp.c:128:13
# Before:
not available
# After:
not available
### Basic Block: 14
## Instruction: $r1 = LDRi12 $sp, 128, 14, $noreg, debug-location !196 :: (load (s32) from %stack.8); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 92, 14, $noreg, debug-location !196 :: (load (s32) from %stack.15); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $d0 = VLDRD $sp, 24, 14, $noreg, debug-location !196 :: (load (s64) from %stack.14); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 20, 14, $noreg :: (store (s64) into %stack.17)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 88, 14, $noreg :: (store (s32) into %stack.16)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !220; batchtest/ludcmp/ludcmp.c:128:7
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.17, 0, killed $cpsr, debug-location !220; batchtest/ludcmp/ludcmp.c:128:7
# Before:
not available
# After:
not available
## Instruction: B %bb.15, debug-location !220; batchtest/ludcmp/ludcmp.c:128:7
# Before:
not available
# After:
not available
### Basic Block: 15
## Instruction: B %bb.16, debug-location !221; batchtest/ludcmp/ludcmp.c:129:9
# Before:
not available
# After:
not available
### Basic Block: 16
## Instruction: $r0 = LDRi12 $sp, 88, 14, $noreg, debug-location !223 :: (load (s32) from %stack.16); batchtest/ludcmp/ludcmp.c:129:14
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $d0 = VLDRD $sp, 20, 14, $noreg, debug-location !223 :: (load (s64) from %stack.17); batchtest/ludcmp/ludcmp.c:129:14
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 108, 14, $noreg, debug-location !223 :: (load (s32) from %stack.13); batchtest/ludcmp/ludcmp.c:129:14
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $lr = LDRi12 $sp, 124, 14, $noreg, debug-location !223 :: (load (s32) from %stack.9); batchtest/ludcmp/ludcmp.c:129:14
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r12 = LDRi12 %const.0, 0, 14, $noreg, debug-location !223 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:129:14
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = MOVi 400, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MLAv5 renamable $lr, renamable $r3, renamable $r12, 14, $noreg, $noreg, debug-location !223; batchtest/ludcmp/ludcmp.c:129:14
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r0, 26, 14, $noreg, $noreg, debug-location !223; batchtest/ludcmp/ludcmp.c:129:14
# Before:
not available
# After:
not available
## Instruction: renamable $d1 = VLDRD killed renamable $r1, 100, 14, $noreg, debug-location !223 :: (load (s64) from %ir.arrayidx28); batchtest/ludcmp/ludcmp.c:129:14
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: early-clobber renamable $r1 = MLAv5 renamable $r0, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !225; batchtest/ludcmp/ludcmp.c:129:39
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r2, 26, 14, $noreg, $noreg, debug-location !225; batchtest/ludcmp/ludcmp.c:129:39
# Before:
not available
# After:
not available
## Instruction: renamable $d2 = VLDRD killed renamable $r1, 0, 14, $noreg, debug-location !225 :: (load (s64) from %ir.arrayidx30); batchtest/ludcmp/ludcmp.c:129:39
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $d0 = VMLSD renamable $d0(tied-def 0), killed renamable $d1, killed renamable $d2, 14, $noreg, debug-location !224; batchtest/ludcmp/ludcmp.c:129:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !226; batchtest/ludcmp/ludcmp.c:128:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 92, 14, $noreg :: (store (s32) into %stack.15)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 24, 14, $noreg :: (store (s64) into %stack.14)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x1
0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x1
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> 0x0,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          [
           Loop Peeling: Backedges {(BB16, BB14)} in function ludcmp_test taken 0 times |->
            Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc70 |-> 0x0
0x7fffc74 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

           Loop Iteration: Backedges {(BB16, BB14)} in function ludcmp_test taken at least 1 times |->
            Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
          ]
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.14, debug-location !220; batchtest/ludcmp/ludcmp.c:128:7
# Before:
not available
# After:
not available
### Basic Block: 17
## Instruction: $d0 = VLDRD $sp, 20, 14, $noreg, debug-location !230 :: (load (s64) from %stack.17); batchtest/ludcmp/ludcmp.c:131:7
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 108, 14, $noreg, debug-location !230 :: (load (s32) from %stack.13); batchtest/ludcmp/ludcmp.c:131:7
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 124, 14, $noreg, debug-location !230 :: (load (s32) from %stack.9); batchtest/ludcmp/ludcmp.c:131:7
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r12 = LDRi12 %const.0, 0, 14, $noreg, debug-location !230 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:131:7
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = MOVi 400, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = MLAv5 renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !230; batchtest/ludcmp/ludcmp.c:131:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 26, 14, $noreg, $noreg, debug-location !230; batchtest/ludcmp/ludcmp.c:131:7
# Before:
not available
# After:
not available
## Instruction: VSTRD renamable $d0, killed renamable $r0, 100, 14, $noreg, debug-location !231 :: (store (s64) into %ir.arrayidx36); batchtest/ludcmp/ludcmp.c:131:30
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.18, debug-location !232; batchtest/ludcmp/ludcmp.c:132:5
# Before:
not available
# After:
not available
### Basic Block: 18
## Instruction: $r0 = LDRi12 $sp, 108, 14, $noreg :: (load (s32) from %stack.13)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 112, 14, $noreg :: (store (s32) into %stack.12)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc84 |-> 0x1
0x7fffc88 |-> 0x0
0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB18, BB12)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB18, BB12)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.12, debug-location !215; batchtest/ludcmp/ludcmp.c:124:5
# Before:
not available
# After:
not available
### Basic Block: 19
## Instruction: B %bb.20, debug-location !234; batchtest/ludcmp/ludcmp.c:133:3
# Before:
not available
# After:
not available
### Basic Block: 20
## Instruction: $r1 = LDRi12 $sp, 128, 14, $noreg, debug-location !235 :: (load (s32) from %stack.8); batchtest/ludcmp/ludcmp.c:106:24
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 124, 14, $noreg, debug-location !235 :: (load (s32) from %stack.9); batchtest/ludcmp/ludcmp.c:106:24
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !235; batchtest/ludcmp/ludcmp.c:106:24
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nuw ADDri renamable $r1, 1, 14, $noreg, $noreg, debug-location !198; batchtest/ludcmp/ludcmp.c:106:3
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 140, 14, $noreg :: (store (s32) into %stack.5)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0x2,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x1
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 144, 14, $noreg :: (store (s32) into %stack.4)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB20, BB4)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0x2,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc94 |-> 0x0
0x7fffc98 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffca4 |-> 0x2
0x7fffca8 |-> 0x0
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB20, BB4)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.4, debug-location !198; batchtest/ludcmp/ludcmp.c:106:3
# Before:
not available
# After:
not available
### Basic Block: 21
## Instruction: $r2 = LDRi12 $sp, 132, 14, $noreg, debug-location !237 :: (load (s32) from %stack.7); batchtest/ludcmp/ludcmp.c:135:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = LDRi12 %const.1, 0, 14, $noreg, debug-location !237 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:135:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $d0 = VLDRD killed renamable $r0, 0, 14, $noreg, debug-location !237 :: (dereferenceable load (s64) from `double* getelementptr inbounds ([50 x double], [50 x double]* @ludcmp_b, i32 0, i32 0)`); batchtest/ludcmp/ludcmp.c:135:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0xd4e20, @ludcmp_b,
 1 |-> top,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed renamable $d0, $sp, 42, 14, $noreg, debug-location !239 :: (store (s64) into %ir.arrayidx43); batchtest/ludcmp/ludcmp.c:135:10
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0xd4e20, @ludcmp_b,
 1 |-> top,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: CMPri renamable $r2, 1, 14, $noreg, implicit-def $cpsr, debug-location !240; batchtest/ludcmp/ludcmp.c:138:9
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !240; batchtest/ludcmp/ludcmp.c:138:9
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr renamable $r2, 12, killed $cpsr, $noreg, implicit renamable $r1, debug-location !240; batchtest/ludcmp/ludcmp.c:138:9
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 72, 14, $noreg :: (store (s32) into %stack.19)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 76, 14, $noreg :: (store (s32) into %stack.18)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.22, debug-location !240; batchtest/ludcmp/ludcmp.c:138:9
# Before:
not available
# After:
not available
### Basic Block: 22
## Instruction: $r1 = LDRi12 $sp, 72, 14, $noreg, debug-location !196 :: (load (s32) from %stack.19); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 76, 14, $noreg, debug-location !196 :: (load (s32) from %stack.18); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 68, 14, $noreg :: (store (s32) into %stack.20)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !242; batchtest/ludcmp/ludcmp.c:138:3
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.29, 0, killed $cpsr, debug-location !242; batchtest/ludcmp/ludcmp.c:138:3
# Before:
not available
# After:
not available
## Instruction: B %bb.23, debug-location !242; batchtest/ludcmp/ludcmp.c:138:3
# Before:
not available
# After:
not available
### Basic Block: 23
## Instruction: $r1 = LDRi12 $sp, 68, 14, $noreg, debug-location !243 :: (load (s32) from %stack.20); batchtest/ludcmp/ludcmp.c:139:9
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = LDRi12 %const.1, 0, 14, $noreg, debug-location !243 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:139:9
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0x1,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 26, 14, $noreg, $noreg, debug-location !243; batchtest/ludcmp/ludcmp.c:139:9
# Before:
not available
# After:
not available
## Instruction: renamable $d0 = VLDRD killed renamable $r0, 0, 14, $noreg, debug-location !243 :: (load (s64) from %ir.arrayidx47); batchtest/ludcmp/ludcmp.c:139:9
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0xd4e28,
 1 |-> 0x1,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 52, 14, $noreg :: (store (s32) into %stack.22)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 14, 14, $noreg :: (store (s64) into %stack.21)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc4c |-> 0x0
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc4c |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.24, debug-location !244; batchtest/ludcmp/ludcmp.c:142:11
# Before:
not available
# After:
not available
### Basic Block: 24
## Instruction: $r1 = LDRi12 $sp, 68, 14, $noreg, debug-location !196 :: (load (s32) from %stack.20); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc4c |-> 0x0
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc4c |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 52, 14, $noreg, debug-location !196 :: (load (s32) from %stack.22); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc4c |-> 0x0
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc4c |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $d0 = VLDRD $sp, 14, 14, $noreg, debug-location !196 :: (load (s64) from %stack.21); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc4c |-> 0x0
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc4c |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 10, 14, $noreg :: (store (s64) into %stack.24)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc4c |-> 0x0
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc4c |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 48, 14, $noreg :: (store (s32) into %stack.23)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc4c |-> 0x0
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc4c |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !246; batchtest/ludcmp/ludcmp.c:142:5
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.27, 0, killed $cpsr, debug-location !246; batchtest/ludcmp/ludcmp.c:142:5
# Before:
not available
# After:
not available
## Instruction: B %bb.25, debug-location !246; batchtest/ludcmp/ludcmp.c:142:5
# Before:
not available
# After:
not available
### Basic Block: 25
## Instruction: B %bb.26, debug-location !247; batchtest/ludcmp/ludcmp.c:143:7
# Before:
not available
# After:
not available
### Basic Block: 26
## Instruction: $r0 = LDRi12 $sp, 48, 14, $noreg, debug-location !248 :: (load (s32) from %stack.23); batchtest/ludcmp/ludcmp.c:143:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $d0 = VLDRD $sp, 10, 14, $noreg, debug-location !248 :: (load (s64) from %stack.24); batchtest/ludcmp/ludcmp.c:143:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 68, 14, $noreg, debug-location !248 :: (load (s32) from %stack.20); batchtest/ludcmp/ludcmp.c:143:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x2,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r12 = LDRi12 %const.0, 0, 14, $noreg, debug-location !248 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:143:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = MOVi 400, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MLAv5 renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !248; batchtest/ludcmp/ludcmp.c:143:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r0, 26, 14, $noreg, $noreg, debug-location !248; batchtest/ludcmp/ludcmp.c:143:12
# Before:
not available
# After:
not available
## Instruction: renamable $d1 = VLDRD killed renamable $r1, 0, 14, $noreg, debug-location !248 :: (load (s64) from %ir.arrayidx52); batchtest/ludcmp/ludcmp.c:143:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r1 = ADDri $sp, 168, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r0, 26, 14, $noreg, $noreg, debug-location !250; batchtest/ludcmp/ludcmp.c:143:33
# Before:
not available
# After:
not available
## Instruction: renamable $d2 = VLDRD killed renamable $r1, 0, 14, $noreg, debug-location !250 :: (load (s64) from %ir.arrayidx53); batchtest/ludcmp/ludcmp.c:143:33
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x7fffcc0,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x0,
 1 |-> 0x7fffcc0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $d0 = VMLSD renamable $d0(tied-def 0), killed renamable $d1, killed renamable $d2, 14, $noreg, debug-location !249; batchtest/ludcmp/ludcmp.c:143:9
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !251; batchtest/ludcmp/ludcmp.c:142:26
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 52, 14, $noreg :: (store (s32) into %stack.22)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x7fffcc0,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x7fffcc0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x0
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 14, 14, $noreg :: (store (s64) into %stack.21)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x7fffcc0,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x1
0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x1,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}
        ]

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB26, BB24)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x7fffcc0,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc48 |-> 0x0
0x7fffc4c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB26, BB24)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.24, debug-location !246; batchtest/ludcmp/ludcmp.c:142:5
# Before:
not available
# After:
not available
### Basic Block: 27
## Instruction: $d0 = VLDRD $sp, 10, 14, $noreg :: (load (s64) from %stack.24)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 68, 14, $noreg :: (load (s32) from %stack.20)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = ADDri $sp, 168, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 26, 14, $noreg, $noreg, debug-location !254; batchtest/ludcmp/ludcmp.c:145:5
# Before:
not available
# After:
not available
## Instruction: VSTRD renamable $d0, killed renamable $r0, 0, 14, $noreg, debug-location !255 :: (store (s64) into %ir.arrayidx58); batchtest/ludcmp/ludcmp.c:145:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x7fffcc8,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.28, debug-location !256; batchtest/ludcmp/ludcmp.c:146:3
# Before:
not available
# After:
not available
### Basic Block: 28
## Instruction: $r0 = LDRi12 $sp, 68, 14, $noreg, debug-location !257 :: (load (s32) from %stack.20); batchtest/ludcmp/ludcmp.c:138:25
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x7fffcc8,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !257; batchtest/ludcmp/ludcmp.c:138:25
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 76, 14, $noreg :: (store (s32) into %stack.18)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB28, BB22)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x2,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc5c |-> 0x1
0x7fffc64 |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
0x7ffffe8 |-> 0x7fffff0
0x7fffff0 |-> 0x7fffff8
}

       Loop Iteration: Backedges {(BB28, BB22)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.22, debug-location !242; batchtest/ludcmp/ludcmp.c:138:3
# Before:
not available
# After:
not available
### Basic Block: 29
## Instruction: $r0 = LDRi12 $sp, 164, 14, $noreg :: (load (s32) from %stack.1)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r1 = ADDri $sp, 168, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r0, 26, 14, $noreg, $noreg, debug-location !259; batchtest/ludcmp/ludcmp.c:148:19
# Before:
not available
# After:
not available
## Instruction: renamable $d0 = VLDRD killed renamable $r1, 0, 14, $noreg, debug-location !259 :: (load (s64) from %ir.arrayidx62); batchtest/ludcmp/ludcmp.c:148:19
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> 0x7fffcc8,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = LDRi12 %const.0, 0, 14, $noreg, debug-location !260 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:148:28
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> 0x7fffcc8,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = MOVi 400, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MLAv5 renamable $r0, killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !260; batchtest/ludcmp/ludcmp.c:148:28
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r0, 26, 14, $noreg, $noreg, debug-location !260; batchtest/ludcmp/ludcmp.c:148:28
# Before:
not available
# After:
not available
## Instruction: renamable $d1 = VLDRD killed renamable $r1, 0, 14, $noreg, debug-location !260 :: (load (s64) from %ir.arrayidx64); batchtest/ludcmp/ludcmp.c:148:28
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $d0 = VDIVD killed renamable $d0, killed renamable $d1, 14, $noreg, debug-location !261; batchtest/ludcmp/ludcmp.c:148:26
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRi12 %const.2, 0, 14, $noreg, debug-location !262 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:148:3
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r0, 26, 14, $noreg, $noreg, debug-location !262; batchtest/ludcmp/ludcmp.c:148:3
# Before:
not available
# After:
not available
## Instruction: VSTRD killed renamable $d0, killed renamable $r1, 0, 14, $noreg, debug-location !263 :: (store (s64) into %ir.arrayidx66); batchtest/ludcmp/ludcmp.c:148:17
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> 0xd4fc0,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.25)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x1,
 1 |-> 0xd4fc0,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.30, debug-location !264; batchtest/ludcmp/ludcmp.c:151:9
# Before:
not available
# After:
not available
### Basic Block: 30
## Instruction: $r0 = LDRi12 $sp, 36, 14, $noreg :: (load (s32) from %stack.25)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0xd4fc0,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.27)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0xd4fc0,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !196; batchtest/ludcmp/ludcmp.c:0
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 32, 14, $noreg :: (store (s32) into %stack.26)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0x0,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !266; batchtest/ludcmp/ludcmp.c:151:3
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.37, 11, killed $cpsr, debug-location !266; batchtest/ludcmp/ludcmp.c:151:3
# Before:
not available
# After:
not available
## Instruction: B %bb.31, debug-location !266; batchtest/ludcmp/ludcmp.c:151:3
# Before:
not available
# After:
not available
### Basic Block: 31
## Instruction: $r0 = LDRi12 $sp, 28, 14, $noreg :: (load (s32) from %stack.27)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0x0,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.26)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0x0,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r1 = ADDri $sp, 168, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r2, 26, 14, $noreg, $noreg, debug-location !267; batchtest/ludcmp/ludcmp.c:152:9
# Before:
not available
# After:
not available
## Instruction: renamable $d0 = VLDRD killed renamable $r1, 0, 14, $noreg, debug-location !267 :: (load (s64) from %ir.arrayidx70); batchtest/ludcmp/ludcmp.c:152:9
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0x7fffcc0,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.29)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0x7fffcc0,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 4, 14, $noreg :: (store (s64) into %stack.28)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x1,
 1 |-> 0x7fffcc0,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.32, debug-location !268; batchtest/ludcmp/ludcmp.c:155:11
# Before:
not available
# After:
not available
### Basic Block: 32
## Instruction: $r1 = LDRi12 $sp, 164, 14, $noreg, debug-location !196 :: (load (s32) from %stack.1); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x7fffcc0,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !196 :: (load (s32) from %stack.29); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $d0 = VLDRD $sp, 4, 14, $noreg, debug-location !196 :: (load (s64) from %stack.28); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 0, 14, $noreg :: (store (s64) into %stack.31)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.30)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !270; batchtest/ludcmp/ludcmp.c:155:5
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.35, 12, killed $cpsr, debug-location !270; batchtest/ludcmp/ludcmp.c:155:5
# Before:
not available
# After:
not available
## Instruction: B %bb.33, debug-location !270; batchtest/ludcmp/ludcmp.c:155:5
# Before:
not available
# After:
not available
### Basic Block: 33
## Instruction: B %bb.34, debug-location !271; batchtest/ludcmp/ludcmp.c:156:7
# Before:
not available
# After:
not available
### Basic Block: 34
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !272 :: (load (s32) from %stack.30); batchtest/ludcmp/ludcmp.c:156:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc20 |-> 0x1
0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $d0 = VLDRD $sp, 0, 14, $noreg, debug-location !272 :: (load (s64) from %stack.31); batchtest/ludcmp/ludcmp.c:156:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc20 |-> 0x1
0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 32, 14, $noreg, debug-location !272 :: (load (s32) from %stack.26); batchtest/ludcmp/ludcmp.c:156:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc20 |-> 0x1
0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r12 = LDRi12 %const.0, 0, 14, $noreg, debug-location !272 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:156:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc20 |-> 0x1
0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = MOVi 400, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MLAv5 renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !272; batchtest/ludcmp/ludcmp.c:156:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r0, 26, 14, $noreg, $noreg, debug-location !272; batchtest/ludcmp/ludcmp.c:156:12
# Before:
not available
# After:
not available
## Instruction: renamable $d1 = VLDRD killed renamable $r1, 0, 14, $noreg, debug-location !272 :: (load (s64) from %ir.arrayidx76); batchtest/ludcmp/ludcmp.c:156:12
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc20 |-> 0x1
0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r1 = LDRi12 %const.2, 0, 14, $noreg, debug-location !274 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:156:33
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc20 |-> 0x1
0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r0, 26, 14, $noreg, $noreg, debug-location !274; batchtest/ludcmp/ludcmp.c:156:33
# Before:
not available
# After:
not available
## Instruction: renamable $d2 = VLDRD killed renamable $r1, 0, 14, $noreg, debug-location !274 :: (load (s64) from %ir.arrayidx77); batchtest/ludcmp/ludcmp.c:156:33
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x1,
 1 |-> 0xd4fc0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc20 |-> 0x1
0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $d0 = VMLSD renamable $d0(tied-def 0), killed renamable $d1, killed renamable $d2, 14, $noreg, debug-location !273; batchtest/ludcmp/ludcmp.c:156:9
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !275; batchtest/ludcmp/ludcmp.c:155:31
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.29)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x2,
 1 |-> 0xd4fc0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc20 |-> 0x1
0x7fffc24 |-> 0x1
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: VSTRD killed $d0, $sp, 4, 14, $noreg :: (store (s64) into %stack.28)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> 0x2,
 1 |-> 0xd4fc0,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc20 |-> 0x1
0x7fffc24 |-> 0x2
0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x0,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        [
         Loop Peeling: Backedges {(BB34, BB32)} in function ludcmp_test taken 0 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

         Loop Iteration: Backedges {(BB34, BB32)} in function ludcmp_test taken at least 1 times |->
          Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> 0x190,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> 0xd0000, @ludcmp_a,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
        ]
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.32, debug-location !270; batchtest/ludcmp/ludcmp.c:155:5
# Before:
not available
# After:
not available
### Basic Block: 35
## Instruction: $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !278 :: (load (s32) from %stack.26); batchtest/ludcmp/ludcmp.c:158:25
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> 0x0,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x1,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: $d0 = VLDRD $sp, 0, 14, $noreg, debug-location !278 :: (load (s64) from %stack.31); batchtest/ludcmp/ludcmp.c:158:25
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r3 = LDRi12 %const.0, 0, 14, $noreg, debug-location !278 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:158:25
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x0,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r2 = MOVi 400, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r0 = MLAv5 renamable $r1, killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !278; batchtest/ludcmp/ludcmp.c:158:25
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 26, 14, $noreg, $noreg, debug-location !278; batchtest/ludcmp/ludcmp.c:158:25
# Before:
not available
# After:
not available
## Instruction: renamable $d1 = VLDRD killed renamable $r0, 0, 14, $noreg, debug-location !278 :: (load (s64) from %ir.arrayidx83); batchtest/ludcmp/ludcmp.c:158:25
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $d0 = VDIVD renamable $d0, killed renamable $d1, 14, $noreg, debug-location !279; batchtest/ludcmp/ludcmp.c:158:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = LDRi12 %const.2, 0, 14, $noreg, debug-location !280 :: (load (s32) from constant-pool); batchtest/ludcmp/ludcmp.c:158:5
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> top,
 1 |-> 0x0,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 26, 14, $noreg, $noreg, debug-location !280; batchtest/ludcmp/ludcmp.c:158:5
# Before:
not available
# After:
not available
## Instruction: VSTRD killed renamable $d0, killed renamable $r0, 0, 14, $noreg, debug-location !281 :: (store (s64) into %ir.arrayidx85); batchtest/ludcmp/ludcmp.c:158:19
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0xd4fb8,
 1 |-> 0x0,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.36, debug-location !282; batchtest/ludcmp/ludcmp.c:159:3
# Before:
not available
# After:
not available
### Basic Block: 36
## Instruction: $r0 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.26)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0xd4fb8,
 1 |-> 0x0,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.25)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      [
       Loop Peeling: Backedges {(BB36, BB30)} in function ludcmp_test taken 0 times |->
        Leaf:
[0 |-> 0x0,
 1 |-> 0x0,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc34 |-> 0x1
0x7fffc38 |-> 0x0
0x7fffc3c |-> 0x1
0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}

       Loop Iteration: Backedges {(BB36, BB30)} in function ludcmp_test taken at least 1 times |->
        Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
      ]
    ]
  ]
]
# After:
not available
## Instruction: B %bb.30, debug-location !266; batchtest/ludcmp/ludcmp.c:151:3
# Before:
not available
# After:
not available
### Basic Block: 37
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 148, 14, $noreg :: (store (s32) into %stack.3)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> 0x190,
 3 |-> 0xd0000, @ludcmp_a,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffc9c |-> 0x2
0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.38, debug-location !284; batchtest/ludcmp/ludcmp.c:161:3
# Before:
not available
# After:
not available
### Basic Block: 38
## Instruction: $r0 = LDRi12 $sp, 148, 14, $noreg, debug-location !196 :: (load (s32) from %stack.3); batchtest/ludcmp/ludcmp.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7fffc18,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg, debug-location !285; batchtest/ludcmp/ludcmp.c:162:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r5, def $r11, def $lr, debug-location !285; batchtest/ludcmp/ludcmp.c:162:1
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Function call at location ludcmp_main_BB0_I8 |->
    [
     Call of function ludcmp_test |->
      Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7ffffe8,
 12 |-> top,
 13 |-> 0x7ffffe0,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
    ]
  ]
]
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !285; batchtest/ludcmp/ludcmp.c:162:1
# Before:
not available
# After:
not available
### Basic Block: 39
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
#### Function: main
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
[
 Call of function main |->
  Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> top,
 12 |-> top,
 13 |-> 0x8000000,
 14 |-> top,
 15 |-> top]
{}
]
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL_pred @ludcmp_init, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !291; batchtest/ludcmp/ludcmp.c:173:3
# Before:
not available
# After:
not available
## Instruction: BL_pred @ludcmp_main, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !292; batchtest/ludcmp/ludcmp.c:174:3
# Before:
not available
# After:
not available
## Instruction: BL_pred @ludcmp_return, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $r0, debug-location !293; batchtest/ludcmp/ludcmp.c:176:12
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !294; batchtest/ludcmp/ludcmp.c:176:3
# Before:
[
 Call of function main |->
  Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{0x7fffcbc |-> 0x1
}
]
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !294; batchtest/ludcmp/ludcmp.c:176:3
# Before:
not available
# After:
not available
#### Function: memcpy
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: B %bb.1, debug-location !1266; ../memory.c:8:6
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1267 :: (load (s32) from %stack.3); ../memory.c:0
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1267 :: (load (s32) from %stack.0); ../memory.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1269; ../memory.c:8:2
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 0, killed $cpsr, debug-location !1269; ../memory.c:8:2
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1269; ../memory.c:8:2
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1270 :: (load (s32) from %stack.1); ../memory.c:9:21
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1270 :: (load (s32) from %stack.4); ../memory.c:9:21
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1270 :: (load (s32) from %stack.2); ../memory.c:9:21
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRBrs renamable $r0, renamable $r2, 0, 14, $noreg, debug-location !1270 :: (load (s8) from %ir.arrayidx); ../memory.c:9:21
# Before:
bot
# After:
not available
## Instruction: STRBrs killed renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1272 :: (store (s8) into %ir.arrayidx1); ../memory.c:9:19
# Before:
bot
# After:
not available
## Instruction: B %bb.3, debug-location !1273; ../memory.c:10:2
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1274 :: (load (s32) from %stack.4); ../memory.c:8:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1274; ../memory.c:8:26
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: B %bb.1, debug-location !1269; ../memory.c:8:2
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1276; ../memory.c:11:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1276; ../memory.c:11:1
# Before:
not available
# After:
not available
#### Function: memset
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: B %bb.1, debug-location !1278; ../memory.c:17:6
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1279 :: (load (s32) from %stack.3); ../memory.c:0
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1279 :: (load (s32) from %stack.0); ../memory.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1281; ../memory.c:17:2
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 0, killed $cpsr, debug-location !1281; ../memory.c:17:2
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1281; ../memory.c:17:2
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1284 :: (load (s32) from %stack.2); ../memory.c:18:11
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1284 :: (load (s32) from %stack.1); ../memory.c:18:11
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1284 :: (load (s32) from %stack.4); ../memory.c:18:11
# Before:
bot
# After:
not available
## Instruction: STRBrs renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1284 :: (store (s8) into %ir.arrayidx); ../memory.c:18:11
# Before:
bot
# After:
not available
## Instruction: B %bb.3, debug-location !1285; ../memory.c:19:2
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1286 :: (load (s32) from %stack.4); ../memory.c:17:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1286; ../memory.c:17:26
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: B %bb.1, debug-location !1281; ../memory.c:17:2
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1288 :: (load (s32) from %stack.1); ../memory.c:20:2
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1288; ../memory.c:20:2
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1288; ../memory.c:20:2
# Before:
not available
# After:
not available
