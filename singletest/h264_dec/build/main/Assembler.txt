Textual Machine Code Representation
------------------------------------

# Machine code for function h264_dec_return: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: @h264_dec_img_mpr, align=4
  cp#1: @h264_dec_dec_picture_imgUV, align=4

bb.0.entry:
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !131 :: (load (s32) from constant-pool); batchtest/h264_dec/h264_dec.c:61:12
  renamable $r0 = LDRSB killed renamable $r0, $noreg, 0, 14, $noreg, debug-location !131 :: (dereferenceable load (s8) from `i8* getelementptr inbounds ([7 x [7 x i8]], [7 x [7 x i8]]* @h264_dec_img_mpr, i32 0, i32 0, i32 0)`); batchtest/h264_dec/h264_dec.c:61:12
  renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !132 :: (load (s32) from constant-pool); batchtest/h264_dec/h264_dec.c:61:41
  renamable $r1 = LDRSB killed renamable $r1, $noreg, 0, 14, $noreg, debug-location !132 :: (dereferenceable load (s8) from `i8* getelementptr inbounds ([2 x [64 x [54 x i8]]], [2 x [64 x [54 x i8]]]* @h264_dec_dec_picture_imgUV, i32 0, i32 0, i32 0, i32 0)`); batchtest/h264_dec/h264_dec.c:61:41
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !133; batchtest/h264_dec/h264_dec.c:61:39
  renamable $r1 = MVNi 127, 14, $noreg, $noreg
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, def $cpsr, debug-location !134; batchtest/h264_dec/h264_dec.c:61:89
  $r0 = MOVi 1, 1, killed $cpsr, $noreg, implicit renamable $r0, debug-location !134; batchtest/h264_dec/h264_dec.c:61:89
  BX_RET 14, $noreg, implicit killed $r0, debug-location !135; batchtest/h264_dec/h264_dec.c:61:3

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function h264_dec_return.

# Machine code for function h264_dec_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=1, align=1
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-24]
  fi#6: size=4, align=4, at location [SP-28]
  fi#7: size=4, align=4, at location [SP-32]
  fi#8: size=4, align=4, at location [SP-36]
  fi#9: size=4, align=4, at location [SP-40]
  fi#10: size=4, align=4, at location [SP-44]
  fi#11: size=4, align=4, at location [SP-48]
  fi#12: size=4, align=4, at location [SP-52]
Constant Pool:
  cp#0: @h264_dec_mv_array, align=4
  cp#1: @h264_dec_list_imgUV, align=4
  cp#2: @h264_dec_img_m7, align=4
  cp#3: @h264_dec_img, align=4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $sp = frame-setup SUBri killed $sp, 52, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 52
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRBi12 renamable $r0, $sp, 51, 14, $noreg, debug-location !137 :: (volatile store (s8) into %ir.bitmask); batchtest/h264_dec/h264_dec.c:69:24
  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  STRi12 killed $r1, $sp, 40, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r0, $sp, 44, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.1, debug-location !138; batchtest/h264_dec/h264_dec.c:76:9

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r1 = LDRi12 $sp, 40, 14, $noreg, debug-location !139 :: (load (s32) from %stack.2); batchtest/h264_dec/h264_dec.c:0
  $r0 = LDRi12 $sp, 44, 14, $noreg, debug-location !139 :: (load (s32) from %stack.1); batchtest/h264_dec/h264_dec.c:0
  STRi12 $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.4)
  STRi12 killed $r1, $sp, 36, 14, $noreg :: (store (s32) into %stack.3)
  $r1 = MOVi 2, 14, $noreg, $noreg
  $r1 = ORRri $r1, 8448, 14, $noreg, $noreg
  CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !141; batchtest/h264_dec/h264_dec.c:76:3
  Bcc %bb.4, 0, killed $cpsr, debug-location !141; batchtest/h264_dec/h264_dec.c:76:3
  B %bb.2, debug-location !141; batchtest/h264_dec/h264_dec.c:76:3

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !142 :: (load (s32) from %stack.3); batchtest/h264_dec/h264_dec.c:77:11
  renamable $r2 = LDRBi12 $sp, 51, 14, $noreg, debug-location !142 :: (volatile dereferenceable load (s8) from %ir.bitmask); batchtest/h264_dec/h264_dec.c:77:11
  renamable $r0 = LDRBi12 renamable $r1, 0, 14, $noreg, debug-location !143 :: (load (s8) from %ir.p.0); batchtest/h264_dec/h264_dec.c:77:8
  renamable $r0 = EORrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !143; batchtest/h264_dec/h264_dec.c:77:8
  STRBi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !143 :: (store (s8) into %ir.p.0); batchtest/h264_dec/h264_dec.c:77:8
  B %bb.3, debug-location !144; batchtest/h264_dec/h264_dec.c:77:5

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !145 :: (load (s32) from %stack.3); batchtest/h264_dec/h264_dec.c:76:49
  $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !145 :: (load (s32) from %stack.4); batchtest/h264_dec/h264_dec.c:76:49
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !145; batchtest/h264_dec/h264_dec.c:76:49
  renamable $r1 = nuw ADDri renamable $r1, 1, 14, $noreg, $noreg, debug-location !146; batchtest/h264_dec/h264_dec.c:76:54
  STRi12 killed $r1, $sp, 40, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r0, $sp, 44, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.1, debug-location !141; batchtest/h264_dec/h264_dec.c:76:3

bb.4.for.end:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  renamable $r1 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.5, debug-location !149; batchtest/h264_dec/h264_dec.c:81:9

bb.5.for.cond3:
; predecessors: %bb.4, %bb.7
  successors: %bb.8, %bb.6

  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !139 :: (load (s32) from %stack.6); batchtest/h264_dec/h264_dec.c:0
  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !139 :: (load (s32) from %stack.5); batchtest/h264_dec/h264_dec.c:0
  STRi12 $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.8)
  STRi12 killed $r1, $sp, 20, 14, $noreg :: (store (s32) into %stack.7)
  $r1 = MOVi 932, 14, $noreg, $noreg
  $r1 = ORRri $r1, 7168, 14, $noreg, $noreg
  CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !151; batchtest/h264_dec/h264_dec.c:81:3
  Bcc %bb.8, 0, killed $cpsr, debug-location !151; batchtest/h264_dec/h264_dec.c:81:3
  B %bb.6, debug-location !151; batchtest/h264_dec/h264_dec.c:81:3

bb.6.for.body6:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r1 = LDRi12 $sp, 20, 14, $noreg, debug-location !152 :: (load (s32) from %stack.7); batchtest/h264_dec/h264_dec.c:82:11
  renamable $r2 = LDRBi12 $sp, 51, 14, $noreg, debug-location !152 :: (volatile dereferenceable load (s8) from %ir.bitmask); batchtest/h264_dec/h264_dec.c:82:11
  renamable $r0 = LDRBi12 renamable $r1, 0, 14, $noreg, debug-location !153 :: (load (s8) from %ir.p.1); batchtest/h264_dec/h264_dec.c:82:8
  renamable $r0 = EORrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !153; batchtest/h264_dec/h264_dec.c:82:8
  STRBi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !153 :: (store (s8) into %ir.p.1); batchtest/h264_dec/h264_dec.c:82:8
  B %bb.7, debug-location !154; batchtest/h264_dec/h264_dec.c:82:5

bb.7.for.inc11:
; predecessors: %bb.6
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 20, 14, $noreg, debug-location !155 :: (load (s32) from %stack.7); batchtest/h264_dec/h264_dec.c:81:51
  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !155 :: (load (s32) from %stack.8); batchtest/h264_dec/h264_dec.c:81:51
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !155; batchtest/h264_dec/h264_dec.c:81:51
  renamable $r1 = nuw ADDri renamable $r1, 1, 14, $noreg, $noreg, debug-location !156; batchtest/h264_dec/h264_dec.c:81:56
  STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.5, debug-location !151; batchtest/h264_dec/h264_dec.c:81:3

bb.8.for.end14:
; predecessors: %bb.5
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  renamable $r1 = LDRi12 %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.10)
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.9)
  B %bb.9, debug-location !158; batchtest/h264_dec/h264_dec.c:86:9

bb.9.for.cond15:
; predecessors: %bb.8, %bb.11
  successors: %bb.12, %bb.10

  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !139 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:0
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !139 :: (load (s32) from %stack.9); batchtest/h264_dec/h264_dec.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.12)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.11)
  CMPri renamable $r0, 1024, 14, $noreg, implicit-def $cpsr, debug-location !160; batchtest/h264_dec/h264_dec.c:86:3
  Bcc %bb.12, 0, killed $cpsr, debug-location !160; batchtest/h264_dec/h264_dec.c:86:3
  B %bb.10, debug-location !160; batchtest/h264_dec/h264_dec.c:86:3

bb.10.for.body18:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !161 :: (load (s32) from %stack.11); batchtest/h264_dec/h264_dec.c:87:11
  renamable $r2 = LDRBi12 $sp, 51, 14, $noreg, debug-location !161 :: (volatile dereferenceable load (s8) from %ir.bitmask); batchtest/h264_dec/h264_dec.c:87:11
  renamable $r0 = LDRBi12 renamable $r1, 0, 14, $noreg, debug-location !162 :: (load (s8) from %ir.p.2); batchtest/h264_dec/h264_dec.c:87:8
  renamable $r0 = EORrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !162; batchtest/h264_dec/h264_dec.c:87:8
  STRBi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !162 :: (store (s8) into %ir.p.2); batchtest/h264_dec/h264_dec.c:87:8
  B %bb.11, debug-location !163; batchtest/h264_dec/h264_dec.c:87:5

bb.11.for.inc23:
; predecessors: %bb.10
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !164 :: (load (s32) from %stack.11); batchtest/h264_dec/h264_dec.c:86:47
  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !164 :: (load (s32) from %stack.12); batchtest/h264_dec/h264_dec.c:86:47
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !164; batchtest/h264_dec/h264_dec.c:86:47
  renamable $r1 = nuw ADDri renamable $r1, 1, 14, $noreg, $noreg, debug-location !165; batchtest/h264_dec/h264_dec.c:86:52
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.10)
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.9)
  B %bb.9, debug-location !160; batchtest/h264_dec/h264_dec.c:86:3

bb.12.for.end26:
; predecessors: %bb.9

  renamable $r1 = LDRi12 %const.3, 0, 14, $noreg, debug-location !167 :: (load (s32) from constant-pool); batchtest/h264_dec/h264_dec.c:89:29
  renamable $r0 = MOVi 8, 14, $noreg, $noreg
  STRi12 renamable $r0, renamable $r1, 548, 14, $noreg, debug-location !167 :: (store (s32) into `i32* getelementptr inbounds (%struct.h264_dec_img_par, %struct.h264_dec_img_par* @h264_dec_img, i32 0, i32 10)`); batchtest/h264_dec/h264_dec.c:89:29
  STRi12 killed renamable $r0, renamable $r1, 552, 14, $noreg, debug-location !168 :: (store (s32) into `i32* getelementptr inbounds (%struct.h264_dec_img_par, %struct.h264_dec_img_par* @h264_dec_img, i32 0, i32 11)`); batchtest/h264_dec/h264_dec.c:90:29
  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed renamable $r0, renamable $r1, 544, 14, $noreg, debug-location !169 :: (store (s32) into `i32* getelementptr inbounds (%struct.h264_dec_img_par, %struct.h264_dec_img_par* @h264_dec_img, i32 0, i32 9)`); batchtest/h264_dec/h264_dec.c:91:30
  renamable $r0 = MOVi 256, 14, $noreg, $noreg
  STRi12 renamable $r0, renamable $r1, 16, 14, $noreg, debug-location !170 :: (store (s32) into `i32* getelementptr inbounds (%struct.h264_dec_img_par, %struct.h264_dec_img_par* @h264_dec_img, i32 0, i32 4)`); batchtest/h264_dec/h264_dec.c:92:24
  STRi12 killed renamable $r0, renamable $r1, 12, 14, $noreg, debug-location !171 :: (store (s32) into `i32* getelementptr inbounds (%struct.h264_dec_img_par, %struct.h264_dec_img_par* @h264_dec_img, i32 0, i32 3)`); batchtest/h264_dec/h264_dec.c:93:24
  renamable $r0 = MOVi 352, 14, $noreg, $noreg
  STRi12 killed renamable $r0, renamable $r1, 8, 14, $noreg, debug-location !172 :: (store (s32) into `i32* getelementptr inbounds (%struct.h264_dec_img_par, %struct.h264_dec_img_par* @h264_dec_img, i32 0, i32 2)`); batchtest/h264_dec/h264_dec.c:94:25
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, renamable $r1, 540, 14, $noreg, debug-location !173 :: (store (s32) into `i32* getelementptr inbounds (%struct.h264_dec_img_par, %struct.h264_dec_img_par* @h264_dec_img, i32 0, i32 8)`); batchtest/h264_dec/h264_dec.c:95:30
  renamable $r2 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r2, renamable $r1, 0, 14, $noreg, debug-location !174 :: (store (s32) into `i32* getelementptr inbounds (%struct.h264_dec_img_par, %struct.h264_dec_img_par* @h264_dec_img, i32 0, i32 0)`); batchtest/h264_dec/h264_dec.c:96:44
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !175 :: (store (s32) into `i32* getelementptr inbounds (%struct.h264_dec_img_par, %struct.h264_dec_img_par* @h264_dec_img, i32 0, i32 1)`); batchtest/h264_dec/h264_dec.c:97:21
  STRi12 renamable $r0, renamable $r1, 536, 14, $noreg, debug-location !176 :: (store (s32) into `i32* getelementptr inbounds (%struct.h264_dec_img_par, %struct.h264_dec_img_par* @h264_dec_img, i32 0, i32 7)`); batchtest/h264_dec/h264_dec.c:98:32
  STRi12 killed renamable $r0, killed renamable $r1, 532, 14, $noreg, debug-location !177 :: (store (s32) into `i32* getelementptr inbounds (%struct.h264_dec_img_par, %struct.h264_dec_img_par* @h264_dec_img, i32 0, i32 6)`); batchtest/h264_dec/h264_dec.c:99:41
  $sp = frame-destroy ADDri killed $sp, 52, 14, $noreg, $noreg, debug-location !178; batchtest/h264_dec/h264_dec.c:100:1
  BX_RET 14, $noreg, debug-location !178; batchtest/h264_dec/h264_dec.c:100:1

bb.13 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function h264_dec_init.

# Machine code for function h264_dec_decode_one_macroblock: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-40]
  fi#1: size=4, align=4, at location [SP-44]
  fi#2: size=4, align=4, at location [SP-48]
  fi#3: size=4, align=4, at location [SP-52]
  fi#4: size=4, align=4, at location [SP-56]
  fi#5: size=4, align=4, at location [SP-60]
  fi#6: size=4, align=4, at location [SP-64]
  fi#7: size=4, align=4, at location [SP-68]
  fi#8: size=4, align=4, at location [SP-72]
  fi#9: size=4, align=4, at location [SP-76]
  fi#10: size=4, align=4, at location [SP-80]
  fi#11: size=4, align=4, at location [SP-84]
  fi#12: size=4, align=4, at location [SP-88]
  fi#13: size=4, align=4, at location [SP-92]
  fi#14: size=4, align=4, at location [SP-96]
  fi#15: size=4, align=4, at location [SP-100]
  fi#16: size=4, align=4, at location [SP-104]
  fi#17: size=4, align=4, at location [SP-108]
  fi#18: size=4, align=4, at location [SP-112]
  fi#19: size=4, align=4, at location [SP-116]
  fi#20: size=4, align=4, at location [SP-120]
  fi#21: size=4, align=4, at location [SP-124]
  fi#22: size=4, align=4, at location [SP-128]
  fi#23: size=4, align=4, at location [SP-132]
  fi#24: size=4, align=4, at location [SP-136]
  fi#25: size=4, align=4, at location [SP-140]
  fi#26: size=4, align=4, at location [SP-144]
  fi#27: size=4, align=4, at location [SP-148]
  fi#28: size=4, align=4, at location [SP-152]
  fi#29: size=4, align=4, at location [SP-156]
  fi#30: size=4, align=4, at location [SP-160]
  fi#31: size=4, align=4, at location [SP-164]
  fi#32: size=4, align=4, at location [SP-168]
  fi#33: size=4, align=4, at location [SP-172]
  fi#34: size=4, align=4, at location [SP-176]
  fi#35: size=4, align=4, at location [SP-180]
  fi#36: size=4, align=4, at location [SP-184]
  fi#37: size=4, align=4, at location [SP-188]
  fi#38: size=4, align=4, at location [SP-192]
  fi#39: size=4, align=4, at location [SP-196]
  fi#40: size=4, align=4, at location [SP-200]
  fi#41: size=4, align=4, at location [SP-204]
  fi#42: size=4, align=4, at location [SP-208]
  fi#43: size=4, align=4, at location [SP-212]
  fi#44: size=4, align=4, at location [SP-216]
  fi#45: size=4, align=4, at location [SP-220]
  fi#46: size=4, align=4, at location [SP-224]
  fi#47: size=4, align=4, at location [SP-228]
  fi#48: size=4, align=4, at location [SP-232]
  fi#49: size=4, align=4, at location [SP-236]
  fi#50: size=4, align=4, at location [SP-240]
  fi#51: size=4, align=4, at location [SP-244]
  fi#52: size=4, align=4, at location [SP-4]
  fi#53: size=4, align=4, at location [SP-8]
  fi#54: size=4, align=4, at location [SP-12]
  fi#55: size=4, align=4, at location [SP-16]
  fi#56: size=4, align=4, at location [SP-20]
  fi#57: size=4, align=4, at location [SP-24]
  fi#58: size=4, align=4, at location [SP-28]
  fi#59: size=4, align=4, at location [SP-32]
  fi#60: size=4, align=4, at location [SP-36]
Constant Pool:
  cp#0: @h264_dec_mv_array, align=4
  cp#1: -1240768329, align=4
  cp#2: @h264_dec_list_imgUV, align=4
  cp#3: @h264_dec_img_mpr, align=4
  cp#4: @h264_dec_img_m7, align=4
  cp#5: 1272582903, align=4
  cp#6: @h264_dec_dec_picture_imgUV, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r7, killed $r8, killed $r9, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 36
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r9, -16
  frame-setup CFI_INSTRUCTION offset $r8, -20
  frame-setup CFI_INSTRUCTION offset $r7, -24
  frame-setup CFI_INSTRUCTION offset $r6, -28
  frame-setup CFI_INSTRUCTION offset $r5, -32
  frame-setup CFI_INSTRUCTION offset $r4, -36
  $r11 = frame-setup ADDri killed $sp, 28, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 212, 14, $noreg, $noreg
  STRi12 $r0, $r11, -72, 14, $noreg :: (store (s32) into %stack.10)
  renamable $r1 = LDRi12 renamable $r0, 548, 14, $noreg, debug-location !180 :: (load (s32) from %ir.mb_cr_size_x); batchtest/h264_dec/h264_dec.c:141:22
  renamable $r0 = LDRi12 renamable $r0, 552, 14, $noreg, debug-location !183 :: (load (s32) from %ir.mb_cr_size_y); batchtest/h264_dec/h264_dec.c:144:22
  STRi12 $r0, $r11, -68, 14, $noreg :: (store (s32) into %stack.9)
  renamable $r0 = MOVi 64, 14, $noreg, $noreg
  STRi12 $r0, $r11, -64, 14, $noreg :: (store (s32) into %stack.8)
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !181; batchtest/h264_dec/h264_dec.c:141:15
  $r1 = LDRi12 $r11, -68, 14, $noreg, debug-location !181 :: (load (s32) from %stack.9); batchtest/h264_dec/h264_dec.c:141:15
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !181; batchtest/h264_dec/h264_dec.c:141:15
  $r0 = LDRi12 $r11, -64, 14, $noreg :: (load (s32) from %stack.8)
  STRi12 $r2, $r11, -52, 14, $noreg :: (store (s32) into %stack.5)
  $r3 = MOVr $r2, 14, $noreg, $noreg, debug-location !181; batchtest/h264_dec/h264_dec.c:141:15
  STRi12 killed $r3, $r11, -60, 14, $noreg :: (store (s32) into %stack.7)
  renamable $r2 = nsw SUBri renamable $r2, 1, 14, $noreg, $noreg, debug-location !182; batchtest/h264_dec/h264_dec.c:142:17
  STRi12 killed $r2, $r11, -56, 14, $noreg :: (store (s32) into %stack.6)
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !184; batchtest/h264_dec/h264_dec.c:144:15
  $r1 = LDRi12 $r11, -52, 14, $noreg, debug-location !184 :: (load (s32) from %stack.5); batchtest/h264_dec/h264_dec.c:144:15
  $r2 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !184; batchtest/h264_dec/h264_dec.c:144:15
  $r0 = MOVr $r2, 14, $noreg, $noreg, debug-location !184; batchtest/h264_dec/h264_dec.c:144:15
  STRi12 killed $r0, $r11, -48, 14, $noreg :: (store (s32) into %stack.4)
  renamable $r0 = nsw SUBri renamable $r2, 1, 14, $noreg, $noreg, debug-location !185; batchtest/h264_dec/h264_dec.c:145:17
  STRi12 killed $r0, $r11, -44, 14, $noreg :: (store (s32) into %stack.3)
  early-clobber renamable $r0 = nsw MULv5 killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !186; batchtest/h264_dec/h264_dec.c:147:15
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !186; batchtest/h264_dec/h264_dec.c:147:15
  STRi12 killed $r1, $r11, -40, 14, $noreg :: (store (s32) into %stack.2)
  renamable $r0 = MOVsi killed renamable $r0, 9, 14, $noreg, $noreg, debug-location !187; batchtest/h264_dec/h264_dec.c:148:13
  STRi12 killed $r0, $r11, -36, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -32, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !188; batchtest/h264_dec/h264_dec.c:151:11

bb.1.for.cond:
; predecessors: %bb.0, %bb.339
  successors: %bb.340, %bb.2

  $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !189 :: (load (s32) from %stack.0); batchtest/h264_dec/h264_dec.c:0
  STRi12 $r0, $r11, -76, 14, $noreg :: (store (s32) into %stack.11)
  CMPri renamable $r0, 2, 14, $noreg, implicit-def $cpsr, debug-location !191; batchtest/h264_dec/h264_dec.c:151:5
  Bcc %bb.340, 0, killed $cpsr, debug-location !191; batchtest/h264_dec/h264_dec.c:151:5
  B %bb.2, debug-location !191; batchtest/h264_dec/h264_dec.c:151:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -80, 14, $noreg :: (store (s32) into %stack.12)
  B %bb.3, debug-location !192; batchtest/h264_dec/h264_dec.c:156:13

bb.3.for.cond3:
; predecessors: %bb.2, %bb.319
  successors: %bb.4, %bb.320

  $r1 = LDRi12 $r11, -72, 14, $noreg, debug-location !189 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:0
  $r0 = LDRi12 $r11, -80, 14, $noreg, debug-location !189 :: (load (s32) from %stack.12); batchtest/h264_dec/h264_dec.c:0
  STRi12 $r0, $r11, -84, 14, $noreg :: (store (s32) into %stack.13)
  renamable $r1 = LDRi12 renamable $r1, 544, 14, $noreg, debug-location !193 :: (load (s32) from %ir.num_blk8x8_uv); batchtest/h264_dec/h264_dec.c:156:33
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 251, 14, $noreg, $noreg, debug-location !194; batchtest/h264_dec/h264_dec.c:156:47
  CMPrsi renamable $r0, killed renamable $r1, 9, 14, $noreg, implicit-def $cpsr, debug-location !196; batchtest/h264_dec/h264_dec.c:156:7
  Bcc %bb.320, 10, killed $cpsr, debug-location !196; batchtest/h264_dec/h264_dec.c:156:7
  B %bb.4, debug-location !196; batchtest/h264_dec/h264_dec.c:156:7

bb.4.for.body6:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -88, 14, $noreg :: (store (s32) into %stack.14)
  B %bb.5, debug-location !197; batchtest/h264_dec/h264_dec.c:158:15

bb.5.for.cond7:
; predecessors: %bb.4, %bb.317
  successors: %bb.318, %bb.6

  $r0 = LDRi12 $r11, -88, 14, $noreg, debug-location !189 :: (load (s32) from %stack.14); batchtest/h264_dec/h264_dec.c:0
  STRi12 $r0, $r11, -92, 14, $noreg :: (store (s32) into %stack.15)
  CMPri renamable $r0, 4, 14, $noreg, implicit-def $cpsr, debug-location !199; batchtest/h264_dec/h264_dec.c:158:9
  Bcc %bb.318, 0, killed $cpsr, debug-location !199; batchtest/h264_dec/h264_dec.c:158:9
  B %bb.6, debug-location !199; batchtest/h264_dec/h264_dec.c:158:9

bb.6.for.body9:
; predecessors: %bb.5
  successors: %bb.304, %bb.7

  $r0 = LDRi12 $r11, -72, 14, $noreg, debug-location !200 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:160:21
  renamable $r1 = LDRi12 renamable $r0, 12, 14, $noreg, debug-location !200 :: (load (s32) from %ir.pix_c_y); batchtest/h264_dec/h264_dec.c:160:21
  STRi12 killed $r1, $r11, -100, 14, $noreg :: (store (s32) into %stack.17)
  renamable $r0 = LDRi12 renamable $r0, 16, 14, $noreg, debug-location !201 :: (load (s32) from %ir.pix_c_x); batchtest/h264_dec/h264_dec.c:162:21
  STRi12 killed $r0, $r11, -96, 14, $noreg :: (store (s32) into %stack.16)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !202; batchtest/h264_dec/h264_dec.c:167:16
  Bcc %bb.304, 1, killed $cpsr, debug-location !202; batchtest/h264_dec/h264_dec.c:167:16
  B %bb.7, debug-location !202; batchtest/h264_dec/h264_dec.c:167:16

bb.7.if.then:
; predecessors: %bb.6
  successors: %bb.8, %bb.64

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !203; batchtest/h264_dec/h264_dec.c:168:18
  Bcc %bb.64, 1, killed $cpsr, debug-location !203; batchtest/h264_dec/h264_dec.c:168:18
  B %bb.8, debug-location !203; batchtest/h264_dec/h264_dec.c:168:18

bb.8.if.then12:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -104, 14, $noreg :: (store (s32) into %stack.18)
  B %bb.9, debug-location !204; batchtest/h264_dec/h264_dec.c:171:21

bb.9.for.cond13:
; predecessors: %bb.8, %bb.62
  successors: %bb.63, %bb.10

  $r0 = LDRi12 $r11, -104, 14, $noreg, debug-location !189 :: (load (s32) from %stack.18); batchtest/h264_dec/h264_dec.c:0
  STRi12 $r0, $r11, -108, 14, $noreg :: (store (s32) into %stack.19)
  CMPri renamable $r0, 4, 14, $noreg, implicit-def $cpsr, debug-location !206; batchtest/h264_dec/h264_dec.c:171:15
  Bcc %bb.63, 0, killed $cpsr, debug-location !206; batchtest/h264_dec/h264_dec.c:171:15
  B %bb.10, debug-location !206; batchtest/h264_dec/h264_dec.c:171:15

bb.10.for.body15:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  $r1 = LDRi12 $r11, -72, 14, $noreg, debug-location !207 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:172:29
  $r0 = LDRi12 $r11, -100, 14, $noreg, debug-location !207 :: (load (s32) from %stack.17); batchtest/h264_dec/h264_dec.c:172:29
  $r2 = LDRi12 $r11, -108, 14, $noreg, debug-location !207 :: (load (s32) from %stack.19); batchtest/h264_dec/h264_dec.c:172:29
  renamable $r0 = nsw ADDrr renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !207; batchtest/h264_dec/h264_dec.c:172:29
  renamable $r1 = LDRi12 renamable $r1, 552, 14, $noreg, debug-location !208 :: (load (s32) from %ir.mb_cr_size_y17); batchtest/h264_dec/h264_dec.c:172:45
  renamable $r2 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !209; batchtest/h264_dec/h264_dec.c:172:58
  renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r2, 243, 14, $noreg, $noreg, debug-location !209; batchtest/h264_dec/h264_dec.c:172:58
  renamable $r1 = MOVsi killed renamable $r1, 17, 14, $noreg, $noreg, debug-location !209; batchtest/h264_dec/h264_dec.c:172:58
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !210; batchtest/h264_dec/h264_dec.c:172:36
  renamable $r1 = MOVsi renamable $r0, 249, 14, $noreg, $noreg, debug-location !211; batchtest/h264_dec/h264_dec.c:172:66
  renamable $r1 = ADDrsi renamable $r0, killed renamable $r1, 211, 14, $noreg, $noreg, debug-location !211; batchtest/h264_dec/h264_dec.c:172:66
  renamable $r1 = BICri killed renamable $r1, 63, 14, $noreg, $noreg, debug-location !211; batchtest/h264_dec/h264_dec.c:172:66
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !211; batchtest/h264_dec/h264_dec.c:172:66
  STRi12 killed $r0, $r11, -116, 14, $noreg :: (store (s32) into %stack.21)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -112, 14, $noreg :: (store (s32) into %stack.20)
  B %bb.11, debug-location !212; batchtest/h264_dec/h264_dec.c:174:23

bb.11.for.cond20:
; predecessors: %bb.10, %bb.60
  successors: %bb.61, %bb.12

  $r0 = LDRi12 $r11, -112, 14, $noreg, debug-location !189 :: (load (s32) from %stack.20); batchtest/h264_dec/h264_dec.c:0
  STRi12 $r0, $sp, 120, 14, $noreg :: (store (s32) into %stack.22)
  CMPri renamable $r0, 4, 14, $noreg, implicit-def $cpsr, debug-location !214; batchtest/h264_dec/h264_dec.c:174:17
  Bcc %bb.61, 0, killed $cpsr, debug-location !214; batchtest/h264_dec/h264_dec.c:174:17
  B %bb.12, debug-location !214; batchtest/h264_dec/h264_dec.c:174:17

bb.12.for.body22:
; predecessors: %bb.11
  successors: %bb.14, %bb.13

  $r1 = LDRi12 $r11, -72, 14, $noreg, debug-location !215 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:175:32
  $r0 = LDRi12 $r11, -96, 14, $noreg, debug-location !215 :: (load (s32) from %stack.16); batchtest/h264_dec/h264_dec.c:175:32
  $r2 = LDRi12 $sp, 120, 14, $noreg, debug-location !215 :: (load (s32) from %stack.22); batchtest/h264_dec/h264_dec.c:175:32
  renamable $r0 = nsw ADDrr renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !215; batchtest/h264_dec/h264_dec.c:175:32
  STRi12 $r0, $sp, 108, 14, $noreg :: (store (s32) into %stack.25)
  renamable $r1 = LDRi12 renamable $r1, 548, 14, $noreg, debug-location !216 :: (load (s32) from %ir.mb_cr_size_x24); batchtest/h264_dec/h264_dec.c:175:48
  renamable $r2 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !217; batchtest/h264_dec/h264_dec.c:175:61
  renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r2, 243, 14, $noreg, $noreg, debug-location !217; batchtest/h264_dec/h264_dec.c:175:61
  renamable $r1 = MOVsi killed renamable $r1, 17, 14, $noreg, $noreg, debug-location !217; batchtest/h264_dec/h264_dec.c:175:61
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !218; batchtest/h264_dec/h264_dec.c:175:39
  $r2 = LDRi12 $r11, -60, 14, $noreg, debug-location !218 :: (load (s32) from %stack.7); batchtest/h264_dec/h264_dec.c:175:39
  $r1 = LDRi12 $sp, 108, 14, $noreg, debug-location !218 :: (load (s32) from %stack.25); batchtest/h264_dec/h264_dec.c:175:39
  $r3 = MOVr $r0, 14, $noreg, $noreg, debug-location !218; batchtest/h264_dec/h264_dec.c:175:39
  $r0 = LDRi12 $r11, -116, 14, $noreg, debug-location !219 :: (load (s32) from %stack.21); batchtest/h264_dec/h264_dec.c:175:69
  renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !219; batchtest/h264_dec/h264_dec.c:175:69
  renamable $r12 = ADDrsi renamable $r3, killed renamable $r12, 211, 14, $noreg, $noreg, debug-location !219; batchtest/h264_dec/h264_dec.c:175:69
  renamable $r12 = BICri killed renamable $r12, 63, 14, $noreg, $noreg, debug-location !219; batchtest/h264_dec/h264_dec.c:175:69
  renamable $r3 = SUBrr killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !219; batchtest/h264_dec/h264_dec.c:175:69
  STRi12 $r3, $sp, 112, 14, $noreg :: (store (s32) into %stack.24)
  renamable $r12 = ADDrsi renamable $r0, renamable $r0, 50, 14, $noreg, $noreg, debug-location !222; batchtest/h264_dec/h264_dec.c:176:45
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !222 :: (load (s32) from constant-pool); batchtest/h264_dec/h264_dec.c:176:45
  renamable $r0 = ADDrsi killed renamable $r0, killed renamable $r12, 10, 14, $noreg, $noreg, debug-location !222; batchtest/h264_dec/h264_dec.c:176:45
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r3, 10, 14, $noreg, $noreg, debug-location !222; batchtest/h264_dec/h264_dec.c:176:45
  renamable $r3 = LDRSB killed renamable $r0, $noreg, 0, 14, $noreg, debug-location !222 :: (load (s8) from %ir.arrayidx31); batchtest/h264_dec/h264_dec.c:176:45
  early-clobber renamable $r0 = nsw MLAv5 killed renamable $r1, renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !223; batchtest/h264_dec/h264_dec.c:176:43
  STRi12 killed $r0, $sp, 116, 14, $noreg :: (store (s32) into %stack.23)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !224; batchtest/h264_dec/h264_dec.c:178:24
  Bcc %bb.14, 1, killed $cpsr, debug-location !224; batchtest/h264_dec/h264_dec.c:178:24
  B %bb.13, debug-location !224; batchtest/h264_dec/h264_dec.c:178:24

bb.13.if.then34:
; predecessors: %bb.12
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  $r2 = LDRi12 $r11, -48, 14, $noreg, debug-location !225 :: (load (s32) from %stack.4); batchtest/h264_dec/h264_dec.c:179:31
  $r3 = LDRi12 $sp, 112, 14, $noreg, debug-location !225 :: (load (s32) from %stack.24); batchtest/h264_dec/h264_dec.c:179:31
  $r0 = LDRi12 $r11, -116, 14, $noreg, debug-location !225 :: (load (s32) from %stack.21); batchtest/h264_dec/h264_dec.c:179:31
  $r1 = LDRi12 $r11, -100, 14, $noreg, debug-location !225 :: (load (s32) from %stack.17); batchtest/h264_dec/h264_dec.c:179:31
  $r12 = LDRi12 $r11, -108, 14, $noreg, debug-location !225 :: (load (s32) from %stack.19); batchtest/h264_dec/h264_dec.c:179:31
  renamable $r1 = nsw ADDrr renamable $r1, renamable $r12, 14, $noreg, $noreg, debug-location !225; batchtest/h264_dec/h264_dec.c:179:31
  renamable $r12 = ADDrsi renamable $r0, renamable $r0, 50, 14, $noreg, $noreg, debug-location !227; batchtest/h264_dec/h264_dec.c:179:47
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !227 :: (load (s32) from constant-pool); batchtest/h264_dec/h264_dec.c:179:47
  renamable $r0 = ADDrsi killed renamable $r0, killed renamable $r12, 10, 14, $noreg, $noreg, debug-location !227; batchtest/h264_dec/h264_dec.c:179:47
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r3, 10, 14, $noreg, $noreg, debug-location !227; batchtest/h264_dec/h264_dec.c:179:47
  renamable $r3 = LDRSB killed renamable $r0, $noreg, 1, 14, $noreg, debug-location !227 :: (load (s8) from %ir.arrayidx39); batchtest/h264_dec/h264_dec.c:179:47
  early-clobber renamable $r0 = nsw MLAv5 killed renamable $r1, renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !228; batchtest/h264_dec/h264_dec.c:179:45
  STRi12 killed $r0, $sp, 104, 14, $noreg :: (store (s32) into %stack.26)
  B %bb.18, debug-location !229; batchtest/h264_dec/h264_dec.c:179:21

bb.14.if.else:
; predecessors: %bb.12
  successors: %bb.15, %bb.16

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !230; batchtest/h264_dec/h264_dec.c:181:26
  Bcc %bb.16, 1, killed $cpsr, debug-location !230; batchtest/h264_dec/h264_dec.c:181:26
  B %bb.15, debug-location !230; batchtest/h264_dec/h264_dec.c:181:26

bb.15.if.then45:
; predecessors: %bb.14
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  B %bb.17, debug-location !231; batchtest/h264_dec/h264_dec.c:184:21

bb.16.if.else56:
; predecessors: %bb.14
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  B %bb.17

bb.17.if.end:
; predecessors: %bb.16, %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  renamable $r0 = IMPLICIT_DEF debug-location !189; batchtest/h264_dec/h264_dec.c:0
  B %bb.18

bb.18.if.end69:
; predecessors: %bb.13, %bb.17
  successors: %bb.19, %bb.20

  $r0 = LDRi12 $sp, 104, 14, $noreg, debug-location !189 :: (load (s32) from %stack.26); batchtest/h264_dec/h264_dec.c:0
  STRi12 killed $r0, $sp, 100, 14, $noreg :: (store (s32) into %stack.27)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !232; batchtest/h264_dec/h264_dec.c:192:24
  Bcc %bb.20, 1, killed $cpsr, debug-location !232; batchtest/h264_dec/h264_dec.c:192:24
  B %bb.19, debug-location !232; batchtest/h264_dec/h264_dec.c:192:24

bb.19.if.then73:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20, debug-location !233; batchtest/h264_dec/h264_dec.c:193:21

bb.20.if.end75:
; predecessors: %bb.18, %bb.19
  successors: %bb.22, %bb.21

  $r1 = LDRi12 $r11, -60, 14, $noreg, debug-location !234 :: (load (s32) from %stack.7); batchtest/h264_dec/h264_dec.c:195:42
  $r0 = LDRi12 $sp, 116, 14, $noreg, debug-location !234 :: (load (s32) from %stack.23); batchtest/h264_dec/h264_dec.c:195:42
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !234; batchtest/h264_dec/h264_dec.c:195:42
  $r1 = LDRi12 $r11, -72, 14, $noreg, debug-location !234 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:195:42
  renamable $r1 = LDRi12 renamable $r1, 8, 14, $noreg, debug-location !235 :: (load (s32) from %ir.width_cr); batchtest/h264_dec/h264_dec.c:195:56
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !237; batchtest/h264_dec/h264_dec.c:195:37
  Bcc %bb.22, 11, killed $cpsr, debug-location !237; batchtest/h264_dec/h264_dec.c:195:37
  B %bb.21, debug-location !237; batchtest/h264_dec/h264_dec.c:195:37

bb.21.cond.true:
; predecessors: %bb.20
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  $r0 = LDRi12 $r11, -72, 14, $noreg, debug-location !238 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:196:42
  renamable $r0 = LDRi12 renamable $r0, 8, 14, $noreg, debug-location !238 :: (load (s32) from %ir.width_cr80); batchtest/h264_dec/h264_dec.c:196:42
  renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !239; batchtest/h264_dec/h264_dec.c:196:51
  STRi12 killed $r0, $sp, 96, 14, $noreg :: (store (s32) into %stack.28)
  B %bb.23, debug-location !237; batchtest/h264_dec/h264_dec.c:195:37

bb.22.cond.false:
; predecessors: %bb.20
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  $r1 = LDRi12 $r11, -60, 14, $noreg, debug-location !240 :: (load (s32) from %stack.7); batchtest/h264_dec/h264_dec.c:196:60
  $r0 = LDRi12 $sp, 116, 14, $noreg, debug-location !240 :: (load (s32) from %stack.23); batchtest/h264_dec/h264_dec.c:196:60
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !240; batchtest/h264_dec/h264_dec.c:196:60
  STRi12 killed $r0, $sp, 96, 14, $noreg :: (store (s32) into %stack.28)
  B %bb.23, debug-location !237; batchtest/h264_dec/h264_dec.c:195:37

bb.23.cond.end:
; predecessors: %bb.21, %bb.22
  successors: %bb.24, %bb.28

  $r0 = LDRi12 $sp, 96, 14, $noreg, debug-location !237 :: (load (s32) from %stack.28); batchtest/h264_dec/h264_dec.c:195:37
  CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !242; batchtest/h264_dec/h264_dec.c:195:29
  Bcc %bb.28, 11, killed $cpsr, debug-location !242; batchtest/h264_dec/h264_dec.c:195:29
  B %bb.24, debug-location !242; batchtest/h264_dec/h264_dec.c:195:29

bb.24.cond.true85:
; predecessors: %bb.23
  successors: %bb.26, %bb.25

  $r1 = LDRi12 $r11, -60, 14, $noreg, debug-location !243 :: (load (s32) from %stack.7); batchtest/h264_dec/h264_dec.c:197:36
  $r0 = LDRi12 $sp, 116, 14, $noreg, debug-location !243 :: (load (s32) from %stack.23); batchtest/h264_dec/h264_dec.c:197:36
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !243; batchtest/h264_dec/h264_dec.c:197:36
  $r1 = LDRi12 $r11, -72, 14, $noreg, debug-location !243 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:197:36
  renamable $r1 = LDRi12 renamable $r1, 8, 14, $noreg, debug-location !244 :: (load (s32) from %ir.width_cr87); batchtest/h264_dec/h264_dec.c:197:50
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !246; batchtest/h264_dec/h264_dec.c:197:31
  Bcc %bb.26, 11, killed $cpsr, debug-location !246; batchtest/h264_dec/h264_dec.c:197:31
  B %bb.25, debug-location !246; batchtest/h264_dec/h264_dec.c:197:31

bb.25.cond.true91:
; predecessors: %bb.24
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  $r0 = LDRi12 $r11, -72, 14, $noreg, debug-location !247 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:198:36
  renamable $r0 = LDRi12 renamable $r0, 8, 14, $noreg, debug-location !247 :: (load (s32) from %ir.width_cr92); batchtest/h264_dec/h264_dec.c:198:36
  renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !248; batchtest/h264_dec/h264_dec.c:198:45
  STRi12 killed $r0, $sp, 92, 14, $noreg :: (store (s32) into %stack.29)
  B %bb.27, debug-location !246; batchtest/h264_dec/h264_dec.c:197:31

bb.26.cond.false94:
; predecessors: %bb.24
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  $r1 = LDRi12 $r11, -60, 14, $noreg, debug-location !249 :: (load (s32) from %stack.7); batchtest/h264_dec/h264_dec.c:198:54
  $r0 = LDRi12 $sp, 116, 14, $noreg, debug-location !249 :: (load (s32) from %stack.23); batchtest/h264_dec/h264_dec.c:198:54
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !249; batchtest/h264_dec/h264_dec.c:198:54
  STRi12 killed $r0, $sp, 92, 14, $noreg :: (store (s32) into %stack.29)
  B %bb.27, debug-location !246; batchtest/h264_dec/h264_dec.c:197:31

bb.27.cond.end96:
; predecessors: %bb.25, %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  $r0 = LDRi12 $sp, 92, 14, $noreg, debug-location !246 :: (load (s32) from %stack.29); batchtest/h264_dec/h264_dec.c:197:31
  STRi12 killed $r0, $sp, 88, 14, $noreg :: (store (s32) into %stack.30)
  B %bb.29, debug-location !242; batchtest/h264_dec/h264_dec.c:195:29

bb.28.cond.false98:
; predecessors: %bb.23
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 88, 14, $noreg :: (store (s32) into %stack.30)
  B %bb.29, debug-location !242; batchtest/h264_dec/h264_dec.c:195:29

bb.29.cond.end99:
; predecessors: %bb.28, %bb.27
  successors: %bb.30, %bb.31

  $r1 = LDRi12 $r11, -48, 14, $noreg, debug-location !242 :: (load (s32) from %stack.4); batchtest/h264_dec/h264_dec.c:195:29
  $r0 = LDRi12 $sp, 100, 14, $noreg, debug-location !242 :: (load (s32) from %stack.27); batchtest/h264_dec/h264_dec.c:195:29
  $r2 = LDRi12 $sp, 88, 14, $noreg, debug-location !242 :: (load (s32) from %stack.30); batchtest/h264_dec/h264_dec.c:195:29
  renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  dead early-clobber renamable $r12, early-clobber renamable $r3 = SMULLv5 renamable $r2, killed renamable $lr, 14, $noreg, $noreg, debug-location !250; batchtest/h264_dec/h264_dec.c:198:71
  renamable $r12 = ADDrr killed renamable $r3, renamable $r2, 14, $noreg, $noreg, debug-location !250; batchtest/h264_dec/h264_dec.c:198:71
  renamable $r3 = MOVsi renamable $r12, 41, 14, $noreg, $noreg, debug-location !250; batchtest/h264_dec/h264_dec.c:198:71
  renamable $r12 = ADDrsi killed renamable $r3, killed renamable $r12, 251, 14, $noreg, $noreg, debug-location !250; batchtest/h264_dec/h264_dec.c:198:71
  renamable $lr = MOVi 45, 14, $noreg, $noreg
  early-clobber renamable $r3 = MULv5 killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !250; batchtest/h264_dec/h264_dec.c:198:71
  renamable $r2 = SUBrr killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !250; batchtest/h264_dec/h264_dec.c:198:71
  STRi12 killed $r2, $sp, 84, 14, $noreg :: (store (s32) into %stack.31)
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !251; batchtest/h264_dec/h264_dec.c:199:42
  CMPri killed renamable $r0, 288, 14, $noreg, implicit-def $cpsr, debug-location !253; batchtest/h264_dec/h264_dec.c:199:37
  Bcc %bb.31, 11, killed $cpsr, debug-location !253; batchtest/h264_dec/h264_dec.c:199:37
  B %bb.30, debug-location !253; batchtest/h264_dec/h264_dec.c:199:37

bb.30.cond.true105:
; predecessors: %bb.29
  successors: %bb.32(0x80000000); %bb.32(100.00%)

  $r0 = MOVi 31, 14, $noreg, $noreg
  $r0 = ORRri $r0, 256, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 80, 14, $noreg :: (store (s32) into %stack.32)
  B %bb.32, debug-location !253; batchtest/h264_dec/h264_dec.c:199:37

bb.31.cond.false106:
; predecessors: %bb.29
  successors: %bb.32(0x80000000); %bb.32(100.00%)

  $r1 = LDRi12 $r11, -48, 14, $noreg, debug-location !254 :: (load (s32) from %stack.4); batchtest/h264_dec/h264_dec.c:200:51
  $r0 = LDRi12 $sp, 100, 14, $noreg, debug-location !254 :: (load (s32) from %stack.27); batchtest/h264_dec/h264_dec.c:200:51
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !254; batchtest/h264_dec/h264_dec.c:200:51
  STRi12 killed $r0, $sp, 80, 14, $noreg :: (store (s32) into %stack.32)
  B %bb.32, debug-location !253; batchtest/h264_dec/h264_dec.c:199:37

bb.32.cond.end108:
; predecessors: %bb.31, %bb.30
  successors: %bb.33, %bb.37

  $r0 = LDRi12 $sp, 80, 14, $noreg, debug-location !253 :: (load (s32) from %stack.32); batchtest/h264_dec/h264_dec.c:199:37
  CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !256; batchtest/h264_dec/h264_dec.c:199:29
  Bcc %bb.37, 11, killed $cpsr, debug-location !256; batchtest/h264_dec/h264_dec.c:199:29
  B %bb.33, debug-location !256; batchtest/h264_dec/h264_dec.c:199:29

bb.33.cond.true112:
; predecessors: %bb.32
  successors: %bb.34, %bb.35

  $r1 = LDRi12 $r11, -48, 14, $noreg, debug-location !257 :: (load (s32) from %stack.4); batchtest/h264_dec/h264_dec.c:201:36
  $r0 = LDRi12 $sp, 100, 14, $noreg, debug-location !257 :: (load (s32) from %stack.27); batchtest/h264_dec/h264_dec.c:201:36
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !257; batchtest/h264_dec/h264_dec.c:201:36
  CMPri killed renamable $r0, 288, 14, $noreg, implicit-def $cpsr, debug-location !259; batchtest/h264_dec/h264_dec.c:201:31
  Bcc %bb.35, 11, killed $cpsr, debug-location !259; batchtest/h264_dec/h264_dec.c:201:31
  B %bb.34, debug-location !259; batchtest/h264_dec/h264_dec.c:201:31

bb.34.cond.true116:
; predecessors: %bb.33
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  $r0 = MOVi 31, 14, $noreg, $noreg
  $r0 = ORRri $r0, 256, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 76, 14, $noreg :: (store (s32) into %stack.33)
  B %bb.36, debug-location !259; batchtest/h264_dec/h264_dec.c:201:31

bb.35.cond.false117:
; predecessors: %bb.33
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  $r1 = LDRi12 $r11, -48, 14, $noreg, debug-location !260 :: (load (s32) from %stack.4); batchtest/h264_dec/h264_dec.c:202:45
  $r0 = LDRi12 $sp, 100, 14, $noreg, debug-location !260 :: (load (s32) from %stack.27); batchtest/h264_dec/h264_dec.c:202:45
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !260; batchtest/h264_dec/h264_dec.c:202:45
  STRi12 killed $r0, $sp, 76, 14, $noreg :: (store (s32) into %stack.33)
  B %bb.36, debug-location !259; batchtest/h264_dec/h264_dec.c:201:31

bb.36.cond.end119:
; predecessors: %bb.35, %bb.34
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  $r0 = LDRi12 $sp, 76, 14, $noreg, debug-location !259 :: (load (s32) from %stack.33); batchtest/h264_dec/h264_dec.c:201:31
  STRi12 killed $r0, $sp, 72, 14, $noreg :: (store (s32) into %stack.34)
  B %bb.38, debug-location !256; batchtest/h264_dec/h264_dec.c:199:29

bb.37.cond.false121:
; predecessors: %bb.32
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 72, 14, $noreg :: (store (s32) into %stack.34)
  B %bb.38, debug-location !256; batchtest/h264_dec/h264_dec.c:199:29

bb.38.cond.end122:
; predecessors: %bb.37, %bb.36
  successors: %bb.40, %bb.39

  $r1 = LDRi12 $r11, -60, 14, $noreg, debug-location !256 :: (load (s32) from %stack.7); batchtest/h264_dec/h264_dec.c:199:29
  $r0 = LDRi12 $sp, 116, 14, $noreg, debug-location !256 :: (load (s32) from %stack.23); batchtest/h264_dec/h264_dec.c:199:29
  $r2 = LDRi12 $r11, -56, 14, $noreg, debug-location !256 :: (load (s32) from %stack.6); batchtest/h264_dec/h264_dec.c:199:29
  $r3 = LDRi12 $sp, 72, 14, $noreg, debug-location !256 :: (load (s32) from %stack.34); batchtest/h264_dec/h264_dec.c:199:29
  renamable $r4 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  dead early-clobber renamable $lr, early-clobber renamable $r12 = SMULLv5 renamable $r3, killed renamable $r4, 14, $noreg, $noreg, debug-location !261; batchtest/h264_dec/h264_dec.c:202:62
  renamable $lr = ADDrr killed renamable $r12, renamable $r3, 14, $noreg, $noreg, debug-location !261; batchtest/h264_dec/h264_dec.c:202:62
  renamable $r12 = MOVsi renamable $lr, 41, 14, $noreg, $noreg, debug-location !261; batchtest/h264_dec/h264_dec.c:202:62
  renamable $lr = ADDrsi killed renamable $r12, killed renamable $lr, 251, 14, $noreg, $noreg, debug-location !261; batchtest/h264_dec/h264_dec.c:202:62
  renamable $r4 = MOVi 45, 14, $noreg, $noreg
  early-clobber renamable $r12 = MULv5 killed renamable $lr, killed renamable $r4, 14, $noreg, $noreg, debug-location !261; batchtest/h264_dec/h264_dec.c:202:62
  renamable $r3 = SUBrr killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !261; batchtest/h264_dec/h264_dec.c:202:62
  STRi12 killed $r3, $sp, 68, 14, $noreg :: (store (s32) into %stack.35)
  renamable $r0 = nsw ADDrr renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !262; batchtest/h264_dec/h264_dec.c:204:40
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !263; batchtest/h264_dec/h264_dec.c:204:49
  $r1 = LDRi12 $r11, -72, 14, $noreg, debug-location !263 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:204:49
  renamable $r1 = LDRi12 renamable $r1, 8, 14, $noreg, debug-location !264 :: (load (s32) from %ir.width_cr127); batchtest/h264_dec/h264_dec.c:204:63
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !266; batchtest/h264_dec/h264_dec.c:204:33
  Bcc %bb.40, 11, killed $cpsr, debug-location !266; batchtest/h264_dec/h264_dec.c:204:33
  B %bb.39, debug-location !266; batchtest/h264_dec/h264_dec.c:204:33

bb.39.cond.true131:
; predecessors: %bb.38
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  $r0 = LDRi12 $r11, -72, 14, $noreg, debug-location !267 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:205:40
  renamable $r0 = LDRi12 renamable $r0, 8, 14, $noreg, debug-location !267 :: (load (s32) from %ir.width_cr132); batchtest/h264_dec/h264_dec.c:205:40
  renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !268; batchtest/h264_dec/h264_dec.c:205:49
  STRi12 killed $r0, $sp, 64, 14, $noreg :: (store (s32) into %stack.36)
  B %bb.41, debug-location !266; batchtest/h264_dec/h264_dec.c:204:33

bb.40.cond.false134:
; predecessors: %bb.38
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  $r1 = LDRi12 $r11, -60, 14, $noreg, debug-location !269 :: (load (s32) from %stack.7); batchtest/h264_dec/h264_dec.c:205:60
  $r0 = LDRi12 $sp, 116, 14, $noreg, debug-location !269 :: (load (s32) from %stack.23); batchtest/h264_dec/h264_dec.c:205:60
  $r2 = LDRi12 $r11, -56, 14, $noreg, debug-location !269 :: (load (s32) from %stack.6); batchtest/h264_dec/h264_dec.c:205:60
  renamable $r0 = nsw ADDrr renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !269; batchtest/h264_dec/h264_dec.c:205:60
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !270; batchtest/h264_dec/h264_dec.c:205:69
  STRi12 killed $r0, $sp, 64, 14, $noreg :: (store (s32) into %stack.36)
  B %bb.41, debug-location !266; batchtest/h264_dec/h264_dec.c:204:33

bb.41.cond.end137:
; predecessors: %bb.39, %bb.40
  successors: %bb.42, %bb.46

  $r0 = LDRi12 $sp, 64, 14, $noreg, debug-location !266 :: (load (s32) from %stack.36); batchtest/h264_dec/h264_dec.c:204:33
  CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !272; batchtest/h264_dec/h264_dec.c:203:29
  Bcc %bb.46, 11, killed $cpsr, debug-location !272; batchtest/h264_dec/h264_dec.c:203:29
  B %bb.42, debug-location !272; batchtest/h264_dec/h264_dec.c:203:29

bb.42.cond.true141:
; predecessors: %bb.41
  successors: %bb.44, %bb.43

  $r1 = LDRi12 $r11, -60, 14, $noreg, debug-location !273 :: (load (s32) from %stack.7); batchtest/h264_dec/h264_dec.c:206:40
  $r0 = LDRi12 $sp, 116, 14, $noreg, debug-location !273 :: (load (s32) from %stack.23); batchtest/h264_dec/h264_dec.c:206:40
  $r2 = LDRi12 $r11, -56, 14, $noreg, debug-location !273 :: (load (s32) from %stack.6); batchtest/h264_dec/h264_dec.c:206:40
  renamable $r0 = nsw ADDrr renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !273; batchtest/h264_dec/h264_dec.c:206:40
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !274; batchtest/h264_dec/h264_dec.c:206:49
  $r1 = LDRi12 $r11, -72, 14, $noreg, debug-location !274 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:206:49
  renamable $r1 = LDRi12 renamable $r1, 8, 14, $noreg, debug-location !275 :: (load (s32) from %ir.width_cr144); batchtest/h264_dec/h264_dec.c:206:63
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !277; batchtest/h264_dec/h264_dec.c:206:33
  Bcc %bb.44, 11, killed $cpsr, debug-location !277; batchtest/h264_dec/h264_dec.c:206:33
  B %bb.43, debug-location !277; batchtest/h264_dec/h264_dec.c:206:33

bb.43.cond.true148:
; predecessors: %bb.42
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  $r0 = LDRi12 $r11, -72, 14, $noreg, debug-location !278 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:207:40
  renamable $r0 = LDRi12 renamable $r0, 8, 14, $noreg, debug-location !278 :: (load (s32) from %ir.width_cr149); batchtest/h264_dec/h264_dec.c:207:40
  renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !279; batchtest/h264_dec/h264_dec.c:207:49
  STRi12 killed $r0, $sp, 60, 14, $noreg :: (store (s32) into %stack.37)
  B %bb.45, debug-location !277; batchtest/h264_dec/h264_dec.c:206:33

bb.44.cond.false151:
; predecessors: %bb.42
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  $r1 = LDRi12 $r11, -60, 14, $noreg, debug-location !280 :: (load (s32) from %stack.7); batchtest/h264_dec/h264_dec.c:208:38
  $r0 = LDRi12 $sp, 116, 14, $noreg, debug-location !280 :: (load (s32) from %stack.23); batchtest/h264_dec/h264_dec.c:208:38
  $r2 = LDRi12 $r11, -56, 14, $noreg, debug-location !280 :: (load (s32) from %stack.6); batchtest/h264_dec/h264_dec.c:208:38
  renamable $r0 = nsw ADDrr renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !280; batchtest/h264_dec/h264_dec.c:208:38
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !281; batchtest/h264_dec/h264_dec.c:208:47
  STRi12 killed $r0, $sp, 60, 14, $noreg :: (store (s32) into %stack.37)
  B %bb.45, debug-location !277; batchtest/h264_dec/h264_dec.c:206:33

bb.45.cond.end154:
; predecessors: %bb.43, %bb.44
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  $r0 = LDRi12 $sp, 60, 14, $noreg, debug-location !277 :: (load (s32) from %stack.37); batchtest/h264_dec/h264_dec.c:206:33
  STRi12 killed $r0, $sp, 56, 14, $noreg :: (store (s32) into %stack.38)
  B %bb.47, debug-location !272; batchtest/h264_dec/h264_dec.c:203:29

bb.46.cond.false156:
; predecessors: %bb.41
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 56, 14, $noreg :: (store (s32) into %stack.38)
  B %bb.47, debug-location !272; batchtest/h264_dec/h264_dec.c:203:29

bb.47.cond.end157:
; predecessors: %bb.46, %bb.45
  successors: %bb.48, %bb.49

  $r1 = LDRi12 $r11, -48, 14, $noreg, debug-location !272 :: (load (s32) from %stack.4); batchtest/h264_dec/h264_dec.c:203:29
  $r0 = LDRi12 $sp, 100, 14, $noreg, debug-location !272 :: (load (s32) from %stack.27); batchtest/h264_dec/h264_dec.c:203:29
  $r2 = LDRi12 $r11, -44, 14, $noreg, debug-location !272 :: (load (s32) from %stack.3); batchtest/h264_dec/h264_dec.c:203:29
  $r3 = LDRi12 $sp, 56, 14, $noreg, debug-location !272 :: (load (s32) from %stack.38); batchtest/h264_dec/h264_dec.c:203:29
  renamable $r4 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  dead early-clobber renamable $lr, early-clobber renamable $r12 = SMULLv5 renamable $r3, killed renamable $r4, 14, $noreg, $noreg, debug-location !282; batchtest/h264_dec/h264_dec.c:208:64
  renamable $lr = ADDrr killed renamable $r12, renamable $r3, 14, $noreg, $noreg, debug-location !282; batchtest/h264_dec/h264_dec.c:208:64
  renamable $r12 = MOVsi renamable $lr, 41, 14, $noreg, $noreg, debug-location !282; batchtest/h264_dec/h264_dec.c:208:64
  renamable $lr = ADDrsi killed renamable $r12, killed renamable $lr, 251, 14, $noreg, $noreg, debug-location !282; batchtest/h264_dec/h264_dec.c:208:64
  renamable $r4 = MOVi 45, 14, $noreg, $noreg
  early-clobber renamable $r12 = MULv5 killed renamable $lr, killed renamable $r4, 14, $noreg, $noreg, debug-location !282; batchtest/h264_dec/h264_dec.c:208:64
  renamable $r3 = SUBrr killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !282; batchtest/h264_dec/h264_dec.c:208:64
  STRi12 killed $r3, $sp, 52, 14, $noreg :: (store (s32) into %stack.39)
  renamable $r0 = nsw ADDrr renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !283; batchtest/h264_dec/h264_dec.c:209:44
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !284; batchtest/h264_dec/h264_dec.c:209:53
  CMPri killed renamable $r0, 288, 14, $noreg, implicit-def $cpsr, debug-location !286; batchtest/h264_dec/h264_dec.c:209:37
  Bcc %bb.49, 11, killed $cpsr, debug-location !286; batchtest/h264_dec/h264_dec.c:209:37
  B %bb.48, debug-location !286; batchtest/h264_dec/h264_dec.c:209:37

bb.48.cond.true164:
; predecessors: %bb.47
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  $r0 = MOVi 31, 14, $noreg, $noreg
  $r0 = ORRri $r0, 256, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 48, 14, $noreg :: (store (s32) into %stack.40)
  B %bb.50, debug-location !286; batchtest/h264_dec/h264_dec.c:209:37

bb.49.cond.false165:
; predecessors: %bb.47
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  $r1 = LDRi12 $r11, -48, 14, $noreg, debug-location !287 :: (load (s32) from %stack.4); batchtest/h264_dec/h264_dec.c:210:55
  $r0 = LDRi12 $sp, 100, 14, $noreg, debug-location !287 :: (load (s32) from %stack.27); batchtest/h264_dec/h264_dec.c:210:55
  $r2 = LDRi12 $r11, -44, 14, $noreg, debug-location !287 :: (load (s32) from %stack.3); batchtest/h264_dec/h264_dec.c:210:55
  renamable $r0 = nsw ADDrr renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !287; batchtest/h264_dec/h264_dec.c:210:55
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !288; batchtest/h264_dec/h264_dec.c:210:64
  STRi12 killed $r0, $sp, 48, 14, $noreg :: (store (s32) into %stack.40)
  B %bb.50, debug-location !286; batchtest/h264_dec/h264_dec.c:209:37

bb.50.cond.end168:
; predecessors: %bb.49, %bb.48
  successors: %bb.51, %bb.55

  $r0 = LDRi12 $sp, 48, 14, $noreg, debug-location !286 :: (load (s32) from %stack.40); batchtest/h264_dec/h264_dec.c:209:37
  CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !290; batchtest/h264_dec/h264_dec.c:209:29
  Bcc %bb.55, 11, killed $cpsr, debug-location !290; batchtest/h264_dec/h264_dec.c:209:29
  B %bb.51, debug-location !290; batchtest/h264_dec/h264_dec.c:209:29

bb.51.cond.true172:
; predecessors: %bb.50
  successors: %bb.52, %bb.53

  $r1 = LDRi12 $r11, -48, 14, $noreg, debug-location !291 :: (load (s32) from %stack.4); batchtest/h264_dec/h264_dec.c:211:38
  $r0 = LDRi12 $sp, 100, 14, $noreg, debug-location !291 :: (load (s32) from %stack.27); batchtest/h264_dec/h264_dec.c:211:38
  $r2 = LDRi12 $r11, -44, 14, $noreg, debug-location !291 :: (load (s32) from %stack.3); batchtest/h264_dec/h264_dec.c:211:38
  renamable $r0 = nsw ADDrr renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !291; batchtest/h264_dec/h264_dec.c:211:38
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !292; batchtest/h264_dec/h264_dec.c:211:47
  CMPri killed renamable $r0, 288, 14, $noreg, implicit-def $cpsr, debug-location !294; batchtest/h264_dec/h264_dec.c:211:31
  Bcc %bb.53, 11, killed $cpsr, debug-location !294; batchtest/h264_dec/h264_dec.c:211:31
  B %bb.52, debug-location !294; batchtest/h264_dec/h264_dec.c:211:31

bb.52.cond.true177:
; predecessors: %bb.51
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  $r0 = MOVi 31, 14, $noreg, $noreg
  $r0 = ORRri $r0, 256, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 44, 14, $noreg :: (store (s32) into %stack.41)
  B %bb.54, debug-location !294; batchtest/h264_dec/h264_dec.c:211:31

bb.53.cond.false178:
; predecessors: %bb.51
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  $r1 = LDRi12 $r11, -48, 14, $noreg, debug-location !295 :: (load (s32) from %stack.4); batchtest/h264_dec/h264_dec.c:212:47
  $r0 = LDRi12 $sp, 100, 14, $noreg, debug-location !295 :: (load (s32) from %stack.27); batchtest/h264_dec/h264_dec.c:212:47
  $r2 = LDRi12 $r11, -44, 14, $noreg, debug-location !295 :: (load (s32) from %stack.3); batchtest/h264_dec/h264_dec.c:212:47
  renamable $r0 = nsw ADDrr renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !295; batchtest/h264_dec/h264_dec.c:212:47
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !296; batchtest/h264_dec/h264_dec.c:212:56
  STRi12 killed $r0, $sp, 44, 14, $noreg :: (store (s32) into %stack.41)
  B %bb.54, debug-location !294; batchtest/h264_dec/h264_dec.c:211:31

bb.54.cond.end181:
; predecessors: %bb.53, %bb.52
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  $r0 = LDRi12 $sp, 44, 14, $noreg, debug-location !294 :: (load (s32) from %stack.41); batchtest/h264_dec/h264_dec.c:211:31
  STRi12 killed $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.42)
  B %bb.56, debug-location !290; batchtest/h264_dec/h264_dec.c:209:29

bb.55.cond.false183:
; predecessors: %bb.50
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.42)
  B %bb.56, debug-location !290; batchtest/h264_dec/h264_dec.c:209:29

bb.56.cond.end184:
; predecessors: %bb.55, %bb.54
  successors: %bb.58, %bb.57

  $r0 = LDRi12 $r11, -72, 14, $noreg, debug-location !290 :: (load (s32) from %stack.10); batchtest/h264_dec/h264_dec.c:209:29
  $r1 = LDRi12 $r11, -48, 14, $noreg, debug-location !290 :: (load (s32) from %stack.4); batchtest/h264_dec/h264_dec.c:209:29
  $r3 = LDRi12 $r11, -60, 14, $noreg, debug-location !290 :: (load (s32) from %stack.7); batchtest/h264_dec/h264_dec.c:209:29
  $r2 = LDRi12 $sp, 100, 14, $noreg, debug-location !290 :: (load (s32) from %stack.27); batchtest/h264_dec/h264_dec.c:209:29
  $lr = LDRi12 $r11, -44, 14, $noreg, debug-location !290 :: (load (s32) from %stack.3); batchtest/h264_dec/h264_dec.c:209:29
  $r12 = LDRi12 $sp, 116, 14, $noreg, debug-location !290 :: (load (s32) from %stack.23); batchtest/h264_dec/h264_dec.c:209:29
  $r4 = LDRi12 $r11, -56, 14, $noreg, debug-location !290 :: (load (s32) from %stack.6); batchtest/h264_dec/h264_dec.c:209:29
  $r5 = LDRi12 $sp, 40, 14, $noreg, debug-location !290 :: (load (s32) from %stack.42); batchtest/h264_dec/h264_dec.c:209:29
  renamable $r8 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  dead early-clobber renamable $r7, early-clobber renamable $r6 = SMULLv5 renamable $r5, killed renamable $r8, 14, $noreg, $noreg, debug-location !297; batchtest/h264_dec/h264_dec.c:212:73
  renamable $r7 = ADDrr killed renamable $r6, renamable $r5, 14, $noreg, $noreg, debug-location !297; batchtest/h264_dec/h264_dec.c:212:73
  renamable $r6 = MOVsi renamable $r7, 41, 14, $noreg, $noreg, debug-location !297; batchtest/h264_dec/h264_dec.c:212:73
  renamable $r7 = ADDrsi killed renamable $r6, killed renamable $r7, 251, 14, $noreg, $noreg, debug-location !297; batchtest/h264_dec/h264_dec.c:212:73
  renamable $r8 = MOVi 45, 14, $noreg, $noreg
  early-clobber renamable $r6 = MULv5 killed renamable $r7, killed renamable $r8, 14, $noreg, $noreg, debug-location !297; batchtest/h264_dec/h264_dec.c:212:73
  renamable $r5 = SUBrr killed renamable $r5, killed renamable $r6, 14, $noreg, $noreg, debug-location !297; batchtest/h264_dec/h264_dec.c:212:73
  STRi12 killed $r5, $sp, 20, 14, $noreg :: (store (s32) into %stack.47)
  renamable $r12 = ANDrr renamable $r12, renamable $r4, 14, $noreg, $noreg, debug-location !298; batchtest/h264_dec/h264_dec.c:214:30
  STRi12 $r12, $sp, 24, 14, $noreg :: (store (s32) into %stack.46)
  renamable $r2 = ANDrr renamable $r2, renamable $lr, 14, $noreg, $noreg, debug-location !299; batchtest/h264_dec/h264_dec.c:215:30
  STRi12 $r2, $sp, 28, 14, $noreg :: (store (s32) into %stack.45)
  renamable $r3 = nsw SUBrr renamable $r3, renamable $r12, 14, $noreg, $noreg, debug-location !300; batchtest/h264_dec/h264_dec.c:216:30
  STRi12 killed $r3, $sp, 32, 14, $noreg :: (store (s32) into %stack.44)
  renamable $r1 = nsw SUBrr renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !301; batchtest/h264_dec/h264_dec.c:217:30
  STRi12 killed $r1, $sp, 36, 14, $noreg :: (store (s32) into %stack.43)
  renamable $r0 = LDRi12 renamable $r0, 540, 14, $noreg, debug-location !302 :: (load (s32) from %ir.apply_weights); batchtest/h264_dec/h264_dec.c:219:29
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !303; batchtest/h264_dec/h264_dec.c:219:24
  Bcc %bb.58, 0, killed $cpsr, debug-location !303; batchtest/h264_dec/h264_dec.c:219:24
  B %bb.57, debug-location !303; batchtest/h264_dec/h264_dec.c:219:24

bb.57.if.then191:
; predecessors: %bb.56
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  B %bb.59, debug-location !304; batchtest/h264_dec/h264_dec.c:220:19

bb.58.if.else192:
; predecessors: %bb.56
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  $r2 = LDRi12 $r11, -36, 14, $noreg, debug-location !305 :: (load (s32) from %stack.1); batchtest/h264_dec/h264_dec.c:222:31
  $r12 = LDRi12 $sp, 52, 14, $noreg, debug-location !305 :: (load (s32) from %stack.39); batchtest/h264_dec/h264_dec.c:222:31
  $r4 = LDRi12 $sp, 24, 14, $noreg, debug-location !305 :: (load (s32) from %stack.46); batchtest/h264_dec/h264_dec.c:222:31
  $r5 = LDRi12 $sp, 28, 14, $noreg, debug-location !305 :: (load (s32) from %stack.45); batchtest/h264_dec/h264_dec.c:222:31
  $lr = LDRi12 $sp, 84, 14, $noreg, debug-location !305 :: (load (s32) from %stack.31); batchtest/h264_dec/h264_dec.c:222:31
  $r6 = LDRi12 $sp, 20, 14, $noreg, debug-location !305 :: (load (s32) from %stack.47); batchtest/h264_dec/h264_dec.c:222:31
  $r8 = LDRi12 $sp, 32, 14, $noreg, debug-location !305 :: (load (s32) from %stack.44); batchtest/h264_dec/h264_dec.c:222:31
  $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !305 :: (load (s32) from %stack.43); batchtest/h264_dec/h264_dec.c:222:31
  $r7 = LDRi12 $sp, 68, 14, $noreg, debug-location !305 :: (load (s32) from %stack.35); batchtest/h264_dec/h264_dec.c:222:31
  $r0 = LDRi12 $r11, -76, 14, $noreg, debug-location !305 :: (load (s32) from %stack.11); batchtest/h264_dec/h264_dec.c:222:31
  early-clobber renamable $r3 = nsw MULv5 renamable $r8, renamable $r1, 14, $noreg, $noreg, debug-location !305; batchtest/h264_dec/h264_dec.c:222:31
  renamable $r10 = LDRi12 %const.2, 0, 14, $noreg, debug-location !306 :: (load (s32) from constant-pool); batchtest/h264_dec/h264_dec.c:222:39
  $r8 = MOVi 210, 14, $noreg, $noreg
  $r8 = ORRri $r8, 3840, 14, $noreg, $noreg
  early-clobber renamable $r9 = MLAv5 renamable $r0, killed renamable $r8, killed renamable $r10, 14, $noreg, $noreg, debug-location !306; batchtest/h264_dec/h264_dec.c:222:39
  renamable $r8 = MOVi 90, 14, $noreg, $noreg
  early-clobber renamable $r0 = MLAv5 renamable $r7, renamable $r8, renamable $r9, 14, $noreg, $noreg, debug-location !306; batchtest/h264_dec/h264_dec.c:222:39
  renamable $r7 = ADDrsi renamable $r0, renamable $lr, 10, 14, $noreg, $noreg, debug-location !306; batchtest/h264_dec/h264_dec.c:222:39
  renamable $r10 = LDRSH killed renamable $r7, $noreg, 0, 14, $noreg, debug-location !306 :: (load (s16) from %ir.arrayidx196); batchtest/h264_dec/h264_dec.c:222:39
  early-clobber renamable $r7 = nsw MULv5 renamable $r4, renamable $r1, 14, $noreg, $noreg, debug-location !308; batchtest/h264_dec/h264_dec.c:223:33
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r12, 10, 14, $noreg, $noreg, debug-location !309; batchtest/h264_dec/h264_dec.c:223:41
  renamable $r1 = LDRSH killed renamable $r0, $noreg, 0, 14, $noreg, debug-location !309 :: (load (s16) from %ir.arrayidx202); batchtest/h264_dec/h264_dec.c:223:41
  early-clobber renamable $r0 = nsw MULv5 killed renamable $r7, killed renamable $r1, 14, $noreg, $noreg, debug-location !310; batchtest/h264_dec/h264_dec.c:223:39
  $r1 = LDRi12 $r11, -40, 14, $noreg, debug-location !311 :: (load (s32) from %stack.2); batchtest/h264_dec/h264_dec.c:223:27
  early-clobber renamable $r7 = nsw MLAv5 killed renamable $r3, killed renamable $r10, killed renamable $r0, 14, $noreg, $noreg, debug-location !311; batchtest/h264_dec/h264_dec.c:223:27
  $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !312 :: (load (s32) from %stack.44); batchtest/h264_dec/h264_dec.c:224:33
  early-clobber renamable $r3 = nsw MULv5 renamable $r0, renamable $r5, 14, $noreg, $noreg, debug-location !312; batchtest/h264_dec/h264_dec.c:224:33
  early-clobber renamable $r0 = MLAv5 renamable $r6, killed renamable $r8, killed renamable $r9, 14, $noreg, $noreg, debug-location !313; batchtest/h264_dec/h264_dec.c:224:41
  renamable $lr = ADDrsi renamable $r0, renamable $lr, 10, 14, $noreg, $noreg, debug-location !313; batchtest/h264_dec/h264_dec.c:224:41
  renamable $r6 = LDRSH killed renamable $lr, $noreg, 0, 14, $noreg, debug-location !313 :: (load (s16) from %ir.arrayidx209); batchtest/h264_dec/h264_dec.c:224:41
  early-clobber renamable $lr = nsw MLAv5 killed renamable $r3, killed renamable $r6, killed renamable $r7, 14, $noreg, $noreg, debug-location !315; batchtest/h264_dec/h264_dec.c:224:27
  early-clobber renamable $r3 = nsw MULv5 renamable $r4, renamable $r5, 14, $noreg, $noreg, debug-location !316; batchtest/h264_dec/h264_dec.c:225:33
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r12, 10, 14, $noreg, $noreg, debug-location !317; batchtest/h264_dec/h264_dec.c:225:41
  renamable $r12 = LDRSH killed renamable $r0, $noreg, 0, 14, $noreg, debug-location !317 :: (load (s16) from %ir.arrayidx216); batchtest/h264_dec/h264_dec.c:225:41
  early-clobber renamable $r0 = nsw MLAv5 killed renamable $r3, killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !319; batchtest/h264_dec/h264_dec.c:225:27
  renamable $r0 = nsw ADDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !320; batchtest/h264_dec/h264_dec.c:226:27
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !321; batchtest/h264_dec/h264_dec.c:226:34
  $r1 = LDRi12 $sp, 120, 14, $noreg, debug-location !321 :: (load (s32) from %stack.22); batchtest/h264_dec/h264_dec.c:226:34
  $r2 = LDRi12 $r11, -108, 14, $noreg, debug-location !321 :: (load (s32) from %stack.19); batchtest/h264_dec/h264_dec.c:226:34
  renamable $r3 = RSBrsi renamable $r1, renamable $r1, 26, 14, $noreg, $noreg, debug-location !323; batchtest/h264_dec/h264_dec.c:221:21
  renamable $r1 = LDRi12 %const.3, 0, 14, $noreg, debug-location !323 :: (load (s32) from constant-pool); batchtest/h264_dec/h264_dec.c:221:21
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !323; batchtest/h264_dec/h264_dec.c:221:21
  STRBrs killed renamable $r0, killed renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !324 :: (store (s8) into %ir.arrayidx226); batchtest/h264_dec/h264_dec.c:222:23
  B %bb.59

bb.59.if.end227:
; predecessors: %bb.57, %bb.58
  successors: %bb.60(0x80000000); %bb.60(100.00%)

  B %bb.60, debug-location !325; batchtest/h264_dec/h264_dec.c:228:17

bb.60.for.inc:
; predecessors: %bb.59
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  $r0 = LDRi12 $sp, 120, 14, $noreg, debug-location !326 :: (load (s32) from %stack.22); batchtest/h264_dec/h264_dec.c:174:41
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !326; batchtest/h264_dec/h264_dec.c:174:41
  STRi12 killed $r0, $r11, -112, 14, $noreg :: (store (s32) into %stack.20)
  B %bb.11, debug-location !214; batchtest/h264_dec/h264_dec.c:174:17

bb.61.for.end:
; predecessors: %bb.11
  successors: %bb.62(0x80000000); %bb.62(100.00%)

  B %bb.62, debug-location !328; batchtest/h264_dec/h264_dec.c:229:15

bb.62.for.inc229:
; predecessors: %bb.61
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r0 = LDRi12 $r11, -108, 14, $noreg, debug-location !329 :: (load (s32) from %stack.19); batchtest/h264_dec/h264_dec.c:171:39
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !329; batchtest/h264_dec/h264_dec.c:171:39
  STRi12 killed $r0, $r11, -104, 14, $noreg :: (store (s32) into %stack.18)
  B %bb.9, debug-location !206; batchtest/h264_dec/h264_dec.c:171:15

bb.63.for.end231:
; predecessors: %bb.9
  successors: %bb.303(0x80000000); %bb.303(100.00%)

  B %bb.303, debug-location !331; batchtest/h264_dec/h264_dec.c:230:13

bb.64.if.else232:
; predecessors: %bb.7
  successors: %bb.65(0x80000000); %bb.65(100.00%)

  B %bb.65, debug-location !332; batchtest/h264_dec/h264_dec.c:233:21

bb.65.for.cond233:
; predecessors: %bb.64, %bb.301
  successors: %bb.66, %bb.302

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !333; batchtest/h264_dec/h264_dec.c:233:15
  Bcc %bb.302, 1, killed $cpsr, debug-location !333; batchtest/h264_dec/h264_dec.c:233:15
  B %bb.66, debug-location !333; batchtest/h264_dec/h264_dec.c:233:15

bb.66.for.body236:
; predecessors: %bb.65
  successors: %bb.67(0x80000000); %bb.67(100.00%)

  B %bb.67, debug-location !334; batchtest/h264_dec/h264_dec.c:236:23

bb.67.for.cond241:
; predecessors: %bb.66, %bb.299
  successors: %bb.68, %bb.300

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !335; batchtest/h264_dec/h264_dec.c:236:17
  Bcc %bb.300, 1, killed $cpsr, debug-location !335; batchtest/h264_dec/h264_dec.c:236:17
  B %bb.68, debug-location !335; batchtest/h264_dec/h264_dec.c:236:17

bb.68.for.body244:
; predecessors: %bb.67
  successors: %bb.69, %bb.174

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !336; batchtest/h264_dec/h264_dec.c:240:37
  Bcc %bb.174, 1, killed $cpsr, debug-location !336; batchtest/h264_dec/h264_dec.c:240:37
  B %bb.69, debug-location !336; batchtest/h264_dec/h264_dec.c:240:37

bb.69.land.lhs.true:
; predecessors: %bb.68
  successors: %bb.70, %bb.174

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !337; batchtest/h264_dec/h264_dec.c:240:24
  Bcc %bb.174, 1, killed $cpsr, debug-location !337; batchtest/h264_dec/h264_dec.c:240:24
  B %bb.70, debug-location !337; batchtest/h264_dec/h264_dec.c:240:24

bb.70.if.then252:
; predecessors: %bb.69
  successors: %bb.71, %bb.72

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !338; batchtest/h264_dec/h264_dec.c:241:26
  Bcc %bb.72, 1, killed $cpsr, debug-location !338; batchtest/h264_dec/h264_dec.c:241:26
  B %bb.71, debug-location !338; batchtest/h264_dec/h264_dec.c:241:26

bb.71.if.then256:
; predecessors: %bb.70
  successors: %bb.72(0x80000000); %bb.72(100.00%)

  B %bb.72, debug-location !339; batchtest/h264_dec/h264_dec.c:244:21

bb.72.if.end257:
; predecessors: %bb.70, %bb.71
  successors: %bb.73, %bb.74

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !340; batchtest/h264_dec/h264_dec.c:245:26
  Bcc %bb.74, 1, killed $cpsr, debug-location !340; batchtest/h264_dec/h264_dec.c:245:26
  B %bb.73, debug-location !340; batchtest/h264_dec/h264_dec.c:245:26

bb.73.if.then261:
; predecessors: %bb.72
  successors: %bb.74(0x80000000); %bb.74(100.00%)

  B %bb.74, debug-location !341; batchtest/h264_dec/h264_dec.c:248:21

bb.74.if.end262:
; predecessors: %bb.72, %bb.73
  successors: %bb.75, %bb.76

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !342; batchtest/h264_dec/h264_dec.c:250:26
  Bcc %bb.76, 1, killed $cpsr, debug-location !342; batchtest/h264_dec/h264_dec.c:250:26
  B %bb.75, debug-location !342; batchtest/h264_dec/h264_dec.c:250:26

bb.75.if.then266:
; predecessors: %bb.74
  successors: %bb.79(0x80000000); %bb.79(100.00%)

  B %bb.79, debug-location !343; batchtest/h264_dec/h264_dec.c:250:54

bb.76.if.else267:
; predecessors: %bb.74
  successors: %bb.77, %bb.78

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !344; batchtest/h264_dec/h264_dec.c:252:28
  Bcc %bb.78, 1, killed $cpsr, debug-location !344; batchtest/h264_dec/h264_dec.c:252:28
  B %bb.77, debug-location !344; batchtest/h264_dec/h264_dec.c:252:28

bb.77.if.then271:
; predecessors: %bb.76
  successors: %bb.78(0x80000000); %bb.78(100.00%)

  B %bb.78, debug-location !345; batchtest/h264_dec/h264_dec.c:252:56

bb.78.if.end272:
; predecessors: %bb.76, %bb.77
  successors: %bb.79(0x80000000); %bb.79(100.00%)

  B %bb.79

bb.79.if.end273:
; predecessors: %bb.78, %bb.75
  successors: %bb.81, %bb.80

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !346; batchtest/h264_dec/h264_dec.c:254:43
  Bcc %bb.81, 1, killed $cpsr, debug-location !346; batchtest/h264_dec/h264_dec.c:254:43
  B %bb.80, debug-location !346; batchtest/h264_dec/h264_dec.c:254:43

bb.80.lor.lhs.false:
; predecessors: %bb.79
  successors: %bb.81, %bb.126

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !347; batchtest/h264_dec/h264_dec.c:254:26
  Bcc %bb.126, 1, killed $cpsr, debug-location !347; batchtest/h264_dec/h264_dec.c:254:26
  B %bb.81, debug-location !347; batchtest/h264_dec/h264_dec.c:254:26

bb.81.if.then278:
; predecessors: %bb.79, %bb.80
  successors: %bb.83, %bb.82

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !348; batchtest/h264_dec/h264_dec.c:258:28
  Bcc %bb.83, 1, killed $cpsr, debug-location !348; batchtest/h264_dec/h264_dec.c:258:28
  B %bb.82, debug-location !348; batchtest/h264_dec/h264_dec.c:258:28

bb.82.if.then289:
; predecessors: %bb.81
  successors: %bb.87(0x80000000); %bb.87(100.00%)

  B %bb.87, debug-location !349; batchtest/h264_dec/h264_dec.c:261:23

bb.83.if.else299:
; predecessors: %bb.81
  successors: %bb.84, %bb.85

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !350; batchtest/h264_dec/h264_dec.c:262:30
  Bcc %bb.85, 1, killed $cpsr, debug-location !350; batchtest/h264_dec/h264_dec.c:262:30
  B %bb.84, debug-location !350; batchtest/h264_dec/h264_dec.c:262:30

bb.84.if.then303:
; predecessors: %bb.83
  successors: %bb.86(0x80000000); %bb.86(100.00%)

  B %bb.86, debug-location !351; batchtest/h264_dec/h264_dec.c:265:25

bb.85.if.else314:
; predecessors: %bb.83
  successors: %bb.86(0x80000000); %bb.86(100.00%)

  B %bb.86

bb.86.if.end327:
; predecessors: %bb.85, %bb.84
  successors: %bb.87(0x80000000); %bb.87(100.00%)

  B %bb.87

bb.87.if.end328:
; predecessors: %bb.82, %bb.86
  successors: %bb.88, %bb.89

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !352; batchtest/h264_dec/h264_dec.c:272:28
  Bcc %bb.89, 1, killed $cpsr, debug-location !352; batchtest/h264_dec/h264_dec.c:272:28
  B %bb.88, debug-location !352; batchtest/h264_dec/h264_dec.c:272:28

bb.88.if.then332:
; predecessors: %bb.87
  successors: %bb.89(0x80000000); %bb.89(100.00%)

  B %bb.89, debug-location !353; batchtest/h264_dec/h264_dec.c:273:25

bb.89.if.end334:
; predecessors: %bb.87, %bb.88
  successors: %bb.90, %bb.91

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !354; batchtest/h264_dec/h264_dec.c:276:41
  Bcc %bb.91, 1, killed $cpsr, debug-location !354; batchtest/h264_dec/h264_dec.c:276:41
  B %bb.90, debug-location !354; batchtest/h264_dec/h264_dec.c:276:41

bb.90.cond.true340:
; predecessors: %bb.89
  successors: %bb.92(0x80000000); %bb.92(100.00%)

  B %bb.92, debug-location !354; batchtest/h264_dec/h264_dec.c:276:41

bb.91.cond.false343:
; predecessors: %bb.89
  successors: %bb.92(0x80000000); %bb.92(100.00%)

  B %bb.92, debug-location !354; batchtest/h264_dec/h264_dec.c:276:41

bb.92.cond.end345:
; predecessors: %bb.91, %bb.90
  successors: %bb.93, %bb.97

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !355; batchtest/h264_dec/h264_dec.c:276:33
  Bcc %bb.97, 1, killed $cpsr, debug-location !355; batchtest/h264_dec/h264_dec.c:276:33
  B %bb.93, debug-location !355; batchtest/h264_dec/h264_dec.c:276:33

bb.93.cond.true349:
; predecessors: %bb.92
  successors: %bb.94, %bb.95

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !356; batchtest/h264_dec/h264_dec.c:278:35
  Bcc %bb.95, 1, killed $cpsr, debug-location !356; batchtest/h264_dec/h264_dec.c:278:35
  B %bb.94, debug-location !356; batchtest/h264_dec/h264_dec.c:278:35

bb.94.cond.true355:
; predecessors: %bb.93
  successors: %bb.96(0x80000000); %bb.96(100.00%)

  B %bb.96, debug-location !356; batchtest/h264_dec/h264_dec.c:278:35

bb.95.cond.false358:
; predecessors: %bb.93
  successors: %bb.96(0x80000000); %bb.96(100.00%)

  B %bb.96, debug-location !356; batchtest/h264_dec/h264_dec.c:278:35

bb.96.cond.end360:
; predecessors: %bb.95, %bb.94
  successors: %bb.98(0x80000000); %bb.98(100.00%)

  B %bb.98, debug-location !355; batchtest/h264_dec/h264_dec.c:276:33

bb.97.cond.false362:
; predecessors: %bb.92
  successors: %bb.98(0x80000000); %bb.98(100.00%)

  B %bb.98, debug-location !355; batchtest/h264_dec/h264_dec.c:276:33

bb.98.cond.end363:
; predecessors: %bb.97, %bb.96
  successors: %bb.99, %bb.100

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !357; batchtest/h264_dec/h264_dec.c:281:41
  Bcc %bb.100, 1, killed $cpsr, debug-location !357; batchtest/h264_dec/h264_dec.c:281:41
  B %bb.99, debug-location !357; batchtest/h264_dec/h264_dec.c:281:41

bb.99.cond.true369:
; predecessors: %bb.98
  successors: %bb.101(0x80000000); %bb.101(100.00%)

  B %bb.101, debug-location !357; batchtest/h264_dec/h264_dec.c:281:41

bb.100.cond.false370:
; predecessors: %bb.98
  successors: %bb.101(0x80000000); %bb.101(100.00%)

  B %bb.101, debug-location !357; batchtest/h264_dec/h264_dec.c:281:41

bb.101.cond.end372:
; predecessors: %bb.100, %bb.99
  successors: %bb.102, %bb.106

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !358; batchtest/h264_dec/h264_dec.c:281:33
  Bcc %bb.106, 1, killed $cpsr, debug-location !358; batchtest/h264_dec/h264_dec.c:281:33
  B %bb.102, debug-location !358; batchtest/h264_dec/h264_dec.c:281:33

bb.102.cond.true376:
; predecessors: %bb.101
  successors: %bb.103, %bb.104

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !359; batchtest/h264_dec/h264_dec.c:282:70
  Bcc %bb.104, 1, killed $cpsr, debug-location !359; batchtest/h264_dec/h264_dec.c:282:70
  B %bb.103, debug-location !359; batchtest/h264_dec/h264_dec.c:282:70

bb.103.cond.true380:
; predecessors: %bb.102
  successors: %bb.105(0x80000000); %bb.105(100.00%)

  B %bb.105, debug-location !359; batchtest/h264_dec/h264_dec.c:282:70

bb.104.cond.false381:
; predecessors: %bb.102
  successors: %bb.105(0x80000000); %bb.105(100.00%)

  B %bb.105, debug-location !359; batchtest/h264_dec/h264_dec.c:282:70

bb.105.cond.end383:
; predecessors: %bb.104, %bb.103
  successors: %bb.107(0x80000000); %bb.107(100.00%)

  B %bb.107, debug-location !358; batchtest/h264_dec/h264_dec.c:281:33

bb.106.cond.false385:
; predecessors: %bb.101
  successors: %bb.107(0x80000000); %bb.107(100.00%)

  B %bb.107, debug-location !358; batchtest/h264_dec/h264_dec.c:281:33

bb.107.cond.end386:
; predecessors: %bb.106, %bb.105
  successors: %bb.108, %bb.109

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !360; batchtest/h264_dec/h264_dec.c:286:41
  Bcc %bb.109, 1, killed $cpsr, debug-location !360; batchtest/h264_dec/h264_dec.c:286:41
  B %bb.108, debug-location !360; batchtest/h264_dec/h264_dec.c:286:41

bb.108.cond.true395:
; predecessors: %bb.107
  successors: %bb.110(0x80000000); %bb.110(100.00%)

  B %bb.110, debug-location !360; batchtest/h264_dec/h264_dec.c:286:41

bb.109.cond.false398:
; predecessors: %bb.107
  successors: %bb.110(0x80000000); %bb.110(100.00%)

  B %bb.110, debug-location !360; batchtest/h264_dec/h264_dec.c:286:41

bb.110.cond.end401:
; predecessors: %bb.109, %bb.108
  successors: %bb.111, %bb.115

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !361; batchtest/h264_dec/h264_dec.c:286:33
  Bcc %bb.115, 1, killed $cpsr, debug-location !361; batchtest/h264_dec/h264_dec.c:286:33
  B %bb.111, debug-location !361; batchtest/h264_dec/h264_dec.c:286:33

bb.111.cond.true405:
; predecessors: %bb.110
  successors: %bb.112, %bb.113

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !362; batchtest/h264_dec/h264_dec.c:290:35
  Bcc %bb.113, 1, killed $cpsr, debug-location !362; batchtest/h264_dec/h264_dec.c:290:35
  B %bb.112, debug-location !362; batchtest/h264_dec/h264_dec.c:290:35

bb.112.cond.true412:
; predecessors: %bb.111
  successors: %bb.114(0x80000000); %bb.114(100.00%)

  B %bb.114, debug-location !362; batchtest/h264_dec/h264_dec.c:290:35

bb.113.cond.false415:
; predecessors: %bb.111
  successors: %bb.114(0x80000000); %bb.114(100.00%)

  B %bb.114, debug-location !362; batchtest/h264_dec/h264_dec.c:290:35

bb.114.cond.end418:
; predecessors: %bb.113, %bb.112
  successors: %bb.116(0x80000000); %bb.116(100.00%)

  B %bb.116, debug-location !361; batchtest/h264_dec/h264_dec.c:286:33

bb.115.cond.false420:
; predecessors: %bb.110
  successors: %bb.116(0x80000000); %bb.116(100.00%)

  B %bb.116, debug-location !361; batchtest/h264_dec/h264_dec.c:286:33

bb.116.cond.end421:
; predecessors: %bb.115, %bb.114
  successors: %bb.117, %bb.118

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !363; batchtest/h264_dec/h264_dec.c:293:41
  Bcc %bb.118, 1, killed $cpsr, debug-location !363; batchtest/h264_dec/h264_dec.c:293:41
  B %bb.117, debug-location !363; batchtest/h264_dec/h264_dec.c:293:41

bb.117.cond.true428:
; predecessors: %bb.116
  successors: %bb.119(0x80000000); %bb.119(100.00%)

  B %bb.119, debug-location !363; batchtest/h264_dec/h264_dec.c:293:41

bb.118.cond.false429:
; predecessors: %bb.116
  successors: %bb.119(0x80000000); %bb.119(100.00%)

  B %bb.119, debug-location !363; batchtest/h264_dec/h264_dec.c:293:41

bb.119.cond.end432:
; predecessors: %bb.118, %bb.117
  successors: %bb.120, %bb.124

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !364; batchtest/h264_dec/h264_dec.c:293:33
  Bcc %bb.124, 1, killed $cpsr, debug-location !364; batchtest/h264_dec/h264_dec.c:293:33
  B %bb.120, debug-location !364; batchtest/h264_dec/h264_dec.c:293:33

bb.120.cond.true436:
; predecessors: %bb.119
  successors: %bb.121, %bb.122

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !365; batchtest/h264_dec/h264_dec.c:295:35
  Bcc %bb.122, 1, killed $cpsr, debug-location !365; batchtest/h264_dec/h264_dec.c:295:35
  B %bb.121, debug-location !365; batchtest/h264_dec/h264_dec.c:295:35

bb.121.cond.true441:
; predecessors: %bb.120
  successors: %bb.123(0x80000000); %bb.123(100.00%)

  B %bb.123, debug-location !365; batchtest/h264_dec/h264_dec.c:295:35

bb.122.cond.false442:
; predecessors: %bb.120
  successors: %bb.123(0x80000000); %bb.123(100.00%)

  B %bb.123, debug-location !365; batchtest/h264_dec/h264_dec.c:295:35

bb.123.cond.end445:
; predecessors: %bb.122, %bb.121
  successors: %bb.125(0x80000000); %bb.125(100.00%)

  B %bb.125, debug-location !364; batchtest/h264_dec/h264_dec.c:293:33

bb.124.cond.false447:
; predecessors: %bb.119
  successors: %bb.125(0x80000000); %bb.125(100.00%)

  B %bb.125, debug-location !364; batchtest/h264_dec/h264_dec.c:293:33

bb.125.cond.end448:
; predecessors: %bb.124, %bb.123
  successors: %bb.126(0x80000000); %bb.126(100.00%)

  B %bb.126, debug-location !366; batchtest/h264_dec/h264_dec.c:314:21

bb.126.if.end484:
; predecessors: %bb.80, %bb.125
  successors: %bb.128, %bb.127

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !367; batchtest/h264_dec/h264_dec.c:315:43
  Bcc %bb.128, 1, killed $cpsr, debug-location !367; batchtest/h264_dec/h264_dec.c:315:43
  B %bb.127, debug-location !367; batchtest/h264_dec/h264_dec.c:315:43

bb.127.lor.lhs.false487:
; predecessors: %bb.126
  successors: %bb.128, %bb.173

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !368; batchtest/h264_dec/h264_dec.c:315:26
  Bcc %bb.173, 1, killed $cpsr, debug-location !368; batchtest/h264_dec/h264_dec.c:315:26
  B %bb.128, debug-location !368; batchtest/h264_dec/h264_dec.c:315:26

bb.128.if.then490:
; predecessors: %bb.126, %bb.127
  successors: %bb.130, %bb.129

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !369; batchtest/h264_dec/h264_dec.c:319:28
  Bcc %bb.130, 1, killed $cpsr, debug-location !369; batchtest/h264_dec/h264_dec.c:319:28
  B %bb.129, debug-location !369; batchtest/h264_dec/h264_dec.c:319:28

bb.129.if.then501:
; predecessors: %bb.128
  successors: %bb.134(0x80000000); %bb.134(100.00%)

  B %bb.134, debug-location !370; batchtest/h264_dec/h264_dec.c:322:23

bb.130.if.else511:
; predecessors: %bb.128
  successors: %bb.131, %bb.132

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !371; batchtest/h264_dec/h264_dec.c:323:30
  Bcc %bb.132, 1, killed $cpsr, debug-location !371; batchtest/h264_dec/h264_dec.c:323:30
  B %bb.131, debug-location !371; batchtest/h264_dec/h264_dec.c:323:30

bb.131.if.then515:
; predecessors: %bb.130
  successors: %bb.133(0x80000000); %bb.133(100.00%)

  B %bb.133, debug-location !372; batchtest/h264_dec/h264_dec.c:326:25

bb.132.if.else526:
; predecessors: %bb.130
  successors: %bb.133(0x80000000); %bb.133(100.00%)

  B %bb.133

bb.133.if.end539:
; predecessors: %bb.132, %bb.131
  successors: %bb.134(0x80000000); %bb.134(100.00%)

  B %bb.134

bb.134.if.end540:
; predecessors: %bb.129, %bb.133
  successors: %bb.135, %bb.136

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !373; batchtest/h264_dec/h264_dec.c:332:28
  Bcc %bb.136, 1, killed $cpsr, debug-location !373; batchtest/h264_dec/h264_dec.c:332:28
  B %bb.135, debug-location !373; batchtest/h264_dec/h264_dec.c:332:28

bb.135.if.then544:
; predecessors: %bb.134
  successors: %bb.136(0x80000000); %bb.136(100.00%)

  B %bb.136, debug-location !374; batchtest/h264_dec/h264_dec.c:333:25

bb.136.if.end546:
; predecessors: %bb.134, %bb.135
  successors: %bb.137, %bb.138

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !375; batchtest/h264_dec/h264_dec.c:335:41
  Bcc %bb.138, 1, killed $cpsr, debug-location !375; batchtest/h264_dec/h264_dec.c:335:41
  B %bb.137, debug-location !375; batchtest/h264_dec/h264_dec.c:335:41

bb.137.cond.true552:
; predecessors: %bb.136
  successors: %bb.139(0x80000000); %bb.139(100.00%)

  B %bb.139, debug-location !375; batchtest/h264_dec/h264_dec.c:335:41

bb.138.cond.false555:
; predecessors: %bb.136
  successors: %bb.139(0x80000000); %bb.139(100.00%)

  B %bb.139, debug-location !375; batchtest/h264_dec/h264_dec.c:335:41

bb.139.cond.end557:
; predecessors: %bb.138, %bb.137
  successors: %bb.140, %bb.144

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !376; batchtest/h264_dec/h264_dec.c:335:33
  Bcc %bb.144, 1, killed $cpsr, debug-location !376; batchtest/h264_dec/h264_dec.c:335:33
  B %bb.140, debug-location !376; batchtest/h264_dec/h264_dec.c:335:33

bb.140.cond.true561:
; predecessors: %bb.139
  successors: %bb.141, %bb.142

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !377; batchtest/h264_dec/h264_dec.c:337:35
  Bcc %bb.142, 1, killed $cpsr, debug-location !377; batchtest/h264_dec/h264_dec.c:337:35
  B %bb.141, debug-location !377; batchtest/h264_dec/h264_dec.c:337:35

bb.141.cond.true567:
; predecessors: %bb.140
  successors: %bb.143(0x80000000); %bb.143(100.00%)

  B %bb.143, debug-location !377; batchtest/h264_dec/h264_dec.c:337:35

bb.142.cond.false570:
; predecessors: %bb.140
  successors: %bb.143(0x80000000); %bb.143(100.00%)

  B %bb.143, debug-location !377; batchtest/h264_dec/h264_dec.c:337:35

bb.143.cond.end572:
; predecessors: %bb.142, %bb.141
  successors: %bb.145(0x80000000); %bb.145(100.00%)

  B %bb.145, debug-location !376; batchtest/h264_dec/h264_dec.c:335:33

bb.144.cond.false574:
; predecessors: %bb.139
  successors: %bb.145(0x80000000); %bb.145(100.00%)

  B %bb.145, debug-location !376; batchtest/h264_dec/h264_dec.c:335:33

bb.145.cond.end575:
; predecessors: %bb.144, %bb.143
  successors: %bb.146, %bb.147

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !378; batchtest/h264_dec/h264_dec.c:339:41
  Bcc %bb.147, 1, killed $cpsr, debug-location !378; batchtest/h264_dec/h264_dec.c:339:41
  B %bb.146, debug-location !378; batchtest/h264_dec/h264_dec.c:339:41

bb.146.cond.true581:
; predecessors: %bb.145
  successors: %bb.148(0x80000000); %bb.148(100.00%)

  B %bb.148, debug-location !378; batchtest/h264_dec/h264_dec.c:339:41

bb.147.cond.false582:
; predecessors: %bb.145
  successors: %bb.148(0x80000000); %bb.148(100.00%)

  B %bb.148, debug-location !378; batchtest/h264_dec/h264_dec.c:339:41

bb.148.cond.end584:
; predecessors: %bb.147, %bb.146
  successors: %bb.149, %bb.153

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !379; batchtest/h264_dec/h264_dec.c:339:33
  Bcc %bb.153, 1, killed $cpsr, debug-location !379; batchtest/h264_dec/h264_dec.c:339:33
  B %bb.149, debug-location !379; batchtest/h264_dec/h264_dec.c:339:33

bb.149.cond.true588:
; predecessors: %bb.148
  successors: %bb.150, %bb.151

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !380; batchtest/h264_dec/h264_dec.c:341:35
  Bcc %bb.151, 1, killed $cpsr, debug-location !380; batchtest/h264_dec/h264_dec.c:341:35
  B %bb.150, debug-location !380; batchtest/h264_dec/h264_dec.c:341:35

bb.150.cond.true592:
; predecessors: %bb.149
  successors: %bb.152(0x80000000); %bb.152(100.00%)

  B %bb.152, debug-location !380; batchtest/h264_dec/h264_dec.c:341:35

bb.151.cond.false593:
; predecessors: %bb.149
  successors: %bb.152(0x80000000); %bb.152(100.00%)

  B %bb.152, debug-location !380; batchtest/h264_dec/h264_dec.c:341:35

bb.152.cond.end595:
; predecessors: %bb.151, %bb.150
  successors: %bb.154(0x80000000); %bb.154(100.00%)

  B %bb.154, debug-location !379; batchtest/h264_dec/h264_dec.c:339:33

bb.153.cond.false597:
; predecessors: %bb.148
  successors: %bb.154(0x80000000); %bb.154(100.00%)

  B %bb.154, debug-location !379; batchtest/h264_dec/h264_dec.c:339:33

bb.154.cond.end598:
; predecessors: %bb.153, %bb.152
  successors: %bb.155, %bb.156

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !381; batchtest/h264_dec/h264_dec.c:343:41
  Bcc %bb.156, 1, killed $cpsr, debug-location !381; batchtest/h264_dec/h264_dec.c:343:41
  B %bb.155, debug-location !381; batchtest/h264_dec/h264_dec.c:343:41

bb.155.cond.true607:
; predecessors: %bb.154
  successors: %bb.157(0x80000000); %bb.157(100.00%)

  B %bb.157, debug-location !381; batchtest/h264_dec/h264_dec.c:343:41

bb.156.cond.false610:
; predecessors: %bb.154
  successors: %bb.157(0x80000000); %bb.157(100.00%)

  B %bb.157, debug-location !381; batchtest/h264_dec/h264_dec.c:343:41

bb.157.cond.end613:
; predecessors: %bb.156, %bb.155
  successors: %bb.158, %bb.162

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !382; batchtest/h264_dec/h264_dec.c:343:33
  Bcc %bb.162, 1, killed $cpsr, debug-location !382; batchtest/h264_dec/h264_dec.c:343:33
  B %bb.158, debug-location !382; batchtest/h264_dec/h264_dec.c:343:33

bb.158.cond.true617:
; predecessors: %bb.157
  successors: %bb.159, %bb.160

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !383; batchtest/h264_dec/h264_dec.c:347:35
  Bcc %bb.160, 1, killed $cpsr, debug-location !383; batchtest/h264_dec/h264_dec.c:347:35
  B %bb.159, debug-location !383; batchtest/h264_dec/h264_dec.c:347:35

bb.159.cond.true624:
; predecessors: %bb.158
  successors: %bb.161(0x80000000); %bb.161(100.00%)

  B %bb.161, debug-location !383; batchtest/h264_dec/h264_dec.c:347:35

bb.160.cond.false627:
; predecessors: %bb.158
  successors: %bb.161(0x80000000); %bb.161(100.00%)

  B %bb.161, debug-location !383; batchtest/h264_dec/h264_dec.c:347:35

bb.161.cond.end630:
; predecessors: %bb.160, %bb.159
  successors: %bb.163(0x80000000); %bb.163(100.00%)

  B %bb.163, debug-location !382; batchtest/h264_dec/h264_dec.c:343:33

bb.162.cond.false632:
; predecessors: %bb.157
  successors: %bb.163(0x80000000); %bb.163(100.00%)

  B %bb.163, debug-location !382; batchtest/h264_dec/h264_dec.c:343:33

bb.163.cond.end633:
; predecessors: %bb.162, %bb.161
  successors: %bb.164, %bb.165

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !384; batchtest/h264_dec/h264_dec.c:350:41
  Bcc %bb.165, 1, killed $cpsr, debug-location !384; batchtest/h264_dec/h264_dec.c:350:41
  B %bb.164, debug-location !384; batchtest/h264_dec/h264_dec.c:350:41

bb.164.cond.true640:
; predecessors: %bb.163
  successors: %bb.166(0x80000000); %bb.166(100.00%)

  B %bb.166, debug-location !384; batchtest/h264_dec/h264_dec.c:350:41

bb.165.cond.false641:
; predecessors: %bb.163
  successors: %bb.166(0x80000000); %bb.166(100.00%)

  B %bb.166, debug-location !384; batchtest/h264_dec/h264_dec.c:350:41

bb.166.cond.end644:
; predecessors: %bb.165, %bb.164
  successors: %bb.167, %bb.171

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !385; batchtest/h264_dec/h264_dec.c:350:33
  Bcc %bb.171, 1, killed $cpsr, debug-location !385; batchtest/h264_dec/h264_dec.c:350:33
  B %bb.167, debug-location !385; batchtest/h264_dec/h264_dec.c:350:33

bb.167.cond.true648:
; predecessors: %bb.166
  successors: %bb.168, %bb.169

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !386; batchtest/h264_dec/h264_dec.c:352:35
  Bcc %bb.169, 1, killed $cpsr, debug-location !386; batchtest/h264_dec/h264_dec.c:352:35
  B %bb.168, debug-location !386; batchtest/h264_dec/h264_dec.c:352:35

bb.168.cond.true653:
; predecessors: %bb.167
  successors: %bb.170(0x80000000); %bb.170(100.00%)

  B %bb.170, debug-location !386; batchtest/h264_dec/h264_dec.c:352:35

bb.169.cond.false654:
; predecessors: %bb.167
  successors: %bb.170(0x80000000); %bb.170(100.00%)

  B %bb.170, debug-location !386; batchtest/h264_dec/h264_dec.c:352:35

bb.170.cond.end657:
; predecessors: %bb.169, %bb.168
  successors: %bb.172(0x80000000); %bb.172(100.00%)

  B %bb.172, debug-location !385; batchtest/h264_dec/h264_dec.c:350:33

bb.171.cond.false659:
; predecessors: %bb.166
  successors: %bb.172(0x80000000); %bb.172(100.00%)

  B %bb.172, debug-location !385; batchtest/h264_dec/h264_dec.c:350:33

bb.172.cond.end660:
; predecessors: %bb.171, %bb.170
  successors: %bb.173(0x80000000); %bb.173(100.00%)

  B %bb.173, debug-location !387; batchtest/h264_dec/h264_dec.c:370:21

bb.173.if.end696:
; predecessors: %bb.127, %bb.172
  successors: %bb.263(0x80000000); %bb.263(100.00%)

  B %bb.263, debug-location !388; batchtest/h264_dec/h264_dec.c:372:19

bb.174.if.else697:
; predecessors: %bb.68, %bb.69
  successors: %bb.176, %bb.175

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !389; batchtest/h264_dec/h264_dec.c:382:26
  Bcc %bb.176, 1, killed $cpsr, debug-location !389; batchtest/h264_dec/h264_dec.c:382:26
  B %bb.175, debug-location !389; batchtest/h264_dec/h264_dec.c:382:26

bb.175.if.then708:
; predecessors: %bb.174
  successors: %bb.180(0x80000000); %bb.180(100.00%)

  B %bb.180, debug-location !390; batchtest/h264_dec/h264_dec.c:385:21

bb.176.if.else718:
; predecessors: %bb.174
  successors: %bb.177, %bb.178

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !391; batchtest/h264_dec/h264_dec.c:386:28
  Bcc %bb.178, 1, killed $cpsr, debug-location !391; batchtest/h264_dec/h264_dec.c:386:28
  B %bb.177, debug-location !391; batchtest/h264_dec/h264_dec.c:386:28

bb.177.if.then722:
; predecessors: %bb.176
  successors: %bb.179(0x80000000); %bb.179(100.00%)

  B %bb.179, debug-location !392; batchtest/h264_dec/h264_dec.c:389:23

bb.178.if.else733:
; predecessors: %bb.176
  successors: %bb.179(0x80000000); %bb.179(100.00%)

  B %bb.179

bb.179.if.end746:
; predecessors: %bb.178, %bb.177
  successors: %bb.180(0x80000000); %bb.180(100.00%)

  B %bb.180

bb.180.if.end747:
; predecessors: %bb.175, %bb.179
  successors: %bb.181, %bb.182

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !393; batchtest/h264_dec/h264_dec.c:396:26
  Bcc %bb.182, 1, killed $cpsr, debug-location !393; batchtest/h264_dec/h264_dec.c:396:26
  B %bb.181, debug-location !393; batchtest/h264_dec/h264_dec.c:396:26

bb.181.if.then751:
; predecessors: %bb.180
  successors: %bb.182(0x80000000); %bb.182(100.00%)

  B %bb.182, debug-location !394; batchtest/h264_dec/h264_dec.c:397:23

bb.182.if.end753:
; predecessors: %bb.180, %bb.181
  successors: %bb.183, %bb.184

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !395; batchtest/h264_dec/h264_dec.c:399:39
  Bcc %bb.184, 1, killed $cpsr, debug-location !395; batchtest/h264_dec/h264_dec.c:399:39
  B %bb.183, debug-location !395; batchtest/h264_dec/h264_dec.c:399:39

bb.183.cond.true759:
; predecessors: %bb.182
  successors: %bb.185(0x80000000); %bb.185(100.00%)

  B %bb.185, debug-location !395; batchtest/h264_dec/h264_dec.c:399:39

bb.184.cond.false762:
; predecessors: %bb.182
  successors: %bb.185(0x80000000); %bb.185(100.00%)

  B %bb.185, debug-location !395; batchtest/h264_dec/h264_dec.c:399:39

bb.185.cond.end764:
; predecessors: %bb.184, %bb.183
  successors: %bb.186, %bb.190

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !396; batchtest/h264_dec/h264_dec.c:399:31
  Bcc %bb.190, 1, killed $cpsr, debug-location !396; batchtest/h264_dec/h264_dec.c:399:31
  B %bb.186, debug-location !396; batchtest/h264_dec/h264_dec.c:399:31

bb.186.cond.true768:
; predecessors: %bb.185
  successors: %bb.187, %bb.188

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !397; batchtest/h264_dec/h264_dec.c:401:33
  Bcc %bb.188, 1, killed $cpsr, debug-location !397; batchtest/h264_dec/h264_dec.c:401:33
  B %bb.187, debug-location !397; batchtest/h264_dec/h264_dec.c:401:33

bb.187.cond.true774:
; predecessors: %bb.186
  successors: %bb.189(0x80000000); %bb.189(100.00%)

  B %bb.189, debug-location !397; batchtest/h264_dec/h264_dec.c:401:33

bb.188.cond.false777:
; predecessors: %bb.186
  successors: %bb.189(0x80000000); %bb.189(100.00%)

  B %bb.189, debug-location !397; batchtest/h264_dec/h264_dec.c:401:33

bb.189.cond.end779:
; predecessors: %bb.188, %bb.187
  successors: %bb.191(0x80000000); %bb.191(100.00%)

  B %bb.191, debug-location !396; batchtest/h264_dec/h264_dec.c:399:31

bb.190.cond.false781:
; predecessors: %bb.185
  successors: %bb.191(0x80000000); %bb.191(100.00%)

  B %bb.191, debug-location !396; batchtest/h264_dec/h264_dec.c:399:31

bb.191.cond.end782:
; predecessors: %bb.190, %bb.189
  successors: %bb.192, %bb.193

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !398; batchtest/h264_dec/h264_dec.c:404:39
  Bcc %bb.193, 1, killed $cpsr, debug-location !398; batchtest/h264_dec/h264_dec.c:404:39
  B %bb.192, debug-location !398; batchtest/h264_dec/h264_dec.c:404:39

bb.192.cond.true788:
; predecessors: %bb.191
  successors: %bb.194(0x80000000); %bb.194(100.00%)

  B %bb.194, debug-location !398; batchtest/h264_dec/h264_dec.c:404:39

bb.193.cond.false789:
; predecessors: %bb.191
  successors: %bb.194(0x80000000); %bb.194(100.00%)

  B %bb.194, debug-location !398; batchtest/h264_dec/h264_dec.c:404:39

bb.194.cond.end791:
; predecessors: %bb.193, %bb.192
  successors: %bb.195, %bb.199

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !399; batchtest/h264_dec/h264_dec.c:404:31
  Bcc %bb.199, 1, killed $cpsr, debug-location !399; batchtest/h264_dec/h264_dec.c:404:31
  B %bb.195, debug-location !399; batchtest/h264_dec/h264_dec.c:404:31

bb.195.cond.true795:
; predecessors: %bb.194
  successors: %bb.196, %bb.197

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !400; batchtest/h264_dec/h264_dec.c:406:33
  Bcc %bb.197, 1, killed $cpsr, debug-location !400; batchtest/h264_dec/h264_dec.c:406:33
  B %bb.196, debug-location !400; batchtest/h264_dec/h264_dec.c:406:33

bb.196.cond.true799:
; predecessors: %bb.195
  successors: %bb.198(0x80000000); %bb.198(100.00%)

  B %bb.198, debug-location !400; batchtest/h264_dec/h264_dec.c:406:33

bb.197.cond.false800:
; predecessors: %bb.195
  successors: %bb.198(0x80000000); %bb.198(100.00%)

  B %bb.198, debug-location !400; batchtest/h264_dec/h264_dec.c:406:33

bb.198.cond.end802:
; predecessors: %bb.197, %bb.196
  successors: %bb.200(0x80000000); %bb.200(100.00%)

  B %bb.200, debug-location !399; batchtest/h264_dec/h264_dec.c:404:31

bb.199.cond.false804:
; predecessors: %bb.194
  successors: %bb.200(0x80000000); %bb.200(100.00%)

  B %bb.200, debug-location !399; batchtest/h264_dec/h264_dec.c:404:31

bb.200.cond.end805:
; predecessors: %bb.199, %bb.198
  successors: %bb.201, %bb.202

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !401; batchtest/h264_dec/h264_dec.c:408:39
  Bcc %bb.202, 1, killed $cpsr, debug-location !401; batchtest/h264_dec/h264_dec.c:408:39
  B %bb.201, debug-location !401; batchtest/h264_dec/h264_dec.c:408:39

bb.201.cond.true814:
; predecessors: %bb.200
  successors: %bb.203(0x80000000); %bb.203(100.00%)

  B %bb.203, debug-location !401; batchtest/h264_dec/h264_dec.c:408:39

bb.202.cond.false817:
; predecessors: %bb.200
  successors: %bb.203(0x80000000); %bb.203(100.00%)

  B %bb.203, debug-location !401; batchtest/h264_dec/h264_dec.c:408:39

bb.203.cond.end820:
; predecessors: %bb.202, %bb.201
  successors: %bb.204, %bb.208

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !402; batchtest/h264_dec/h264_dec.c:408:31
  Bcc %bb.208, 1, killed $cpsr, debug-location !402; batchtest/h264_dec/h264_dec.c:408:31
  B %bb.204, debug-location !402; batchtest/h264_dec/h264_dec.c:408:31

bb.204.cond.true824:
; predecessors: %bb.203
  successors: %bb.205, %bb.206

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !403; batchtest/h264_dec/h264_dec.c:412:33
  Bcc %bb.206, 1, killed $cpsr, debug-location !403; batchtest/h264_dec/h264_dec.c:412:33
  B %bb.205, debug-location !403; batchtest/h264_dec/h264_dec.c:412:33

bb.205.cond.true831:
; predecessors: %bb.204
  successors: %bb.207(0x80000000); %bb.207(100.00%)

  B %bb.207, debug-location !403; batchtest/h264_dec/h264_dec.c:412:33

bb.206.cond.false834:
; predecessors: %bb.204
  successors: %bb.207(0x80000000); %bb.207(100.00%)

  B %bb.207, debug-location !403; batchtest/h264_dec/h264_dec.c:412:33

bb.207.cond.end837:
; predecessors: %bb.206, %bb.205
  successors: %bb.209(0x80000000); %bb.209(100.00%)

  B %bb.209, debug-location !402; batchtest/h264_dec/h264_dec.c:408:31

bb.208.cond.false839:
; predecessors: %bb.203
  successors: %bb.209(0x80000000); %bb.209(100.00%)

  B %bb.209, debug-location !402; batchtest/h264_dec/h264_dec.c:408:31

bb.209.cond.end840:
; predecessors: %bb.208, %bb.207
  successors: %bb.210, %bb.211

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !404; batchtest/h264_dec/h264_dec.c:415:39
  Bcc %bb.211, 1, killed $cpsr, debug-location !404; batchtest/h264_dec/h264_dec.c:415:39
  B %bb.210, debug-location !404; batchtest/h264_dec/h264_dec.c:415:39

bb.210.cond.true847:
; predecessors: %bb.209
  successors: %bb.212(0x80000000); %bb.212(100.00%)

  B %bb.212, debug-location !404; batchtest/h264_dec/h264_dec.c:415:39

bb.211.cond.false848:
; predecessors: %bb.209
  successors: %bb.212(0x80000000); %bb.212(100.00%)

  B %bb.212, debug-location !404; batchtest/h264_dec/h264_dec.c:415:39

bb.212.cond.end851:
; predecessors: %bb.211, %bb.210
  successors: %bb.213, %bb.217

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !405; batchtest/h264_dec/h264_dec.c:415:31
  Bcc %bb.217, 1, killed $cpsr, debug-location !405; batchtest/h264_dec/h264_dec.c:415:31
  B %bb.213, debug-location !405; batchtest/h264_dec/h264_dec.c:415:31

bb.213.cond.true855:
; predecessors: %bb.212
  successors: %bb.214, %bb.215

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !406; batchtest/h264_dec/h264_dec.c:417:33
  Bcc %bb.215, 1, killed $cpsr, debug-location !406; batchtest/h264_dec/h264_dec.c:417:33
  B %bb.214, debug-location !406; batchtest/h264_dec/h264_dec.c:417:33

bb.214.cond.true860:
; predecessors: %bb.213
  successors: %bb.216(0x80000000); %bb.216(100.00%)

  B %bb.216, debug-location !406; batchtest/h264_dec/h264_dec.c:417:33

bb.215.cond.false861:
; predecessors: %bb.213
  successors: %bb.216(0x80000000); %bb.216(100.00%)

  B %bb.216, debug-location !406; batchtest/h264_dec/h264_dec.c:417:33

bb.216.cond.end864:
; predecessors: %bb.215, %bb.214
  successors: %bb.218(0x80000000); %bb.218(100.00%)

  B %bb.218, debug-location !405; batchtest/h264_dec/h264_dec.c:415:31

bb.217.cond.false866:
; predecessors: %bb.212
  successors: %bb.218(0x80000000); %bb.218(100.00%)

  B %bb.218, debug-location !405; batchtest/h264_dec/h264_dec.c:415:31

bb.218.cond.end867:
; predecessors: %bb.217, %bb.216
  successors: %bb.220, %bb.219

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !407; batchtest/h264_dec/h264_dec.c:435:26
  Bcc %bb.220, 1, killed $cpsr, debug-location !407; batchtest/h264_dec/h264_dec.c:435:26
  B %bb.219, debug-location !407; batchtest/h264_dec/h264_dec.c:435:26

bb.219.if.then913:
; predecessors: %bb.218
  successors: %bb.224(0x80000000); %bb.224(100.00%)

  B %bb.224, debug-location !408; batchtest/h264_dec/h264_dec.c:438:21

bb.220.if.else923:
; predecessors: %bb.218
  successors: %bb.221, %bb.222

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !409; batchtest/h264_dec/h264_dec.c:439:28
  Bcc %bb.222, 1, killed $cpsr, debug-location !409; batchtest/h264_dec/h264_dec.c:439:28
  B %bb.221, debug-location !409; batchtest/h264_dec/h264_dec.c:439:28

bb.221.if.then927:
; predecessors: %bb.220
  successors: %bb.223(0x80000000); %bb.223(100.00%)

  B %bb.223, debug-location !410; batchtest/h264_dec/h264_dec.c:442:23

bb.222.if.else938:
; predecessors: %bb.220
  successors: %bb.223(0x80000000); %bb.223(100.00%)

  B %bb.223

bb.223.if.end951:
; predecessors: %bb.222, %bb.221
  successors: %bb.224(0x80000000); %bb.224(100.00%)

  B %bb.224

bb.224.if.end952:
; predecessors: %bb.219, %bb.223
  successors: %bb.225, %bb.226

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !411; batchtest/h264_dec/h264_dec.c:449:26
  Bcc %bb.226, 1, killed $cpsr, debug-location !411; batchtest/h264_dec/h264_dec.c:449:26
  B %bb.225, debug-location !411; batchtest/h264_dec/h264_dec.c:449:26

bb.225.if.then956:
; predecessors: %bb.224
  successors: %bb.226(0x80000000); %bb.226(100.00%)

  B %bb.226, debug-location !412; batchtest/h264_dec/h264_dec.c:450:23

bb.226.if.end958:
; predecessors: %bb.224, %bb.225
  successors: %bb.227, %bb.228

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !413; batchtest/h264_dec/h264_dec.c:452:39
  Bcc %bb.228, 1, killed $cpsr, debug-location !413; batchtest/h264_dec/h264_dec.c:452:39
  B %bb.227, debug-location !413; batchtest/h264_dec/h264_dec.c:452:39

bb.227.cond.true964:
; predecessors: %bb.226
  successors: %bb.229(0x80000000); %bb.229(100.00%)

  B %bb.229, debug-location !413; batchtest/h264_dec/h264_dec.c:452:39

bb.228.cond.false967:
; predecessors: %bb.226
  successors: %bb.229(0x80000000); %bb.229(100.00%)

  B %bb.229, debug-location !413; batchtest/h264_dec/h264_dec.c:452:39

bb.229.cond.end969:
; predecessors: %bb.228, %bb.227
  successors: %bb.230, %bb.234

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !414; batchtest/h264_dec/h264_dec.c:452:31
  Bcc %bb.234, 1, killed $cpsr, debug-location !414; batchtest/h264_dec/h264_dec.c:452:31
  B %bb.230, debug-location !414; batchtest/h264_dec/h264_dec.c:452:31

bb.230.cond.true973:
; predecessors: %bb.229
  successors: %bb.231, %bb.232

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !415; batchtest/h264_dec/h264_dec.c:454:33
  Bcc %bb.232, 1, killed $cpsr, debug-location !415; batchtest/h264_dec/h264_dec.c:454:33
  B %bb.231, debug-location !415; batchtest/h264_dec/h264_dec.c:454:33

bb.231.cond.true979:
; predecessors: %bb.230
  successors: %bb.233(0x80000000); %bb.233(100.00%)

  B %bb.233, debug-location !415; batchtest/h264_dec/h264_dec.c:454:33

bb.232.cond.false982:
; predecessors: %bb.230
  successors: %bb.233(0x80000000); %bb.233(100.00%)

  B %bb.233, debug-location !415; batchtest/h264_dec/h264_dec.c:454:33

bb.233.cond.end984:
; predecessors: %bb.232, %bb.231
  successors: %bb.235(0x80000000); %bb.235(100.00%)

  B %bb.235, debug-location !414; batchtest/h264_dec/h264_dec.c:452:31

bb.234.cond.false986:
; predecessors: %bb.229
  successors: %bb.235(0x80000000); %bb.235(100.00%)

  B %bb.235, debug-location !414; batchtest/h264_dec/h264_dec.c:452:31

bb.235.cond.end987:
; predecessors: %bb.234, %bb.233
  successors: %bb.236, %bb.237

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !416; batchtest/h264_dec/h264_dec.c:456:39
  Bcc %bb.237, 1, killed $cpsr, debug-location !416; batchtest/h264_dec/h264_dec.c:456:39
  B %bb.236, debug-location !416; batchtest/h264_dec/h264_dec.c:456:39

bb.236.cond.true993:
; predecessors: %bb.235
  successors: %bb.238(0x80000000); %bb.238(100.00%)

  B %bb.238, debug-location !416; batchtest/h264_dec/h264_dec.c:456:39

bb.237.cond.false994:
; predecessors: %bb.235
  successors: %bb.238(0x80000000); %bb.238(100.00%)

  B %bb.238, debug-location !416; batchtest/h264_dec/h264_dec.c:456:39

bb.238.cond.end996:
; predecessors: %bb.237, %bb.236
  successors: %bb.239, %bb.243

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !417; batchtest/h264_dec/h264_dec.c:456:31
  Bcc %bb.243, 1, killed $cpsr, debug-location !417; batchtest/h264_dec/h264_dec.c:456:31
  B %bb.239, debug-location !417; batchtest/h264_dec/h264_dec.c:456:31

bb.239.cond.true1000:
; predecessors: %bb.238
  successors: %bb.240, %bb.241

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !418; batchtest/h264_dec/h264_dec.c:458:33
  Bcc %bb.241, 1, killed $cpsr, debug-location !418; batchtest/h264_dec/h264_dec.c:458:33
  B %bb.240, debug-location !418; batchtest/h264_dec/h264_dec.c:458:33

bb.240.cond.true1004:
; predecessors: %bb.239
  successors: %bb.242(0x80000000); %bb.242(100.00%)

  B %bb.242, debug-location !418; batchtest/h264_dec/h264_dec.c:458:33

bb.241.cond.false1005:
; predecessors: %bb.239
  successors: %bb.242(0x80000000); %bb.242(100.00%)

  B %bb.242, debug-location !418; batchtest/h264_dec/h264_dec.c:458:33

bb.242.cond.end1007:
; predecessors: %bb.241, %bb.240
  successors: %bb.244(0x80000000); %bb.244(100.00%)

  B %bb.244, debug-location !417; batchtest/h264_dec/h264_dec.c:456:31

bb.243.cond.false1009:
; predecessors: %bb.238
  successors: %bb.244(0x80000000); %bb.244(100.00%)

  B %bb.244, debug-location !417; batchtest/h264_dec/h264_dec.c:456:31

bb.244.cond.end1010:
; predecessors: %bb.243, %bb.242
  successors: %bb.245, %bb.246

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !419; batchtest/h264_dec/h264_dec.c:460:39
  Bcc %bb.246, 1, killed $cpsr, debug-location !419; batchtest/h264_dec/h264_dec.c:460:39
  B %bb.245, debug-location !419; batchtest/h264_dec/h264_dec.c:460:39

bb.245.cond.true1019:
; predecessors: %bb.244
  successors: %bb.247(0x80000000); %bb.247(100.00%)

  B %bb.247, debug-location !419; batchtest/h264_dec/h264_dec.c:460:39

bb.246.cond.false1022:
; predecessors: %bb.244
  successors: %bb.247(0x80000000); %bb.247(100.00%)

  B %bb.247, debug-location !419; batchtest/h264_dec/h264_dec.c:460:39

bb.247.cond.end1025:
; predecessors: %bb.246, %bb.245
  successors: %bb.248, %bb.252

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !420; batchtest/h264_dec/h264_dec.c:460:31
  Bcc %bb.252, 1, killed $cpsr, debug-location !420; batchtest/h264_dec/h264_dec.c:460:31
  B %bb.248, debug-location !420; batchtest/h264_dec/h264_dec.c:460:31

bb.248.cond.true1029:
; predecessors: %bb.247
  successors: %bb.249, %bb.250

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !421; batchtest/h264_dec/h264_dec.c:464:33
  Bcc %bb.250, 1, killed $cpsr, debug-location !421; batchtest/h264_dec/h264_dec.c:464:33
  B %bb.249, debug-location !421; batchtest/h264_dec/h264_dec.c:464:33

bb.249.cond.true1036:
; predecessors: %bb.248
  successors: %bb.251(0x80000000); %bb.251(100.00%)

  B %bb.251, debug-location !421; batchtest/h264_dec/h264_dec.c:464:33

bb.250.cond.false1039:
; predecessors: %bb.248
  successors: %bb.251(0x80000000); %bb.251(100.00%)

  B %bb.251, debug-location !421; batchtest/h264_dec/h264_dec.c:464:33

bb.251.cond.end1042:
; predecessors: %bb.250, %bb.249
  successors: %bb.253(0x80000000); %bb.253(100.00%)

  B %bb.253, debug-location !420; batchtest/h264_dec/h264_dec.c:460:31

bb.252.cond.false1044:
; predecessors: %bb.247
  successors: %bb.253(0x80000000); %bb.253(100.00%)

  B %bb.253, debug-location !420; batchtest/h264_dec/h264_dec.c:460:31

bb.253.cond.end1045:
; predecessors: %bb.252, %bb.251
  successors: %bb.254, %bb.255

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !422; batchtest/h264_dec/h264_dec.c:467:39
  Bcc %bb.255, 1, killed $cpsr, debug-location !422; batchtest/h264_dec/h264_dec.c:467:39
  B %bb.254, debug-location !422; batchtest/h264_dec/h264_dec.c:467:39

bb.254.cond.true1052:
; predecessors: %bb.253
  successors: %bb.256(0x80000000); %bb.256(100.00%)

  B %bb.256, debug-location !422; batchtest/h264_dec/h264_dec.c:467:39

bb.255.cond.false1053:
; predecessors: %bb.253
  successors: %bb.256(0x80000000); %bb.256(100.00%)

  B %bb.256, debug-location !422; batchtest/h264_dec/h264_dec.c:467:39

bb.256.cond.end1056:
; predecessors: %bb.255, %bb.254
  successors: %bb.257, %bb.261

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !423; batchtest/h264_dec/h264_dec.c:467:31
  Bcc %bb.261, 1, killed $cpsr, debug-location !423; batchtest/h264_dec/h264_dec.c:467:31
  B %bb.257, debug-location !423; batchtest/h264_dec/h264_dec.c:467:31

bb.257.cond.true1060:
; predecessors: %bb.256
  successors: %bb.258, %bb.259

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !424; batchtest/h264_dec/h264_dec.c:469:33
  Bcc %bb.259, 1, killed $cpsr, debug-location !424; batchtest/h264_dec/h264_dec.c:469:33
  B %bb.258, debug-location !424; batchtest/h264_dec/h264_dec.c:469:33

bb.258.cond.true1065:
; predecessors: %bb.257
  successors: %bb.260(0x80000000); %bb.260(100.00%)

  B %bb.260, debug-location !424; batchtest/h264_dec/h264_dec.c:469:33

bb.259.cond.false1066:
; predecessors: %bb.257
  successors: %bb.260(0x80000000); %bb.260(100.00%)

  B %bb.260, debug-location !424; batchtest/h264_dec/h264_dec.c:469:33

bb.260.cond.end1069:
; predecessors: %bb.259, %bb.258
  successors: %bb.262(0x80000000); %bb.262(100.00%)

  B %bb.262, debug-location !423; batchtest/h264_dec/h264_dec.c:467:31

bb.261.cond.false1071:
; predecessors: %bb.256
  successors: %bb.262(0x80000000); %bb.262(100.00%)

  B %bb.262, debug-location !423; batchtest/h264_dec/h264_dec.c:467:31

bb.262.cond.end1072:
; predecessors: %bb.261, %bb.260
  successors: %bb.263(0x80000000); %bb.263(100.00%)

  B %bb.263

bb.263.if.end1108:
; predecessors: %bb.262, %bb.173
  successors: %bb.264, %bb.289

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !425; batchtest/h264_dec/h264_dec.c:484:24
  Bcc %bb.289, 1, killed $cpsr, debug-location !425; batchtest/h264_dec/h264_dec.c:484:24
  B %bb.264, debug-location !425; batchtest/h264_dec/h264_dec.c:484:24

bb.264.if.then1111:
; predecessors: %bb.263
  successors: %bb.265, %bb.267

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !426; batchtest/h264_dec/h264_dec.c:485:60
  Bcc %bb.267, 1, killed $cpsr, debug-location !426; batchtest/h264_dec/h264_dec.c:485:60
  B %bb.265, debug-location !426; batchtest/h264_dec/h264_dec.c:485:60

bb.265.land.lhs.true1114:
; predecessors: %bb.264
  successors: %bb.269, %bb.266

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !427; batchtest/h264_dec/h264_dec.c:486:53
  Bcc %bb.269, 1, killed $cpsr, debug-location !427; batchtest/h264_dec/h264_dec.c:486:53
  B %bb.266, debug-location !427; batchtest/h264_dec/h264_dec.c:486:53

bb.266.lor.lhs.false1117:
; predecessors: %bb.265
  successors: %bb.269, %bb.267

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !428; batchtest/h264_dec/h264_dec.c:487:28
  Bcc %bb.269, 1, killed $cpsr, debug-location !428; batchtest/h264_dec/h264_dec.c:487:28
  B %bb.267, debug-location !428; batchtest/h264_dec/h264_dec.c:487:28

bb.267.lor.lhs.false1121:
; predecessors: %bb.264, %bb.266
  successors: %bb.268, %bb.271

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !429; batchtest/h264_dec/h264_dec.c:487:69
  Bcc %bb.271, 1, killed $cpsr, debug-location !429; batchtest/h264_dec/h264_dec.c:487:69
  B %bb.268, debug-location !429; batchtest/h264_dec/h264_dec.c:487:69

bb.268.land.lhs.true1125:
; predecessors: %bb.267
  successors: %bb.269, %bb.271

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !430; batchtest/h264_dec/h264_dec.c:489:26
  Bcc %bb.271, 1, killed $cpsr, debug-location !430; batchtest/h264_dec/h264_dec.c:489:26
  B %bb.269, debug-location !430; batchtest/h264_dec/h264_dec.c:489:26

bb.269.land.lhs.true1129:
; predecessors: %bb.265, %bb.266, %bb.268
  successors: %bb.270, %bb.271

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !431; batchtest/h264_dec/h264_dec.c:485:26
  Bcc %bb.271, 1, killed $cpsr, debug-location !431; batchtest/h264_dec/h264_dec.c:485:26
  B %bb.270, debug-location !431; batchtest/h264_dec/h264_dec.c:485:26

bb.270.if.then1131:
; predecessors: %bb.269
  successors: %bb.271(0x80000000); %bb.271(100.00%)

  B %bb.271, debug-location !432; batchtest/h264_dec/h264_dec.c:492:21

bb.271.if.end1138:
; predecessors: %bb.267, %bb.268, %bb.269, %bb.270
  successors: %bb.272, %bb.277

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !433; batchtest/h264_dec/h264_dec.c:495:26
  Bcc %bb.277, 1, killed $cpsr, debug-location !433; batchtest/h264_dec/h264_dec.c:495:26
  B %bb.272, debug-location !433; batchtest/h264_dec/h264_dec.c:495:26

bb.272.land.lhs.true1141:
; predecessors: %bb.271
  successors: %bb.273, %bb.277

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !434; batchtest/h264_dec/h264_dec.c:494:26
  Bcc %bb.277, 1, killed $cpsr, debug-location !434; batchtest/h264_dec/h264_dec.c:494:26
  B %bb.273, debug-location !434; batchtest/h264_dec/h264_dec.c:494:26

bb.273.if.then1144:
; predecessors: %bb.272
  successors: %bb.274, %bb.275

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !435; batchtest/h264_dec/h264_dec.c:497:27
  Bcc %bb.275, 1, killed $cpsr, debug-location !435; batchtest/h264_dec/h264_dec.c:497:27
  B %bb.274, debug-location !435; batchtest/h264_dec/h264_dec.c:497:27

bb.274.cond.true1148:
; predecessors: %bb.273
  successors: %bb.276(0x80000000); %bb.276(100.00%)

  B %bb.276, debug-location !435; batchtest/h264_dec/h264_dec.c:497:27

bb.275.cond.false1149:
; predecessors: %bb.273
  successors: %bb.276(0x80000000); %bb.276(100.00%)

  B %bb.276, debug-location !435; batchtest/h264_dec/h264_dec.c:497:27

bb.276.cond.end1153:
; predecessors: %bb.275, %bb.274
  successors: %bb.288(0x80000000); %bb.288(100.00%)

  B %bb.288, debug-location !436; batchtest/h264_dec/h264_dec.c:501:21

bb.277.if.else1161:
; predecessors: %bb.271, %bb.272
  successors: %bb.278, %bb.283

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !437; batchtest/h264_dec/h264_dec.c:503:28
  Bcc %bb.283, 1, killed $cpsr, debug-location !437; batchtest/h264_dec/h264_dec.c:503:28
  B %bb.278, debug-location !437; batchtest/h264_dec/h264_dec.c:503:28

bb.278.land.lhs.true1164:
; predecessors: %bb.277
  successors: %bb.279, %bb.283

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !438; batchtest/h264_dec/h264_dec.c:502:28
  Bcc %bb.283, 1, killed $cpsr, debug-location !438; batchtest/h264_dec/h264_dec.c:502:28
  B %bb.279, debug-location !438; batchtest/h264_dec/h264_dec.c:502:28

bb.279.if.then1167:
; predecessors: %bb.278
  successors: %bb.280, %bb.281

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !439; batchtest/h264_dec/h264_dec.c:505:29
  Bcc %bb.281, 1, killed $cpsr, debug-location !439; batchtest/h264_dec/h264_dec.c:505:29
  B %bb.280, debug-location !439; batchtest/h264_dec/h264_dec.c:505:29

bb.280.cond.true1173:
; predecessors: %bb.279
  successors: %bb.282(0x80000000); %bb.282(100.00%)

  B %bb.282, debug-location !439; batchtest/h264_dec/h264_dec.c:505:29

bb.281.cond.false1174:
; predecessors: %bb.279
  successors: %bb.282(0x80000000); %bb.282(100.00%)

  B %bb.282, debug-location !439; batchtest/h264_dec/h264_dec.c:505:29

bb.282.cond.end1178:
; predecessors: %bb.281, %bb.280
  successors: %bb.287(0x80000000); %bb.287(100.00%)

  B %bb.287, debug-location !440; batchtest/h264_dec/h264_dec.c:510:23

bb.283.if.else1186:
; predecessors: %bb.277, %bb.278
  successors: %bb.284, %bb.285

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !441; batchtest/h264_dec/h264_dec.c:516:29
  Bcc %bb.285, 1, killed $cpsr, debug-location !441; batchtest/h264_dec/h264_dec.c:516:29
  B %bb.284, debug-location !441; batchtest/h264_dec/h264_dec.c:516:29

bb.284.cond.true1197:
; predecessors: %bb.283
  successors: %bb.286(0x80000000); %bb.286(100.00%)

  B %bb.286, debug-location !441; batchtest/h264_dec/h264_dec.c:516:29

bb.285.cond.false1198:
; predecessors: %bb.283
  successors: %bb.286(0x80000000); %bb.286(100.00%)

  B %bb.286, debug-location !441; batchtest/h264_dec/h264_dec.c:516:29

bb.286.cond.end1208:
; predecessors: %bb.285, %bb.284
  successors: %bb.287(0x80000000); %bb.287(100.00%)

  B %bb.287

bb.287.if.end1216:
; predecessors: %bb.286, %bb.282
  successors: %bb.288(0x80000000); %bb.288(100.00%)

  B %bb.288

bb.288.if.end1217:
; predecessors: %bb.287, %bb.276
  successors: %bb.298(0x80000000); %bb.298(100.00%)

  B %bb.298, debug-location !442; batchtest/h264_dec/h264_dec.c:525:19

bb.289.if.else1218:
; predecessors: %bb.263
  successors: %bb.290, %bb.292

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !443; batchtest/h264_dec/h264_dec.c:527:26
  Bcc %bb.292, 1, killed $cpsr, debug-location !443; batchtest/h264_dec/h264_dec.c:527:26
  B %bb.290, debug-location !443; batchtest/h264_dec/h264_dec.c:527:26

bb.290.land.lhs.true1221:
; predecessors: %bb.289
  successors: %bb.291, %bb.292

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !444; batchtest/h264_dec/h264_dec.c:526:26
  Bcc %bb.292, 1, killed $cpsr, debug-location !444; batchtest/h264_dec/h264_dec.c:526:26
  B %bb.291, debug-location !444; batchtest/h264_dec/h264_dec.c:526:26

bb.291.if.then1224:
; predecessors: %bb.290
  successors: %bb.297(0x80000000); %bb.297(100.00%)

  B %bb.297, debug-location !445; batchtest/h264_dec/h264_dec.c:528:23

bb.292.if.else1231:
; predecessors: %bb.289, %bb.290
  successors: %bb.293, %bb.295

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !446; batchtest/h264_dec/h264_dec.c:531:28
  Bcc %bb.295, 1, killed $cpsr, debug-location !446; batchtest/h264_dec/h264_dec.c:531:28
  B %bb.293, debug-location !446; batchtest/h264_dec/h264_dec.c:531:28

bb.293.land.lhs.true1234:
; predecessors: %bb.292
  successors: %bb.294, %bb.295

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !447; batchtest/h264_dec/h264_dec.c:530:28
  Bcc %bb.295, 1, killed $cpsr, debug-location !447; batchtest/h264_dec/h264_dec.c:530:28
  B %bb.294, debug-location !447; batchtest/h264_dec/h264_dec.c:530:28

bb.294.if.then1237:
; predecessors: %bb.293
  successors: %bb.296(0x80000000); %bb.296(100.00%)

  B %bb.296, debug-location !448; batchtest/h264_dec/h264_dec.c:532:25

bb.295.if.else1244:
; predecessors: %bb.292, %bb.293
  successors: %bb.296(0x80000000); %bb.296(100.00%)

  B %bb.296

bb.296.if.end1254:
; predecessors: %bb.295, %bb.294
  successors: %bb.297(0x80000000); %bb.297(100.00%)

  B %bb.297

bb.297.if.end1255:
; predecessors: %bb.296, %bb.291
  successors: %bb.298(0x80000000); %bb.298(100.00%)

  B %bb.298

bb.298.if.end1256:
; predecessors: %bb.297, %bb.288
  successors: %bb.299(0x80000000); %bb.299(100.00%)

  B %bb.299, debug-location !449; batchtest/h264_dec/h264_dec.c:539:17

bb.299.for.inc1257:
; predecessors: %bb.298
  successors: %bb.67(0x80000000); %bb.67(100.00%)

  B %bb.67, debug-location !335; batchtest/h264_dec/h264_dec.c:236:17

bb.300.for.end1259:
; predecessors: %bb.67
  successors: %bb.301(0x80000000); %bb.301(100.00%)

  B %bb.301, debug-location !451; batchtest/h264_dec/h264_dec.c:540:15

bb.301.for.inc1260:
; predecessors: %bb.300
  successors: %bb.65(0x80000000); %bb.65(100.00%)

  B %bb.65, debug-location !333; batchtest/h264_dec/h264_dec.c:233:15

bb.302.for.end1262:
; predecessors: %bb.65
  successors: %bb.303(0x80000000); %bb.303(100.00%)

  B %bb.303

bb.303.if.end1263:
; predecessors: %bb.302, %bb.63
  successors: %bb.304(0x80000000); %bb.304(100.00%)

  B %bb.304, debug-location !453; batchtest/h264_dec/h264_dec.c:542:11

bb.304.if.end1264:
; predecessors: %bb.6, %bb.303
  successors: %bb.316, %bb.305

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !454; batchtest/h264_dec/h264_dec.c:544:16
  Bcc %bb.316, 1, killed $cpsr, debug-location !454; batchtest/h264_dec/h264_dec.c:544:16
  B %bb.305, debug-location !454; batchtest/h264_dec/h264_dec.c:544:16

bb.305.if.then1266:
; predecessors: %bb.304
  successors: %bb.306(0x80000000); %bb.306(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.48)
  B %bb.306, debug-location !455; batchtest/h264_dec/h264_dec.c:546:19

bb.306.for.cond1267:
; predecessors: %bb.305, %bb.314
  successors: %bb.315, %bb.307

  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !189 :: (load (s32) from %stack.48); batchtest/h264_dec/h264_dec.c:0
  STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.49)
  CMPri renamable $r0, 4, 14, $noreg, implicit-def $cpsr, debug-location !457; batchtest/h264_dec/h264_dec.c:546:13
  Bcc %bb.315, 0, killed $cpsr, debug-location !457; batchtest/h264_dec/h264_dec.c:546:13
  B %bb.307, debug-location !457; batchtest/h264_dec/h264_dec.c:546:13

bb.307.for.body1270:
; predecessors: %bb.306
  successors: %bb.308(0x80000000); %bb.308(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.50)
  B %bb.308, debug-location !458; batchtest/h264_dec/h264_dec.c:549:15

bb.308.for.cond1271:
; predecessors: %bb.307, %bb.312
  successors: %bb.313, %bb.309

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !189 :: (load (s32) from %stack.50); batchtest/h264_dec/h264_dec.c:0
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.51)
  CMPri renamable $r0, 4, 14, $noreg, implicit-def $cpsr, debug-location !458; batchtest/h264_dec/h264_dec.c:549:15
  Bcc %bb.313, 0, killed $cpsr, debug-location !458; batchtest/h264_dec/h264_dec.c:549:15
  B %bb.309, debug-location !458; batchtest/h264_dec/h264_dec.c:549:15

bb.309.for.body1274:
; predecessors: %bb.308
  successors: %bb.311, %bb.310

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !460; batchtest/h264_dec/h264_dec.c:550:22
  Bcc %bb.311, 1, killed $cpsr, debug-location !460; batchtest/h264_dec/h264_dec.c:550:22
  B %bb.310, debug-location !460; batchtest/h264_dec/h264_dec.c:550:22

bb.310.if.then1276:
; predecessors: %bb.309
  successors: %bb.311(0x80000000); %bb.311(100.00%)

  $r1 = LDRi12 $r11, -76, 14, $noreg, debug-location !461 :: (load (s32) from %stack.11); batchtest/h264_dec/h264_dec.c:553:23
  $r2 = LDRi12 $r11, -96, 14, $noreg, debug-location !461 :: (load (s32) from %stack.16); batchtest/h264_dec/h264_dec.c:553:23
  $r12 = LDRi12 $sp, 12, 14, $noreg, debug-location !461 :: (load (s32) from %stack.49); batchtest/h264_dec/h264_dec.c:553:23
  $r3 = LDRi12 $r11, -100, 14, $noreg, debug-location !461 :: (load (s32) from %stack.17); batchtest/h264_dec/h264_dec.c:553:23
  $lr = LDRi12 $sp, 4, 14, $noreg, debug-location !461 :: (load (s32) from %stack.51); batchtest/h264_dec/h264_dec.c:553:23
  renamable $r0 = LDRi12 %const.4, 0, 14, $noreg, debug-location !461 :: (load (s32) from constant-pool); batchtest/h264_dec/h264_dec.c:553:23
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r12, 50, 14, $noreg, $noreg, debug-location !461; batchtest/h264_dec/h264_dec.c:553:23
  renamable $r0 = LDRrs killed renamable $r0, renamable $lr, 16386, 14, $noreg, debug-location !461 :: (load (s32) from %ir.arrayidx1278); batchtest/h264_dec/h264_dec.c:553:23
  renamable $r3 = nsw ADDrr renamable $r3, renamable $lr, 14, $noreg, $noreg, debug-location !462; batchtest/h264_dec/h264_dec.c:551:58
  renamable $lr = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !463; batchtest/h264_dec/h264_dec.c:551:65
  renamable $lr = ADDrsi renamable $r3, killed renamable $lr, 211, 14, $noreg, $noreg, debug-location !463; batchtest/h264_dec/h264_dec.c:551:65
  renamable $lr = BICri killed renamable $lr, 63, 14, $noreg, $noreg, debug-location !463; batchtest/h264_dec/h264_dec.c:551:65
  renamable $r3 = SUBrr killed renamable $r3, killed renamable $lr, 14, $noreg, $noreg, debug-location !463; batchtest/h264_dec/h264_dec.c:551:65
  renamable $r2 = nsw ADDrr renamable $r2, renamable $r12, 14, $noreg, $noreg, debug-location !464; batchtest/h264_dec/h264_dec.c:552:26
  renamable $r4 = LDRcp %const.5, 0, 14, $noreg :: (load (s32) from constant-pool)
  dead early-clobber renamable $r12, early-clobber renamable $lr = SMULLv5 renamable $r2, killed renamable $r4, 14, $noreg, $noreg, debug-location !465; batchtest/h264_dec/h264_dec.c:552:33
  renamable $r12 = MOVsi renamable $lr, 33, 14, $noreg, $noreg, debug-location !465; batchtest/h264_dec/h264_dec.c:552:33
  renamable $r4 = ADDrsi killed renamable $r12, killed renamable $lr, 251, 14, $noreg, $noreg, debug-location !465; batchtest/h264_dec/h264_dec.c:552:33
  renamable $r12 = MOVi 54, 14, $noreg, $noreg
  early-clobber renamable $lr = MULv5 killed renamable $r4, renamable $r12, 14, $noreg, $noreg, debug-location !465; batchtest/h264_dec/h264_dec.c:552:33
  renamable $r2 = SUBrr killed renamable $r2, killed renamable $lr, 14, $noreg, $noreg, debug-location !465; batchtest/h264_dec/h264_dec.c:552:33
  renamable $r5 = LDRi12 %const.6, 0, 14, $noreg, debug-location !466 :: (load (s32) from constant-pool); batchtest/h264_dec/h264_dec.c:551:19
  renamable $r4 = MOVi 3456, 14, $noreg, $noreg
  early-clobber renamable $lr = MLAv5 renamable $r1, killed renamable $r4, killed renamable $r5, 14, $noreg, $noreg, debug-location !466; batchtest/h264_dec/h264_dec.c:551:19
  early-clobber renamable $r1 = MLAv5 killed renamable $r3, killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !466; batchtest/h264_dec/h264_dec.c:551:19
  STRBrs killed renamable $r0, killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !467 :: (store (s8) into %ir.arrayidx1286); batchtest/h264_dec/h264_dec.c:553:21
  B %bb.311, debug-location !468; batchtest/h264_dec/h264_dec.c:554:17

bb.311.if.end1287:
; predecessors: %bb.309, %bb.310
  successors: %bb.312(0x80000000); %bb.312(100.00%)

  B %bb.312, debug-location !469; batchtest/h264_dec/h264_dec.c:555:15

bb.312.for.inc1288:
; predecessors: %bb.311
  successors: %bb.308(0x80000000); %bb.308(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !470 :: (load (s32) from %stack.51); batchtest/h264_dec/h264_dec.c:549:33
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !470; batchtest/h264_dec/h264_dec.c:549:33
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.50)
  B %bb.308, debug-location !458; batchtest/h264_dec/h264_dec.c:549:15

bb.313.for.end1290:
; predecessors: %bb.308
  successors: %bb.314(0x80000000); %bb.314(100.00%)

  B %bb.314, debug-location !472; batchtest/h264_dec/h264_dec.c:556:13

bb.314.for.inc1291:
; predecessors: %bb.313
  successors: %bb.306(0x80000000); %bb.306(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !473 :: (load (s32) from %stack.49); batchtest/h264_dec/h264_dec.c:546:37
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !473; batchtest/h264_dec/h264_dec.c:546:37
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.48)
  B %bb.306, debug-location !457; batchtest/h264_dec/h264_dec.c:546:13

bb.315.for.end1293:
; predecessors: %bb.306
  successors: %bb.316(0x80000000); %bb.316(100.00%)

  B %bb.316, debug-location !475; batchtest/h264_dec/h264_dec.c:557:11

bb.316.if.end1294:
; predecessors: %bb.304, %bb.315
  successors: %bb.317(0x80000000); %bb.317(100.00%)

  B %bb.317, debug-location !476; batchtest/h264_dec/h264_dec.c:558:9

bb.317.for.inc1295:
; predecessors: %bb.316
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r0 = LDRi12 $r11, -92, 14, $noreg, debug-location !477 :: (load (s32) from %stack.15); batchtest/h264_dec/h264_dec.c:158:33
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !477; batchtest/h264_dec/h264_dec.c:158:33
  STRi12 killed $r0, $r11, -88, 14, $noreg :: (store (s32) into %stack.14)
  B %bb.5, debug-location !199; batchtest/h264_dec/h264_dec.c:158:9

bb.318.for.end1297:
; predecessors: %bb.5
  successors: %bb.319(0x80000000); %bb.319(100.00%)

  B %bb.319, debug-location !479; batchtest/h264_dec/h264_dec.c:559:7

bb.319.for.inc1298:
; predecessors: %bb.318
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r0 = LDRi12 $r11, -84, 14, $noreg, debug-location !480 :: (load (s32) from %stack.13); batchtest/h264_dec/h264_dec.c:156:56
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !480; batchtest/h264_dec/h264_dec.c:156:56
  STRi12 killed $r0, $r11, -80, 14, $noreg :: (store (s32) into %stack.12)
  B %bb.3, debug-location !196; batchtest/h264_dec/h264_dec.c:156:7

bb.320.for.end1300:
; predecessors: %bb.3
  successors: %bb.321, %bb.338

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !482; batchtest/h264_dec/h264_dec.c:561:12
  Bcc %bb.338, 1, killed $cpsr, debug-location !482; batchtest/h264_dec/h264_dec.c:561:12
  B %bb.321, debug-location !482; batchtest/h264_dec/h264_dec.c:561:12

bb.321.if.then1302:
; predecessors: %bb.320
  successors: %bb.322(0x80000000); %bb.322(100.00%)

  B %bb.322, debug-location !483; batchtest/h264_dec/h264_dec.c:563:15

bb.322.for.cond1303:
; predecessors: %bb.321, %bb.336
  successors: %bb.323, %bb.337

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !484; batchtest/h264_dec/h264_dec.c:563:9
  Bcc %bb.337, 1, killed $cpsr, debug-location !484; batchtest/h264_dec/h264_dec.c:563:9
  B %bb.323, debug-location !484; batchtest/h264_dec/h264_dec.c:563:9

bb.323.for.body1306:
; predecessors: %bb.322
  successors: %bb.324(0x80000000); %bb.324(100.00%)

  B %bb.324, debug-location !485; batchtest/h264_dec/h264_dec.c:567:17

bb.324.for.cond1311:
; predecessors: %bb.323, %bb.334
  successors: %bb.325, %bb.335

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !486; batchtest/h264_dec/h264_dec.c:567:11
  Bcc %bb.335, 1, killed $cpsr, debug-location !486; batchtest/h264_dec/h264_dec.c:567:11
  B %bb.325, debug-location !486; batchtest/h264_dec/h264_dec.c:567:11

bb.325.for.body1314:
; predecessors: %bb.324
  successors: %bb.326(0x80000000); %bb.326(100.00%)

  B %bb.326, debug-location !487; batchtest/h264_dec/h264_dec.c:572:19

bb.326.for.cond1318:
; predecessors: %bb.325, %bb.332
  successors: %bb.327, %bb.333

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !488; batchtest/h264_dec/h264_dec.c:572:13
  Bcc %bb.333, 1, killed $cpsr, debug-location !488; batchtest/h264_dec/h264_dec.c:572:13
  B %bb.327, debug-location !488; batchtest/h264_dec/h264_dec.c:572:13

bb.327.for.body1321:
; predecessors: %bb.326
  successors: %bb.328(0x80000000); %bb.328(100.00%)

  B %bb.328, debug-location !489; batchtest/h264_dec/h264_dec.c:574:21

bb.328.for.cond1322:
; predecessors: %bb.327, %bb.330
  successors: %bb.329, %bb.331

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !490; batchtest/h264_dec/h264_dec.c:574:15
  Bcc %bb.331, 1, killed $cpsr, debug-location !490; batchtest/h264_dec/h264_dec.c:574:15
  B %bb.329, debug-location !490; batchtest/h264_dec/h264_dec.c:574:15

bb.329.for.body1325:
; predecessors: %bb.328
  successors: %bb.330(0x80000000); %bb.330(100.00%)

  B %bb.330, debug-location !491; batchtest/h264_dec/h264_dec.c:578:15

bb.330.for.inc1336:
; predecessors: %bb.329
  successors: %bb.328(0x80000000); %bb.328(100.00%)

  B %bb.328, debug-location !490; batchtest/h264_dec/h264_dec.c:574:15

bb.331.for.end1338:
; predecessors: %bb.328
  successors: %bb.332(0x80000000); %bb.332(100.00%)

  B %bb.332, debug-location !491; batchtest/h264_dec/h264_dec.c:578:15

bb.332.for.inc1339:
; predecessors: %bb.331
  successors: %bb.326(0x80000000); %bb.326(100.00%)

  B %bb.326, debug-location !488; batchtest/h264_dec/h264_dec.c:572:13

bb.333.for.end1341:
; predecessors: %bb.326
  successors: %bb.334(0x80000000); %bb.334(100.00%)

  B %bb.334, debug-location !494; batchtest/h264_dec/h264_dec.c:579:11

bb.334.for.inc1342:
; predecessors: %bb.333
  successors: %bb.324(0x80000000); %bb.324(100.00%)

  B %bb.324, debug-location !486; batchtest/h264_dec/h264_dec.c:567:11

bb.335.for.end1344:
; predecessors: %bb.324
  successors: %bb.336(0x80000000); %bb.336(100.00%)

  B %bb.336, debug-location !496; batchtest/h264_dec/h264_dec.c:580:9

bb.336.for.inc1345:
; predecessors: %bb.335
  successors: %bb.322(0x80000000); %bb.322(100.00%)

  B %bb.322, debug-location !484; batchtest/h264_dec/h264_dec.c:563:9

bb.337.for.end1347:
; predecessors: %bb.322
  successors: %bb.338(0x80000000); %bb.338(100.00%)

  B %bb.338, debug-location !498; batchtest/h264_dec/h264_dec.c:581:7

bb.338.if.end1348:
; predecessors: %bb.320, %bb.337
  successors: %bb.339(0x80000000); %bb.339(100.00%)

  B %bb.339, debug-location !499; batchtest/h264_dec/h264_dec.c:582:5

bb.339.for.inc1349:
; predecessors: %bb.338
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $r11, -76, 14, $noreg, debug-location !500 :: (load (s32) from %stack.11); batchtest/h264_dec/h264_dec.c:151:29
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !500; batchtest/h264_dec/h264_dec.c:151:29
  STRi12 killed $r0, $r11, -32, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !191; batchtest/h264_dec/h264_dec.c:151:5

bb.340.for.end1351:
; predecessors: %bb.1

  $sp = frame-destroy SUBri killed $r11, 28, 14, $noreg, $noreg, debug-location !502; batchtest/h264_dec/h264_dec.c:584:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r5, def $r6, def $r7, def $r8, def $r9, def $r10, def $r11, def $lr, debug-location !502; batchtest/h264_dec/h264_dec.c:584:1
  BX_RET 14, $noreg, debug-location !502; batchtest/h264_dec/h264_dec.c:584:1

bb.341 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4
  CONSTPOOL_ENTRY 4, %const.4, 4
  CONSTPOOL_ENTRY 5, %const.5, 4
  CONSTPOOL_ENTRY 6, %const.6, 4

# End machine code for function h264_dec_decode_one_macroblock.

# Machine code for function h264_dec_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @h264_dec_img, align=4

bb.0.entry:
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !504 :: (load (s32) from constant-pool); batchtest/h264_dec/h264_dec.c:593:3
  BL_pred @h264_dec_decode_one_macroblock, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, debug-location !504; batchtest/h264_dec/h264_dec.c:593:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !505; batchtest/h264_dec/h264_dec.c:594:1
  BX_RET 14, $noreg, debug-location !505; batchtest/h264_dec/h264_dec.c:594:1

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function h264_dec_main.

# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]

bb.0.entry:
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  BL_pred @h264_dec_init, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !507; batchtest/h264_dec/h264_dec.c:599:3
  BL_pred @h264_dec_main, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !508; batchtest/h264_dec/h264_dec.c:600:3
  BL_pred @h264_dec_return, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $r0, debug-location !509; batchtest/h264_dec/h264_dec.c:602:12
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !510; batchtest/h264_dec/h264_dec.c:602:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !510; batchtest/h264_dec/h264_dec.c:602:3

# End machine code for function main.

# Machine code for function __absvdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @__func__.__absvdi2, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  $r2 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  $r2 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !512; ../absvdi2.c:25:11
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !512; ../absvdi2.c:25:11
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !513; ../absvdi2.c:25:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !513; ../absvdi2.c:25:9
  B %bb.1, debug-location !513; ../absvdi2.c:25:9

bb.1.if.then:
; predecessors: %bb.0

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !514 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !514 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
  renamable $r1 = MOVi 26, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !514; ../absvdi2.c:26:9

bb.2.if.end:
; predecessors: %bb.0

  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !515 :: (load (s32) from %stack.1); ../absvdi2.c:28:20
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !515 :: (load (s32) from %stack.0); ../absvdi2.c:28:20
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !515; ../absvdi2.c:28:20
  renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !515; ../absvdi2.c:28:20
  renamable $r1 = ADCrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !515; ../absvdi2.c:28:20
  renamable $r1 = EORrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, debug-location !515; ../absvdi2.c:28:20
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !516; ../absvdi2.c:28:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !516; ../absvdi2.c:28:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !516; ../absvdi2.c:28:5

bb.3 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __absvdi2.

# Machine code for function compilerrt_abort_impl: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten

bb.0.entry:

# End machine code for function compilerrt_abort_impl.

# Machine code for function __absvsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.1, align=4
  cp#1: @__func__.__absvsi2, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !521; ../absvsi2.c:25:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !521; ../absvsi2.c:25:9
  B %bb.1, debug-location !521; ../absvsi2.c:25:9

bb.1.if.then:
; predecessors: %bb.0

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !522 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !522 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
  renamable $r1 = MOVi 26, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !522; ../absvsi2.c:26:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !523 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !523; ../absvsi2.c:28:20
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  Bcc %bb.4, 5, killed $cpsr, debug-location !523; ../absvsi2.c:28:20

bb.3.if.end:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !523 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
  renamable $r0 = RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !523; ../absvsi2.c:28:20
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)

bb.4.if.end:
; predecessors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !523 :: (load (s32) from %stack.1); ../absvsi2.c:28:20
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !524; ../absvsi2.c:28:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !524; ../absvsi2.c:28:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !524; ../absvsi2.c:28:5

bb.5 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __absvsi2.

# Machine code for function __addvdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-4]
  fi#5: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.2, align=4
  cp#1: @__func__.__addvdi3, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  $r12 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  $r12 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !526; ../addvdi3.c:24:27
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = ADCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !526; ../addvdi3.c:24:27
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !528; ../addvdi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !528; ../addvdi3.c:25:9
  B %bb.1, debug-location !528; ../addvdi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !529 :: (load (s32) from %stack.0); ../addvdi3.c:27:15
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !529 :: (load (s32) from %stack.3); ../addvdi3.c:27:15
  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !529 :: (load (s32) from %stack.1); ../addvdi3.c:27:15
  $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !529 :: (load (s32) from %stack.2); ../addvdi3.c:27:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !529; ../addvdi3.c:27:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !529; ../addvdi3.c:27:15
  Bcc %bb.3, 10, killed $cpsr, debug-location !530; ../addvdi3.c:27:13
  B %bb.2, debug-location !530; ../addvdi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !531 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !531 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !531; ../addvdi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !532; ../addvdi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !533 :: (load (s32) from %stack.0); ../addvdi3.c:32:15
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !533 :: (load (s32) from %stack.3); ../addvdi3.c:32:15
  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !533 :: (load (s32) from %stack.1); ../addvdi3.c:32:15
  $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !533 :: (load (s32) from %stack.2); ../addvdi3.c:32:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !533; ../addvdi3.c:32:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !533; ../addvdi3.c:32:15
  Bcc %bb.6, 11, killed $cpsr, debug-location !534; ../addvdi3.c:32:13
  B %bb.5, debug-location !534; ../addvdi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !535 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !535 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !535; ../addvdi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !536 :: (load (s32) from %stack.0); ../addvdi3.c:35:5
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !536 :: (load (s32) from %stack.1); ../addvdi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !536; ../addvdi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !536; ../addvdi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !536; ../addvdi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __addvdi3.

# Machine code for function __addvsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.3, align=4
  cp#1: @__func__.__addvsi3, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = ADDrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !538; ../addvsi3.c:24:27
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !540; ../addvsi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !540; ../addvsi3.c:25:9
  B %bb.1, debug-location !540; ../addvsi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !542 :: (load (s32) from %stack.0); ../addvsi3.c:27:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !542 :: (load (s32) from %stack.1); ../addvsi3.c:27:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !542; ../addvsi3.c:27:13
  Bcc %bb.3, 10, killed $cpsr, debug-location !542; ../addvsi3.c:27:13
  B %bb.2, debug-location !542; ../addvsi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !543 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !543 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !543; ../addvsi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !544; ../addvsi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !546 :: (load (s32) from %stack.0); ../addvsi3.c:32:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !546 :: (load (s32) from %stack.1); ../addvsi3.c:32:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !546; ../addvsi3.c:32:13
  Bcc %bb.6, 11, killed $cpsr, debug-location !546; ../addvsi3.c:32:13
  B %bb.5, debug-location !546; ../addvsi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !547 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !547 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !547; ../addvsi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !548 :: (load (s32) from %stack.0); ../addvsi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !548; ../addvsi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !548; ../addvsi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !548; ../addvsi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __addvsi3.

# Machine code for function __ashldi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.2, %bb.1
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 40
  STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  $r3 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  $r3 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !551 :: (store (s32) into %ir.all + 4, basealign 8); ../ashldi3.c:29:15
  STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !551 :: (store (s32) into %ir.all, align 8); ../ashldi3.c:29:15
  TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !553; ../ashldi3.c:30:9
  Bcc %bb.2, 0, killed $cpsr, debug-location !553; ../ashldi3.c:30:9
  B %bb.1, debug-location !553; ../ashldi3.c:30:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !555 :: (store (s32) into %ir.low, align 8); ../ashldi3.c:32:22
  renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !556 :: (dereferenceable load (s32) from %ir.low2, align 8); ../ashldi3.c:33:33
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !557; ../ashldi3.c:33:43
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !558; ../ashldi3.c:33:37
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !561 :: (store (s32) into %ir.high); ../ashldi3.c:33:23
  B %bb.5, debug-location !562; ../ashldi3.c:34:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !564 :: (load (s32) from %stack.4); ../ashldi3.c:37:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !564; ../ashldi3.c:37:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !564; ../ashldi3.c:37:13
  B %bb.3, debug-location !564; ../ashldi3.c:37:13

bb.3.if.then4:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
  $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !565; ../ashldi3.c:38:13

bb.4.if.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !566 :: (load (s32) from %stack.4); ../ashldi3.c:39:33
  renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !566 :: (dereferenceable load (s32) from %ir.low6, align 8); ../ashldi3.c:39:33
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !567; ../ashldi3.c:39:37
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !569 :: (store (s32) into %ir.low9, align 8); ../ashldi3.c:39:23
  renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !573 :: (dereferenceable load (s32) from %ir.low14, align 8); ../ashldi3.c:40:56
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !571 :: (dereferenceable load (s32) from %ir.high11); ../ashldi3.c:40:34
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !572; ../ashldi3.c:40:39
  renamable $r2 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !574; ../ashldi3.c:40:77
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !576; ../ashldi3.c:40:45
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !579 :: (store (s32) into %ir.high17); ../ashldi3.c:40:23
  B %bb.5

bb.5.if.end18:
; predecessors: %bb.1, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !580 :: (dereferenceable load (s32) from %ir.all19, align 8); ../ashldi3.c:42:19
  renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !580 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../ashldi3.c:42:19
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !581; ../ashldi3.c:42:5

bb.6.return:
; predecessors: %bb.5, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !582 :: (load (s32) from %stack.6); ../ashldi3.c:0
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !582 :: (load (s32) from %stack.5); ../ashldi3.c:0
  $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !583; ../ashldi3.c:43:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !583; ../ashldi3.c:43:1

# End machine code for function __ashldi3.

# Machine code for function __ashrdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.2, %bb.1
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 40
  STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  $r3 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  $r3 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !586 :: (store (s32) into %ir.all + 4, basealign 8); ../ashrdi3.c:29:15
  STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !586 :: (store (s32) into %ir.all, align 8); ../ashrdi3.c:29:15
  TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !588; ../ashrdi3.c:30:9
  Bcc %bb.2, 0, killed $cpsr, debug-location !588; ../ashrdi3.c:30:9
  B %bb.1, debug-location !588; ../ashrdi3.c:30:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !590 :: (load (s32) from %stack.4); ../ashrdi3.c:33:33
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !590 :: (dereferenceable load (s32) from %ir.high); ../ashrdi3.c:33:33
  renamable $r0 = MOVsi killed renamable $r0, 249, 14, $noreg, $noreg, debug-location !591; ../ashrdi3.c:33:38
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !594 :: (store (s32) into %ir.high2); ../ashrdi3.c:33:23
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !596 :: (dereferenceable load (s32) from %ir.high4); ../ashrdi3.c:34:32
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !597; ../ashrdi3.c:34:43
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 1, 14, $noreg, $noreg, debug-location !598; ../ashrdi3.c:34:37
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !600 :: (store (s32) into %ir.low, align 8); ../ashrdi3.c:34:22
  B %bb.5, debug-location !601; ../ashrdi3.c:35:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !603 :: (load (s32) from %stack.4); ../ashrdi3.c:38:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !603; ../ashrdi3.c:38:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !603; ../ashrdi3.c:38:13
  B %bb.3, debug-location !603; ../ashrdi3.c:38:13

bb.3.if.then7:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
  $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !604; ../ashrdi3.c:39:13

bb.4.if.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !606 :: (load (s32) from %stack.4); ../ashrdi3.c:40:34
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !606 :: (dereferenceable load (s32) from %ir.high9); ../ashrdi3.c:40:34
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 1, 14, $noreg, $noreg, debug-location !607; ../ashrdi3.c:40:39
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !610 :: (store (s32) into %ir.high12); ../ashrdi3.c:40:24
  renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !615 :: (dereferenceable load (s32) from %ir.low17, align 8); ../ashrdi3.c:41:72
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !612 :: (dereferenceable load (s32) from %ir.high14); ../ashrdi3.c:41:33
  renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !613; ../ashrdi3.c:41:55
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !614; ../ashrdi3.c:41:38
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !617; ../ashrdi3.c:41:61
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !619 :: (store (s32) into %ir.low20, align 8); ../ashrdi3.c:41:22
  B %bb.5

bb.5.if.end21:
; predecessors: %bb.1, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !620 :: (dereferenceable load (s32) from %ir.all22, align 8); ../ashrdi3.c:43:19
  renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !620 :: (dereferenceable load (s32) from %ir.all22 + 4, basealign 8); ../ashrdi3.c:43:19
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !621; ../ashrdi3.c:43:5

bb.6.return:
; predecessors: %bb.5, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !622 :: (load (s32) from %stack.6); ../ashrdi3.c:0
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !622 :: (load (s32) from %stack.5); ../ashrdi3.c:0
  $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !623; ../ashrdi3.c:44:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !623; ../ashrdi3.c:44:1

# End machine code for function __ashrdi3.

# Machine code for function __clzdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !626 :: (store (s32) into %ir.all + 4, basealign 8); ../clzdi2.c:25:11
  STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !626 :: (store (s32) into %ir.all, align 8); ../clzdi2.c:25:11
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !632 :: (dereferenceable load (s32) from %ir.low, align 8); ../clzdi2.c:27:49
  renamable $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !628 :: (dereferenceable load (s32) from %ir.high2); ../clzdi2.c:26:28
  CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !633; ../clzdi2.c:27:42
  $r0 = MOVr $r2, 14, $noreg, $noreg, debug-location !633; ../clzdi2.c:27:42
  $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !633; ../clzdi2.c:27:42
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !634; ../clzdi2.c:27:12
  renamable $r1 = MOVi 32, 14, $noreg, $noreg
  renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !637; ../clzdi2.c:27:59
  CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !637; ../clzdi2.c:27:59
  $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !637; ../clzdi2.c:27:59
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !638; ../clzdi2.c:27:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !638; ../clzdi2.c:27:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __clzdi2.

# Machine code for function __clzsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $r3 = MOVr killed $r0, 14, $noreg, $noreg
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  CMPri renamable $r3, 65536, 14, $noreg, implicit-def $cpsr
  $r2 = MOVi 1, 3, killed $cpsr, $noreg, implicit renamable $r2
  renamable $r0 = MOVsi renamable $r2, 34, 14, $noreg, $noreg, debug-location !641; ../clzsi2.c:25:40
  renamable $r1 = MOVi 16, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi killed renamable $r1, killed renamable $r2, 34, 14, $noreg, $noreg, debug-location !642; ../clzsi2.c:26:14
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !643; ../clzsi2.c:26:7
  renamable $r1 = MOVi 65280, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !644; ../clzsi2.c:29:13
  renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !644; ../clzsi2.c:29:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !644; ../clzsi2.c:29:13
  renamable $r3 = MOVi 8, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi killed renamable $r3, renamable $r1, 26, 14, $noreg, $noreg, debug-location !647; ../clzsi2.c:30:13
  renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !648; ../clzsi2.c:30:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !649; ../clzsi2.c:31:7
  renamable $r1 = MOVi 240, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !650; ../clzsi2.c:33:13
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !650; ../clzsi2.c:33:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !650; ../clzsi2.c:33:13
  renamable $r2 = MOVi 4, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi killed renamable $r2, renamable $r1, 18, 14, $noreg, $noreg, debug-location !653; ../clzsi2.c:34:13
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !654; ../clzsi2.c:34:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !655; ../clzsi2.c:35:7
  renamable $r1 = MOVi 12, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !656; ../clzsi2.c:37:13
  renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !656; ../clzsi2.c:37:13
  renamable $lr = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !656; ../clzsi2.c:37:13
  renamable $r1 = MOVi 2, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi renamable $r1, renamable $lr, 10, 14, $noreg, $noreg, debug-location !659; ../clzsi2.c:38:13
  renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !660; ../clzsi2.c:38:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $lr, 10, 14, $noreg, $noreg, debug-location !661; ../clzsi2.c:39:7
  renamable $r1 = SUBrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !662; ../clzsi2.c:52:20
  renamable $r2 = MVNi 1, 14, $noreg, $noreg
  renamable $r2 = ORRrsi killed renamable $r2, killed renamable $r3, 11, 14, $noreg, $noreg, debug-location !663; ../clzsi2.c:52:37
  renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !663; ../clzsi2.c:52:37
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !664; ../clzsi2.c:52:25
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !665; ../clzsi2.c:52:14
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !666; ../clzsi2.c:52:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !666; ../clzsi2.c:52:5

# End machine code for function __clzsi2.

# Machine code for function __cmpdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $r2, $r3
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !669 :: (store (s32) into %ir.all + 4, basealign 8); ../cmpdi2.c:26:11
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !669 :: (store (s32) into %ir.all, align 8); ../cmpdi2.c:26:11
  STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !671 :: (store (s32) into %ir.all1 + 4, basealign 8); ../cmpdi2.c:28:11
  STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !671 :: (store (s32) into %ir.all1, align 8); ../cmpdi2.c:28:11
  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !673 :: (dereferenceable load (s32) from %ir.high); ../cmpdi2.c:29:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !675 :: (dereferenceable load (s32) from %ir.high3); ../cmpdi2.c:29:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !677; ../cmpdi2.c:29:9
  Bcc %bb.2, 10, killed $cpsr, debug-location !677; ../cmpdi2.c:29:9
  B %bb.1, debug-location !677; ../cmpdi2.c:29:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !678; ../cmpdi2.c:30:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !680 :: (dereferenceable load (s32) from %ir.high5); ../cmpdi2.c:31:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !682 :: (dereferenceable load (s32) from %ir.high7); ../cmpdi2.c:31:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !684; ../cmpdi2.c:31:9
  Bcc %bb.4, 13, killed $cpsr, debug-location !684; ../cmpdi2.c:31:9
  B %bb.3, debug-location !684; ../cmpdi2.c:31:9

bb.3.if.then9:
; predecessors: %bb.2
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !685; ../cmpdi2.c:32:9

bb.4.if.end10:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !686 :: (dereferenceable load (s32) from %ir.low, align 8); ../cmpdi2.c:33:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !687 :: (dereferenceable load (s32) from %ir.low13, align 8); ../cmpdi2.c:33:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !689; ../cmpdi2.c:33:9
  Bcc %bb.6, 2, killed $cpsr, debug-location !689; ../cmpdi2.c:33:9
  B %bb.5, debug-location !689; ../cmpdi2.c:33:9

bb.5.if.then15:
; predecessors: %bb.4
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !690; ../cmpdi2.c:34:9

bb.6.if.end16:
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !691 :: (dereferenceable load (s32) from %ir.low18, align 8); ../cmpdi2.c:35:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !692 :: (dereferenceable load (s32) from %ir.low20, align 8); ../cmpdi2.c:35:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !694; ../cmpdi2.c:35:9
  Bcc %bb.8, 9, killed $cpsr, debug-location !694; ../cmpdi2.c:35:9
  B %bb.7, debug-location !694; ../cmpdi2.c:35:9

bb.7.if.then22:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !695; ../cmpdi2.c:36:9

bb.8.if.end23:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !696; ../cmpdi2.c:37:5

bb.9.return:
; predecessors: %bb.8, %bb.7, %bb.5, %bb.3, %bb.1

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !697 :: (load (s32) from %stack.2); ../cmpdi2.c:0
  $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !698; ../cmpdi2.c:38:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !698; ../cmpdi2.c:38:1

# End machine code for function __cmpdi2.

# Machine code for function __aeabi_lcmp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  BL_pred @__cmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !700; ../cmpdi2.c:48:9
  renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !701; ../cmpdi2.c:48:24
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !702; ../cmpdi2.c:48:2
  BX_RET 14, $noreg, implicit killed $r0, debug-location !702; ../cmpdi2.c:48:2

# End machine code for function __aeabi_lcmp.

# Machine code for function __ctzdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !705 :: (store (s32) into %ir.all + 4, basealign 8); ../ctzdi2.c:25:11
  STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !705 :: (store (s32) into %ir.all, align 8); ../ctzdi2.c:25:11
  renamable $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !706 :: (dereferenceable load (s32) from %ir.low, align 8); ../ctzdi2.c:26:28
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !709 :: (dereferenceable load (s32) from %ir.high); ../ctzdi2.c:27:31
  CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !710; ../ctzdi2.c:27:41
  $r1 = MOVr $r2, 14, $noreg, $noreg, debug-location !710; ../ctzdi2.c:27:41
  $r1 = MOVr killed renamable $r0, 0, killed $cpsr, $noreg, implicit renamable $r1, debug-location !710; ../ctzdi2.c:27:41
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !711; ../ctzdi2.c:27:12
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !711; ../ctzdi2.c:27:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !711; ../ctzdi2.c:27:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !711; ../ctzdi2.c:27:12
  renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !711; ../ctzdi2.c:27:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !711; ../ctzdi2.c:27:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !711; ../ctzdi2.c:27:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !711; ../ctzdi2.c:27:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !711; ../ctzdi2.c:27:12
  renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !711; ../ctzdi2.c:27:12
  renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !711; ../ctzdi2.c:27:12
  renamable $r1 = MOVi 32, 14, $noreg, $noreg
  renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !713; ../ctzdi2.c:27:59
  CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !713; ../ctzdi2.c:27:59
  $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !713; ../ctzdi2.c:27:59
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !714; ../ctzdi2.c:27:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !714; ../ctzdi2.c:27:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __ctzdi2.

# Machine code for function __ctzsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0
  $r2 = MOVr killed $r0, 14, $noreg, $noreg
  $r0 = MOVi 255, 14, $noreg, $noreg
  $r0 = ORRri $r0, 65280, 14, $noreg, $noreg
  renamable $r0 = ANDrr renamable $r2, killed renamable $r0, 14, $noreg, $noreg, debug-location !716; ../ctzsi2.c:25:20
  renamable $r1 = RSBri renamable $r0, 0, 14, $noreg, def $cpsr, debug-location !716; ../ctzsi2.c:25:20
  renamable $r0 = ADCrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !716; ../ctzsi2.c:25:20
  renamable $r0 = MOVsi killed renamable $r0, 34, 14, $noreg, $noreg, debug-location !718; ../ctzsi2.c:25:40
  renamable $r3 = MOVsr renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !719; ../ctzsi2.c:26:7
  renamable $r1 = MOVi 255, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !720; ../ctzsi2.c:29:13
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !720; ../ctzsi2.c:29:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !720; ../ctzsi2.c:29:13
  renamable $r12 = MOVsi renamable $r1, 26, 14, $noreg, $noreg, debug-location !722; ../ctzsi2.c:29:29
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !723; ../ctzsi2.c:30:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !724; ../ctzsi2.c:31:7
  renamable $r1 = MOVi 15, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !725; ../ctzsi2.c:33:13
  renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !725; ../ctzsi2.c:33:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !725; ../ctzsi2.c:33:13
  renamable $r12 = MOVsi renamable $r1, 18, 14, $noreg, $noreg, debug-location !727; ../ctzsi2.c:33:27
  renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !728; ../ctzsi2.c:34:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !729; ../ctzsi2.c:35:7
  renamable $r1 = MOVi 3, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !730; ../ctzsi2.c:37:13
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !730; ../ctzsi2.c:37:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !730; ../ctzsi2.c:37:13
  renamable $r12 = MOVsi renamable $r1, 10, 14, $noreg, $noreg, debug-location !732; ../ctzsi2.c:37:26
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !733; ../ctzsi2.c:38:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !734; ../ctzsi2.c:40:7
  renamable $r1 = MOVi 1, 14, $noreg, $noreg
  renamable $r1 = ANDrsi killed renamable $r1, killed renamable $r2, 11, 14, $noreg, $noreg, debug-location !735; ../ctzsi2.c:56:25
  renamable $r1 = nuw nsw RSBri killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !736; ../ctzsi2.c:56:20
  renamable $r2 = MVNi 1, 14, $noreg, $noreg
  renamable $r2 = ORRrsr killed renamable $r2, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !737; ../ctzsi2.c:56:44
  renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !737; ../ctzsi2.c:56:44
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !738; ../ctzsi2.c:56:32
  renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !739; ../ctzsi2.c:56:14
  BX_RET 14, $noreg, implicit killed $r0, debug-location !740; ../ctzsi2.c:56:5

# End machine code for function __ctzsi2.

# Machine code for function __divdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  $lr = MOVr killed $r3, 14, $noreg, $noreg
  $r3 = MOVr killed $r1, 14, $noreg, $noreg
  dead renamable $r1 = KILL renamable $lr
  dead renamable $r1 = KILL renamable $r2
  dead renamable $r1 = KILL renamable $r3
  dead renamable $r1 = KILL renamable $r0
  renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !742; ../divdi3.c:23:20
  renamable $r0 = EORrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, $noreg, debug-location !744; ../divdi3.c:25:12
  renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !744; ../divdi3.c:25:12
  renamable $r0 = SUBrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !745; ../divdi3.c:25:19
  renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !745; ../divdi3.c:25:19
  renamable $r2 = EORrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, $noreg, debug-location !746; ../divdi3.c:26:12
  renamable $r3 = EORrsi renamable $lr, renamable $lr, 249, 14, $noreg, $noreg, debug-location !746; ../divdi3.c:26:12
  renamable $r2 = SUBrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, def $cpsr, debug-location !747; ../divdi3.c:26:19
  renamable $r3 = SBCrsi killed renamable $r3, renamable $lr, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !747; ../divdi3.c:26:19
  renamable $r12 = EORrsi killed renamable $r12, killed renamable $lr, 249, 14, $noreg, $noreg, debug-location !748; ../divdi3.c:27:9
  STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !749; ../divdi3.c:28:13
  renamable $r12 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !749 :: (store (s32) into stack); ../divdi3.c:28:13
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !749; ../divdi3.c:28:13
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !749 :: (load (s32) from %stack.0); ../divdi3.c:28:13
  renamable $r1 = EORrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !750; ../divdi3.c:28:44
  renamable $r0 = EORrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !750; ../divdi3.c:28:44
  renamable $r0 = SUBrr killed renamable $r0, renamable $r2, 14, $noreg, def $cpsr, debug-location !751; ../divdi3.c:28:51
  renamable $r1 = SBCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !751; ../divdi3.c:28:51
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !752; ../divdi3.c:28:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !752; ../divdi3.c:28:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !752; ../divdi3.c:28:5

# End machine code for function __divdi3.

# Machine code for function __udivmoddi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=4, align=4, at location [SP-52]
  fi#7: size=4, align=4, at location [SP-56]
  fi#8: size=4, align=4, at location [SP-60]
  fi#9: size=4, align=4, at location [SP-64]
  fi#10: size=4, align=4, at location [SP-68]
  fi#11: size=4, align=4, at location [SP-72]
  fi#12: size=4, align=4, at location [SP-76]
  fi#13: size=4, align=4, at location [SP-80]
  fi#14: size=4, align=4, at location [SP-84]
  fi#15: size=4, align=4, at location [SP-88]
  fi#16: size=4, align=4, at location [SP-92]
  fi#17: size=4, align=4, at location [SP-96]
  fi#18: size=4, align=4, at location [SP-4]
  fi#19: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.8
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 88, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  renamable $r12 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
  STRi12 killed $r12, $r11, -36, 14, $noreg :: (store (s32) into %stack.4)
  STRi12 killed renamable $r1, $r11, -4, 14, $noreg, debug-location !755 :: (store (s32) into %ir.all + 4, basealign 8); ../udivmoddi4.c:29:11
  STRi12 killed renamable $r0, $r11, -8, 14, $noreg, debug-location !755 :: (store (s32) into %ir.all, align 8); ../udivmoddi4.c:29:11
  STRi12 killed renamable $r3, $r11, -12, 14, $noreg, debug-location !757 :: (store (s32) into %ir.all1 + 4, basealign 8); ../udivmoddi4.c:31:11
  STRi12 killed renamable $r2, $r11, -16, 14, $noreg, debug-location !757 :: (store (s32) into %ir.all1, align 8); ../udivmoddi4.c:31:11
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !759 :: (dereferenceable load (s32) from %ir.high); ../udivmoddi4.c:36:13
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !761; ../udivmoddi4.c:36:9
  Bcc %bb.8, 1, killed $cpsr, debug-location !761; ../udivmoddi4.c:36:9
  B %bb.1, debug-location !761; ../udivmoddi4.c:36:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.5

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !763 :: (dereferenceable load (s32) from %ir.high3); ../udivmoddi4.c:38:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !765; ../udivmoddi4.c:38:13
  Bcc %bb.5, 1, killed $cpsr, debug-location !765; ../udivmoddi4.c:38:13
  B %bb.2, debug-location !765; ../udivmoddi4.c:38:13

bb.2.if.then5:
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !766 :: (load (s32) from %stack.4); ../udivmoddi4.c:44:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !766; ../udivmoddi4.c:44:17
  Bcc %bb.4, 0, killed $cpsr, debug-location !766; ../udivmoddi4.c:44:17
  B %bb.3, debug-location !766; ../udivmoddi4.c:44:17

bb.3.if.then6:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !767 :: (dereferenceable load (s32) from %ir.low, align 8); ../udivmoddi4.c:45:28
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !768 :: (dereferenceable load (s32) from %ir.low9, align 8); ../udivmoddi4.c:45:38
  BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !769; ../udivmoddi4.c:45:32
  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !769 :: (load (s32) from %stack.4); ../udivmoddi4.c:45:32
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !771 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:45:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !771 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:45:22
  B %bb.4, debug-location !772; ../udivmoddi4.c:45:17

bb.4.if.end:
; predecessors: %bb.2, %bb.3
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !773 :: (dereferenceable load (s32) from %ir.low12, align 8); ../udivmoddi4.c:46:24
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !774 :: (dereferenceable load (s32) from %ir.low14, align 8); ../udivmoddi4.c:46:34
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !775; ../udivmoddi4.c:46:28
  $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !775; ../udivmoddi4.c:46:28
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !777; ../udivmoddi4.c:46:13

bb.5.if.end16:
; predecessors: %bb.1
  successors: %bb.7, %bb.6

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !778 :: (load (s32) from %stack.4); ../udivmoddi4.c:52:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !778; ../udivmoddi4.c:52:13
  Bcc %bb.7, 0, killed $cpsr, debug-location !778; ../udivmoddi4.c:52:13
  B %bb.6, debug-location !778; ../udivmoddi4.c:52:13

bb.6.if.then18:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !779 :: (load (s32) from %stack.4); ../udivmoddi4.c:53:24
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !779 :: (dereferenceable load (s32) from %ir.low20, align 8); ../udivmoddi4.c:53:24
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !781 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:53:18
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !781 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:53:18
  B %bb.7, debug-location !782; ../udivmoddi4.c:53:13

bb.7.if.end22:
; predecessors: %bb.5, %bb.6
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  $r1 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !783; ../udivmoddi4.c:54:9

bb.8.if.end23:
; predecessors: %bb.0
  successors: %bb.9, %bb.26

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !784 :: (dereferenceable load (s32) from %ir.low25, align 8); ../udivmoddi4.c:57:13
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !786; ../udivmoddi4.c:57:9
  Bcc %bb.26, 1, killed $cpsr, debug-location !786; ../udivmoddi4.c:57:9
  B %bb.9, debug-location !786; ../udivmoddi4.c:57:9

bb.9.if.then28:
; predecessors: %bb.8
  successors: %bb.10, %bb.13

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !788 :: (dereferenceable load (s32) from %ir.high30); ../udivmoddi4.c:59:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !790; ../udivmoddi4.c:59:13
  Bcc %bb.13, 1, killed $cpsr, debug-location !790; ../udivmoddi4.c:59:13
  B %bb.10, debug-location !790; ../udivmoddi4.c:59:13

bb.10.if.then33:
; predecessors: %bb.9
  successors: %bb.12, %bb.11

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !791 :: (load (s32) from %stack.4); ../udivmoddi4.c:65:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !791; ../udivmoddi4.c:65:17
  Bcc %bb.12, 0, killed $cpsr, debug-location !791; ../udivmoddi4.c:65:17
  B %bb.11, debug-location !791; ../udivmoddi4.c:65:17

bb.11.if.then35:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !793 :: (dereferenceable load (s32) from %ir.high37); ../udivmoddi4.c:66:28
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !794 :: (dereferenceable load (s32) from %ir.low39, align 8); ../udivmoddi4.c:66:39
  BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !795; ../udivmoddi4.c:66:33
  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !795 :: (load (s32) from %stack.4); ../udivmoddi4.c:66:33
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !797 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:66:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !797 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:66:22
  B %bb.12, debug-location !798; ../udivmoddi4.c:66:17

bb.12.if.end42:
; predecessors: %bb.10, %bb.11
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !800 :: (dereferenceable load (s32) from %ir.high44); ../udivmoddi4.c:67:24
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !801 :: (dereferenceable load (s32) from %ir.low46, align 8); ../udivmoddi4.c:67:35
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !802; ../udivmoddi4.c:67:29
  $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !802; ../udivmoddi4.c:67:29
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !804; ../udivmoddi4.c:67:13

bb.13.if.end49:
; predecessors: %bb.9
  successors: %bb.14, %bb.17

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !805 :: (dereferenceable load (s32) from %ir.low51, align 8); ../udivmoddi4.c:70:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !807; ../udivmoddi4.c:70:13
  Bcc %bb.17, 1, killed $cpsr, debug-location !807; ../udivmoddi4.c:70:13
  B %bb.14, debug-location !807; ../udivmoddi4.c:70:13

bb.14.if.then54:
; predecessors: %bb.13
  successors: %bb.16, %bb.15

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !808 :: (load (s32) from %stack.4); ../udivmoddi4.c:76:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !808; ../udivmoddi4.c:76:17
  Bcc %bb.16, 0, killed $cpsr, debug-location !808; ../udivmoddi4.c:76:17
  B %bb.15, debug-location !808; ../udivmoddi4.c:76:17

bb.15.if.then56:
; predecessors: %bb.14
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !810 :: (dereferenceable load (s32) from %ir.high58); ../udivmoddi4.c:78:32
  renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !812 :: (dereferenceable load (s32) from %ir.high60); ../udivmoddi4.c:78:43
  BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !813; ../udivmoddi4.c:78:37
  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !813 :: (load (s32) from %stack.4); ../udivmoddi4.c:78:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !816 :: (store (s32) into %ir.high63); ../udivmoddi4.c:78:26
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !818 :: (store (s32) into %ir.low65, align 8); ../udivmoddi4.c:79:25
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !819 :: (dereferenceable load (s32) from %ir.all66, align 8); ../udivmoddi4.c:80:26
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !819 :: (dereferenceable load (s32) from %ir.all66 + 4, basealign 8); ../udivmoddi4.c:80:26
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !820 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:80:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !820 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:80:22
  B %bb.16, debug-location !821; ../udivmoddi4.c:81:13

bb.16.if.end67:
; predecessors: %bb.14, %bb.15
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !823 :: (dereferenceable load (s32) from %ir.high69); ../udivmoddi4.c:82:24
  renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !825 :: (dereferenceable load (s32) from %ir.high71); ../udivmoddi4.c:82:35
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !826; ../udivmoddi4.c:82:29
  $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !826; ../udivmoddi4.c:82:29
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !828; ../udivmoddi4.c:82:13

bb.17.if.end74:
; predecessors: %bb.13
  successors: %bb.18, %bb.21

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !830 :: (dereferenceable load (s32) from %ir.high78); ../udivmoddi4.c:88:18
  renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !833; ../udivmoddi4.c:88:35
  TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !836; ../udivmoddi4.c:88:13
  Bcc %bb.21, 1, killed $cpsr, debug-location !836; ../udivmoddi4.c:88:13
  B %bb.18, debug-location !836; ../udivmoddi4.c:88:13

bb.18.if.then81:
; predecessors: %bb.17
  successors: %bb.20, %bb.19

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !837 :: (load (s32) from %stack.4); ../udivmoddi4.c:90:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !837; ../udivmoddi4.c:90:17
  Bcc %bb.20, 0, killed $cpsr, debug-location !837; ../udivmoddi4.c:90:17
  B %bb.19, debug-location !837; ../udivmoddi4.c:90:17

bb.19.if.then83:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !838 :: (load (s32) from %stack.4); ../udivmoddi4.c:92:31
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !838 :: (dereferenceable load (s32) from %ir.low85, align 8); ../udivmoddi4.c:92:31
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !840 :: (store (s32) into %ir.low87, align 8); ../udivmoddi4.c:92:25
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !842 :: (dereferenceable load (s32) from %ir.high89); ../udivmoddi4.c:93:32
  renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !844 :: (dereferenceable load (s32) from %ir.high91); ../udivmoddi4.c:93:44
  renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !845; ../udivmoddi4.c:93:49
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !846; ../udivmoddi4.c:93:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !849 :: (store (s32) into %ir.high95); ../udivmoddi4.c:93:26
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !850 :: (dereferenceable load (s32) from %ir.all96, align 8); ../udivmoddi4.c:94:26
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !850 :: (dereferenceable load (s32) from %ir.all96 + 4, basealign 8); ../udivmoddi4.c:94:26
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !851 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:94:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !851 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:94:22
  B %bb.20, debug-location !852; ../udivmoddi4.c:95:13

bb.20.if.end97:
; predecessors: %bb.18, %bb.19
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !854 :: (dereferenceable load (s32) from %ir.high99); ../udivmoddi4.c:96:24
  renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !856 :: (dereferenceable load (s32) from %ir.high101); ../udivmoddi4.c:96:50
  renamable $r1 = SUBri renamable $r2, 1, 14, $noreg, $noreg, debug-location !857; ../udivmoddi4.c:96:32
  renamable $r1 = BICrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !857; ../udivmoddi4.c:96:32
  renamable $r2 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r2 = ANDrsi killed renamable $r2, renamable $r1, 11, 14, $noreg, $noreg, debug-location !857; ../udivmoddi4.c:96:32
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !857; ../udivmoddi4.c:96:32
  renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r2 = ANDrsi renamable $r3, renamable $r1, 19, 14, $noreg, $noreg, debug-location !857; ../udivmoddi4.c:96:32
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !857; ../udivmoddi4.c:96:32
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !857; ../udivmoddi4.c:96:32
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !857; ../udivmoddi4.c:96:32
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !857; ../udivmoddi4.c:96:32
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !857; ../udivmoddi4.c:96:32
  renamable $r1 = MOVsi killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !857; ../udivmoddi4.c:96:32
  renamable $r1 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !858; ../udivmoddi4.c:96:29
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !860; ../udivmoddi4.c:96:13

bb.21.if.end103:
; predecessors: %bb.17
  successors: %bb.22, %bb.25

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !862 :: (dereferenceable load (s32) from %ir.high105); ../udivmoddi4.c:102:32
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !863; ../udivmoddi4.c:102:14
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !865 :: (dereferenceable load (s32) from %ir.high107); ../udivmoddi4.c:102:58
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !866; ../udivmoddi4.c:102:40
  renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !867; ../udivmoddi4.c:102:38
  STRi12 $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.7)
  CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !869; ../udivmoddi4.c:104:13
  Bcc %bb.25, 3, killed $cpsr, debug-location !869; ../udivmoddi4.c:104:13
  B %bb.22, debug-location !869; ../udivmoddi4.c:104:13

bb.22.if.then111:
; predecessors: %bb.21
  successors: %bb.24, %bb.23

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !870 :: (load (s32) from %stack.4); ../udivmoddi4.c:106:16
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !870; ../udivmoddi4.c:106:16
  Bcc %bb.24, 0, killed $cpsr, debug-location !870; ../udivmoddi4.c:106:16
  B %bb.23, debug-location !870; ../udivmoddi4.c:106:16

bb.23.if.then113:
; predecessors: %bb.22
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !871 :: (load (s32) from %stack.4); ../udivmoddi4.c:107:26
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !871 :: (dereferenceable load (s32) from %ir.all114, align 8); ../udivmoddi4.c:107:26
  renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !871 :: (dereferenceable load (s32) from %ir.all114 + 4, basealign 8); ../udivmoddi4.c:107:26
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !872 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:107:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !872 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:107:22
  B %bb.24, debug-location !873; ../udivmoddi4.c:107:17

bb.24.if.end115:
; predecessors: %bb.22, %bb.23
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  $r1 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !874; ../udivmoddi4.c:108:13

bb.25.if.end116:
; predecessors: %bb.21
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  $r2 = LDRi12 $sp, 40, 14, $noreg, debug-location !875 :: (load (s32) from %stack.7); ../udivmoddi4.c:110:9
  renamable $r0 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !875; ../udivmoddi4.c:110:9
  renamable $r1 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !877 :: (store (s32) into %ir.low118, align 8); ../udivmoddi4.c:113:17
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !878 :: (dereferenceable load (s32) from %ir.low120, align 8); ../udivmoddi4.c:114:24
  renamable $r3 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:114:45
  renamable $r1 = MOVsr killed renamable $r1, renamable $r3, 2, 14, $noreg, $noreg, debug-location !880; ../udivmoddi4.c:114:28
  STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !883 :: (store (s32) into %ir.high123); ../udivmoddi4.c:114:18
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !885 :: (dereferenceable load (s32) from %ir.high125); ../udivmoddi4.c:116:24
  renamable $r1 = MOVsr killed renamable $r1, renamable $r0, 3, 14, $noreg, $noreg, debug-location !886; ../udivmoddi4.c:116:29
  STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !889 :: (store (s32) into %ir.high128); ../udivmoddi4.c:116:18
  renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !894 :: (dereferenceable load (s32) from %ir.low134, align 8); ../udivmoddi4.c:117:60
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !891 :: (dereferenceable load (s32) from %ir.high130); ../udivmoddi4.c:117:24
  renamable $r1 = MOVsr killed renamable $r1, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !893; ../udivmoddi4.c:117:29
  renamable $r1 = ORRrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !896; ../udivmoddi4.c:117:53
  STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !898 :: (store (s32) into %ir.low137, align 8); ../udivmoddi4.c:117:17
  STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.49, debug-location !899; ../udivmoddi4.c:118:5

bb.26.if.else:
; predecessors: %bb.8
  successors: %bb.27, %bb.40

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !901 :: (dereferenceable load (s32) from %ir.high139); ../udivmoddi4.c:121:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !903; ../udivmoddi4.c:121:13
  Bcc %bb.40, 1, killed $cpsr, debug-location !903; ../udivmoddi4.c:121:13
  B %bb.27, debug-location !903; ../udivmoddi4.c:121:13

bb.27.if.then142:
; predecessors: %bb.26
  successors: %bb.28, %bb.33

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !904 :: (dereferenceable load (s32) from %ir.low144, align 8); ../udivmoddi4.c:127:22
  renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !906; ../udivmoddi4.c:127:17
  TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !906; ../udivmoddi4.c:127:17
  Bcc %bb.33, 1, killed $cpsr, debug-location !906; ../udivmoddi4.c:127:17
  B %bb.28, debug-location !906; ../udivmoddi4.c:127:17

bb.28.if.then151:
; predecessors: %bb.27
  successors: %bb.30, %bb.29

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !907 :: (load (s32) from %stack.4); ../udivmoddi4.c:129:21
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !907; ../udivmoddi4.c:129:21
  Bcc %bb.30, 0, killed $cpsr, debug-location !907; ../udivmoddi4.c:129:21
  B %bb.29, debug-location !907; ../udivmoddi4.c:129:21

bb.29.if.then153:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !908 :: (load (s32) from %stack.4); ../udivmoddi4.c:130:32
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !908 :: (dereferenceable load (s32) from %ir.low155, align 8); ../udivmoddi4.c:130:32
  renamable $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !909 :: (dereferenceable load (s32) from %ir.low157, align 8); ../udivmoddi4.c:130:43
  renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !910; ../udivmoddi4.c:130:47
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !911; ../udivmoddi4.c:130:36
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !913 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:130:26
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !913 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:130:26
  B %bb.30, debug-location !914; ../udivmoddi4.c:130:21

bb.30.if.end161:
; predecessors: %bb.28, %bb.29
  successors: %bb.31, %bb.32

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !915 :: (dereferenceable load (s32) from %ir.low163, align 8); ../udivmoddi4.c:131:25
  CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !917; ../udivmoddi4.c:131:21
  Bcc %bb.32, 1, killed $cpsr, debug-location !917; ../udivmoddi4.c:131:21
  B %bb.31, debug-location !917; ../udivmoddi4.c:131:21

bb.31.if.then166:
; predecessors: %bb.30
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !918 :: (dereferenceable load (s32) from %ir.all167, align 8); ../udivmoddi4.c:132:30
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !918 :: (dereferenceable load (s32) from %ir.all167 + 4, basealign 8); ../udivmoddi4.c:132:30
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !919; ../udivmoddi4.c:132:21

bb.32.if.end168:
; predecessors: %bb.30
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !920 :: (dereferenceable load (s32) from %ir.low170, align 8); ../udivmoddi4.c:133:40
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !921; ../udivmoddi4.c:133:22
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !921; ../udivmoddi4.c:133:22
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !921; ../udivmoddi4.c:133:22
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !921; ../udivmoddi4.c:133:22
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !921; ../udivmoddi4.c:133:22
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !921; ../udivmoddi4.c:133:22
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !921; ../udivmoddi4.c:133:22
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !921; ../udivmoddi4.c:133:22
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !921; ../udivmoddi4.c:133:22
  renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r12 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !921; ../udivmoddi4.c:133:22
  renamable $r2 = MOVsi renamable $r12, 195, 14, $noreg, $noreg, debug-location !921; ../udivmoddi4.c:133:22
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !923 :: (dereferenceable load (s32) from %ir.high172); ../udivmoddi4.c:134:32
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !924; ../udivmoddi4.c:134:37
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !927 :: (store (s32) into %ir.high175); ../udivmoddi4.c:134:26
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !932 :: (dereferenceable load (s32) from %ir.low181, align 8); ../udivmoddi4.c:135:68
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !929 :: (dereferenceable load (s32) from %ir.high177); ../udivmoddi4.c:135:32
  renamable $r3 = MOVi 32, 14, $noreg, $noreg
  renamable $r3 = nuw nsw SUBrsi killed renamable $r3, killed renamable $r12, 195, 14, $noreg, $noreg, debug-location !930; ../udivmoddi4.c:135:54
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !931; ../udivmoddi4.c:135:37
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !934; ../udivmoddi4.c:135:61
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !936 :: (store (s32) into %ir.low185, align 8); ../udivmoddi4.c:135:25
  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !937 :: (dereferenceable load (s32) from %ir.all186, align 8); ../udivmoddi4.c:136:26
  renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !937 :: (dereferenceable load (s32) from %ir.all186 + 4, basealign 8); ../udivmoddi4.c:136:26
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !938; ../udivmoddi4.c:136:17

bb.33.if.end187:
; predecessors: %bb.27
  successors: %bb.34, %bb.35

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !939 :: (dereferenceable load (s32) from %ir.low189, align 8); ../udivmoddi4.c:142:55
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !940; ../udivmoddi4.c:142:37
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !943 :: (dereferenceable load (s32) from %ir.high191); ../udivmoddi4.c:142:80
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !944; ../udivmoddi4.c:142:62
  renamable $r0 = SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !945; ../udivmoddi4.c:142:60
  renamable $r0 = ADDri killed renamable $r0, 33, 14, $noreg, $noreg, debug-location !945; ../udivmoddi4.c:142:60
  STRi12 $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.9)
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !947; ../udivmoddi4.c:147:17
  Bcc %bb.35, 1, killed $cpsr, debug-location !947; ../udivmoddi4.c:147:17
  B %bb.34, debug-location !947; ../udivmoddi4.c:147:17

bb.34.if.then195:
; predecessors: %bb.33
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -24, 14, $noreg, debug-location !949 :: (store (s32) into %ir.low197, align 8); ../udivmoddi4.c:149:25
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !950 :: (dereferenceable load (s32) from %ir.low199, align 8); ../udivmoddi4.c:150:32
  STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !953 :: (store (s32) into %ir.high201); ../udivmoddi4.c:150:26
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !956 :: (store (s32) into %ir.high203); ../udivmoddi4.c:151:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !958 :: (dereferenceable load (s32) from %ir.high205); ../udivmoddi4.c:152:31
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !960 :: (store (s32) into %ir.low207, align 8); ../udivmoddi4.c:152:25
  B %bb.39, debug-location !961; ../udivmoddi4.c:153:13

bb.35.if.else208:
; predecessors: %bb.33
  successors: %bb.36, %bb.37

  $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !963 :: (load (s32) from %stack.9); ../udivmoddi4.c:154:22
  CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !963; ../udivmoddi4.c:154:22
  Bcc %bb.37, 8, killed $cpsr, debug-location !963; ../udivmoddi4.c:154:22
  B %bb.36, debug-location !963; ../udivmoddi4.c:154:22

bb.36.if.then211:
; predecessors: %bb.35
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  $r2 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !965 :: (store (s32) into %ir.low213, align 8); ../udivmoddi4.c:156:25
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !966 :: (dereferenceable load (s32) from %ir.low215, align 8); ../udivmoddi4.c:157:32
  renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !967; ../udivmoddi4.c:157:53
  renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !968; ../udivmoddi4.c:157:36
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !971 :: (store (s32) into %ir.high219); ../udivmoddi4.c:157:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !973 :: (dereferenceable load (s32) from %ir.high221); ../udivmoddi4.c:158:32
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !974; ../udivmoddi4.c:158:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !977 :: (store (s32) into %ir.high224); ../udivmoddi4.c:158:26
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !982 :: (dereferenceable load (s32) from %ir.low230, align 8); ../udivmoddi4.c:159:68
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !979 :: (dereferenceable load (s32) from %ir.high226); ../udivmoddi4.c:159:32
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !981; ../udivmoddi4.c:159:37
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !984; ../udivmoddi4.c:159:61
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !986 :: (store (s32) into %ir.low234, align 8); ../udivmoddi4.c:159:25
  B %bb.38, debug-location !987; ../udivmoddi4.c:160:13

bb.37.if.else235:
; predecessors: %bb.35
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !988 :: (load (s32) from %stack.9); ../udivmoddi4.c:163:31
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !988 :: (dereferenceable load (s32) from %ir.low237, align 8); ../udivmoddi4.c:163:31
  renamable $r3 = nsw RSBri renamable $r1, 64, 14, $noreg, $noreg, debug-location !989; ../udivmoddi4.c:163:53
  renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !990; ../udivmoddi4.c:163:35
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !992 :: (store (s32) into %ir.low241, align 8); ../udivmoddi4.c:163:25
  renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !997 :: (dereferenceable load (s32) from %ir.low247, align 8); ../udivmoddi4.c:165:33
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !994 :: (dereferenceable load (s32) from %ir.high243); ../udivmoddi4.c:164:33
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !996; ../udivmoddi4.c:164:38
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !998; ../udivmoddi4.c:165:44
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r2, renamable $r1, 3, 14, $noreg, $noreg, debug-location !1000; ../udivmoddi4.c:164:63
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !1003 :: (store (s32) into %ir.high252); ../udivmoddi4.c:164:26
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !1006 :: (store (s32) into %ir.high254); ../udivmoddi4.c:166:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1008 :: (dereferenceable load (s32) from %ir.high256); ../udivmoddi4.c:167:31
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !1010; ../udivmoddi4.c:167:36
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1012 :: (store (s32) into %ir.low260, align 8); ../udivmoddi4.c:167:25
  B %bb.38

bb.38.if.end261:
; predecessors: %bb.37, %bb.36
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  B %bb.39

bb.39.if.end262:
; predecessors: %bb.38, %bb.34
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  $r0 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
  B %bb.48, debug-location !1013; ../udivmoddi4.c:169:9

bb.40.if.else263:
; predecessors: %bb.26
  successors: %bb.41, %bb.44

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1015 :: (dereferenceable load (s32) from %ir.high265); ../udivmoddi4.c:176:36
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !1016; ../udivmoddi4.c:176:18
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1018 :: (dereferenceable load (s32) from %ir.high267); ../udivmoddi4.c:176:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1019; ../udivmoddi4.c:176:44
  renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1020; ../udivmoddi4.c:176:42
  STRi12 $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.11)
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1022; ../udivmoddi4.c:178:17
  Bcc %bb.44, 3, killed $cpsr, debug-location !1022; ../udivmoddi4.c:178:17
  B %bb.41, debug-location !1022; ../udivmoddi4.c:178:17

bb.41.if.then271:
; predecessors: %bb.40
  successors: %bb.43, %bb.42

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !1023 :: (load (s32) from %stack.4); ../udivmoddi4.c:180:21
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1023; ../udivmoddi4.c:180:21
  Bcc %bb.43, 0, killed $cpsr, debug-location !1023; ../udivmoddi4.c:180:21
  B %bb.42, debug-location !1023; ../udivmoddi4.c:180:21

bb.42.if.then273:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !1024 :: (load (s32) from %stack.4); ../udivmoddi4.c:181:30
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1024 :: (dereferenceable load (s32) from %ir.all274, align 8); ../udivmoddi4.c:181:30
  renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1024 :: (dereferenceable load (s32) from %ir.all274 + 4, basealign 8); ../udivmoddi4.c:181:30
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !1025 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:181:26
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !1025 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:181:26
  B %bb.43, debug-location !1026; ../udivmoddi4.c:181:21

bb.43.if.end275:
; predecessors: %bb.41, %bb.42
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  $r1 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1027; ../udivmoddi4.c:182:17

bb.44.if.end276:
; predecessors: %bb.40
  successors: %bb.45, %bb.46

  $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !1028 :: (load (s32) from %stack.11); ../udivmoddi4.c:184:13
  renamable $r0 = nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1028; ../udivmoddi4.c:184:13
  STRi12 $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.12)
  renamable $r1 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !1030 :: (store (s32) into %ir.low279, align 8); ../udivmoddi4.c:187:21
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1032; ../udivmoddi4.c:188:17
  Bcc %bb.46, 1, killed $cpsr, debug-location !1032; ../udivmoddi4.c:188:17
  B %bb.45, debug-location !1032; ../udivmoddi4.c:188:17

bb.45.if.then282:
; predecessors: %bb.44
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1033 :: (dereferenceable load (s32) from %ir.low284, align 8); ../udivmoddi4.c:190:32
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !1036 :: (store (s32) into %ir.high286); ../udivmoddi4.c:190:26
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !1039 :: (store (s32) into %ir.high288); ../udivmoddi4.c:191:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1041 :: (dereferenceable load (s32) from %ir.high290); ../udivmoddi4.c:192:31
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1043 :: (store (s32) into %ir.low292, align 8); ../udivmoddi4.c:192:25
  B %bb.47, debug-location !1044; ../udivmoddi4.c:193:13

bb.46.if.else293:
; predecessors: %bb.44
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !1045 :: (load (s32) from %stack.12); ../udivmoddi4.c:196:32
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1045 :: (load (s32) from %stack.11); ../udivmoddi4.c:196:32
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1045 :: (dereferenceable load (s32) from %ir.low295, align 8); ../udivmoddi4.c:196:32
  renamable $r3 = nsw RSBri renamable $r1, 31, 14, $noreg, $noreg, debug-location !1046; ../udivmoddi4.c:196:53
  renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !1047; ../udivmoddi4.c:196:36
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !1050 :: (store (s32) into %ir.high299); ../udivmoddi4.c:196:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1052 :: (dereferenceable load (s32) from %ir.high301); ../udivmoddi4.c:197:32
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1053; ../udivmoddi4.c:197:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !1056 :: (store (s32) into %ir.high304); ../udivmoddi4.c:197:26
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1061 :: (dereferenceable load (s32) from %ir.low310, align 8); ../udivmoddi4.c:198:68
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1058 :: (dereferenceable load (s32) from %ir.high306); ../udivmoddi4.c:198:32
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !1060; ../udivmoddi4.c:198:37
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1063; ../udivmoddi4.c:198:61
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1065 :: (store (s32) into %ir.low314, align 8); ../udivmoddi4.c:198:25
  B %bb.47

bb.47.if.end315:
; predecessors: %bb.46, %bb.45
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  $r0 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.12)
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
  B %bb.48

bb.48.if.end316:
; predecessors: %bb.47, %bb.39
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1066 :: (load (s32) from %stack.10); ../udivmoddi4.c:0
  STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.49

bb.49.if.end317:
; predecessors: %bb.48, %bb.25
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !1066 :: (load (s32) from %stack.8); ../udivmoddi4.c:0
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.50, debug-location !1067; ../udivmoddi4.c:209:5

bb.50.for.cond:
; predecessors: %bb.49, %bb.52
  successors: %bb.53, %bb.51

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1066 :: (load (s32) from %stack.14); ../udivmoddi4.c:0
  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !1066 :: (load (s32) from %stack.13); ../udivmoddi4.c:0
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.16)
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.15)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1067; ../udivmoddi4.c:209:5
  Bcc %bb.53, 0, killed $cpsr, debug-location !1067; ../udivmoddi4.c:209:5
  B %bb.51, debug-location !1067; ../udivmoddi4.c:209:5

bb.51.for.body:
; predecessors: %bb.50
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1071 :: (load (s32) from %stack.16); ../udivmoddi4.c:212:43
  renamable $r1 = LDRi12 $r11, -32, 14, $noreg, debug-location !1071 :: (dereferenceable load (s32) from %ir.low324, align 8); ../udivmoddi4.c:212:43
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !1070 :: (dereferenceable load (s32) from %ir.high321); ../udivmoddi4.c:212:25
  renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !1072; ../udivmoddi4.c:212:36
  renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !1072; ../udivmoddi4.c:212:36
  STRi12 killed renamable $r2, $r11, -28, 14, $noreg, debug-location !1075 :: (store (s32) into %ir.high328); ../udivmoddi4.c:212:18
  renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !1077 :: (dereferenceable load (s32) from %ir.high333); ../udivmoddi4.c:213:43
  renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !1078; ../udivmoddi4.c:213:36
  renamable $r1 = ORRrsi killed renamable $r1, killed renamable $r2, 251, 14, $noreg, $noreg, debug-location !1078; ../udivmoddi4.c:213:36
  STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !1080 :: (store (s32) into %ir.low337, align 8); ../udivmoddi4.c:213:18
  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1083 :: (dereferenceable load (s32) from %ir.low342, align 8); ../udivmoddi4.c:214:43
  renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !1082 :: (dereferenceable load (s32) from %ir.high339); ../udivmoddi4.c:214:25
  renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !1084; ../udivmoddi4.c:214:36
  renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !1084; ../udivmoddi4.c:214:36
  STRi12 killed renamable $r2, $r11, -20, 14, $noreg, debug-location !1087 :: (store (s32) into %ir.high346); ../udivmoddi4.c:214:18
  renamable $r0 = ORRrsi renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !1089; ../udivmoddi4.c:215:36
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !1091 :: (store (s32) into %ir.low352, align 8); ../udivmoddi4.c:215:18
  renamable $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !1092 :: (dereferenceable load (s32) from %ir.all354, align 8); ../udivmoddi4.c:223:37
  renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !1092 :: (dereferenceable load (s32) from %ir.all354 + 4, basealign 8); ../udivmoddi4.c:223:37
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !1093 :: (dereferenceable load (s32) from %ir.all355, align 8); ../udivmoddi4.c:223:45
  renamable $r1 = LDRi12 $r11, -28, 14, $noreg, debug-location !1093 :: (dereferenceable load (s32) from %ir.all355 + 4, basealign 8); ../udivmoddi4.c:223:45
  renamable $r3 = MVNr renamable $r1, 14, $noreg, $noreg, debug-location !1094; ../udivmoddi4.c:223:49
  renamable $lr = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !1094; ../udivmoddi4.c:223:49
  dead renamable $lr = ADDrr renamable $r12, killed renamable $lr, 14, $noreg, def $cpsr, debug-location !1094; ../udivmoddi4.c:223:49
  renamable $r3 = ADCrr renamable $r2, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1094; ../udivmoddi4.c:223:49
  STRi12 $r3, $sp, 0, 14, $noreg :: (store (s32) into %stack.17)
  renamable $r12 = SUBrr renamable $r0, killed renamable $r12, 14, $noreg, def $cpsr, debug-location !1097; ../udivmoddi4.c:225:15
  renamable $r2 = SBCrr renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1097; ../udivmoddi4.c:225:15
  CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !1097; ../udivmoddi4.c:225:15
  $r0 = MOVr killed renamable $r12, 4, killed $cpsr, $noreg, implicit renamable $r0, debug-location !1097; ../udivmoddi4.c:225:15
  CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !1097; ../udivmoddi4.c:225:15
  $r1 = MOVr killed renamable $r2, 4, killed $cpsr, $noreg, implicit renamable $r1, debug-location !1097; ../udivmoddi4.c:225:15
  STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !1097 :: (store (s32) into %ir.all363 + 4, basealign 8); ../udivmoddi4.c:225:15
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1097 :: (store (s32) into %ir.all363, align 8); ../udivmoddi4.c:225:15
  B %bb.52, debug-location !1098; ../udivmoddi4.c:226:5

bb.52.for.inc:
; predecessors: %bb.51
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1099 :: (load (s32) from %stack.15); ../udivmoddi4.c:224:19
  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1099 :: (load (s32) from %stack.17); ../udivmoddi4.c:224:19
  renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !1099; ../udivmoddi4.c:224:19
  renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1101; ../udivmoddi4.c:209:20
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.50, debug-location !1067; ../udivmoddi4.c:209:5

bb.53.for.end:
; predecessors: %bb.50
  successors: %bb.55, %bb.54

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !1103 :: (load (s32) from %stack.4); ../udivmoddi4.c:227:16
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1103 :: (load (s32) from %stack.16); ../udivmoddi4.c:227:16
  renamable $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1103 :: (dereferenceable load (s32) from %ir.all365, align 8); ../udivmoddi4.c:227:16
  renamable $r1 = LDRi12 $r11, -20, 14, $noreg, debug-location !1103 :: (dereferenceable load (s32) from %ir.all365 + 4, basealign 8); ../udivmoddi4.c:227:16
  renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !1104; ../udivmoddi4.c:227:20
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r3, 251, 14, $noreg, $noreg, debug-location !1104; ../udivmoddi4.c:227:20
  renamable $r2 = ORRrsi renamable $r2, killed renamable $r3, 10, 14, $noreg, $noreg, debug-location !1106; ../udivmoddi4.c:227:26
  STRi12 killed renamable $r2, $r11, -24, 14, $noreg, debug-location !1108 :: (store (s32) into %ir.all369, align 8); ../udivmoddi4.c:227:11
  STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !1108 :: (store (s32) into %ir.all369 + 4, basealign 8); ../udivmoddi4.c:227:11
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1109; ../udivmoddi4.c:228:9
  Bcc %bb.55, 0, killed $cpsr, debug-location !1109; ../udivmoddi4.c:228:9
  B %bb.54, debug-location !1109; ../udivmoddi4.c:228:9

bb.54.if.then371:
; predecessors: %bb.53
  successors: %bb.55(0x80000000); %bb.55(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !1110 :: (load (s32) from %stack.4); ../udivmoddi4.c:229:18
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !1110 :: (dereferenceable load (s32) from %ir.all372, align 8); ../udivmoddi4.c:229:18
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !1110 :: (dereferenceable load (s32) from %ir.all372 + 4, basealign 8); ../udivmoddi4.c:229:18
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !1111 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:229:14
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !1111 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:229:14
  B %bb.55, debug-location !1112; ../udivmoddi4.c:229:9

bb.55.if.end373:
; predecessors: %bb.53, %bb.54
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1113 :: (dereferenceable load (s32) from %ir.all374, align 8); ../udivmoddi4.c:230:14
  renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1113 :: (dereferenceable load (s32) from %ir.all374 + 4, basealign 8); ../udivmoddi4.c:230:14
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1114; ../udivmoddi4.c:230:5

bb.56.return:
; predecessors: %bb.43, %bb.32, %bb.31, %bb.55, %bb.24, %bb.20, %bb.16, %bb.12, %bb.7, %bb.4

  $r0 = LDRi12 $sp, 44, 14, $noreg, debug-location !1066 :: (load (s32) from %stack.6); ../udivmoddi4.c:0
  $r1 = LDRi12 $r11, -40, 14, $noreg, debug-location !1066 :: (load (s32) from %stack.5); ../udivmoddi4.c:0
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1115; ../udivmoddi4.c:231:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1115; ../udivmoddi4.c:231:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1115; ../udivmoddi4.c:231:1

bb.57 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __udivmoddi4.

# Machine code for function __divmoddi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-36]
  fi#3: size=4, align=4, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-4]
  fi#5: size=4, align=4, at location [SP-8]
  fi#6: size=4, align=4, at location [SP-12]
  fi#7: size=4, align=4, at location [SP-16]
  fi#8: size=4, align=4, at location [SP-20]
  fi#9: size=4, align=4, at location [SP-24]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r7, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r7, -12
  frame-setup CFI_INSTRUCTION offset $r6, -16
  frame-setup CFI_INSTRUCTION offset $r5, -20
  frame-setup CFI_INSTRUCTION offset $r4, -24
  $r11 = frame-setup ADDri killed $sp, 16, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  STRi12 $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.0)
  $r5 = MOVr killed $r2, 14, $noreg, $noreg
  STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  dead renamable $r2 = KILL renamable $r3
  dead renamable $r2 = KILL renamable $r5
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  renamable $r2 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
  STRi12 $r2, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  $r2 = MOVr $r5, 14, $noreg, $noreg, debug-location !1117; ../divmoddi4.c:22:14
  BL_pred @__divdi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1117; ../divmoddi4.c:22:14
  $r12 = LDRi12 $sp, 0, 14, $noreg, debug-location !1117 :: (load (s32) from %stack.3); ../divmoddi4.c:22:14
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1117 :: (load (s32) from %stack.2); ../divmoddi4.c:22:14
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1117 :: (load (s32) from %stack.1); ../divmoddi4.c:22:14
  $lr = LDRi12 $sp, 12, 14, $noreg, debug-location !1117 :: (load (s32) from %stack.0); ../divmoddi4.c:22:14
  early-clobber renamable $r4, early-clobber renamable $r7 = UMULLv5 renamable $r0, renamable $r5, 14, $noreg, $noreg, debug-location !1118; ../divmoddi4.c:23:16
  early-clobber renamable $r6 = MLAv5 renamable $r0, killed renamable $lr, killed renamable $r7, 14, $noreg, $noreg, debug-location !1118; ../divmoddi4.c:23:16
  early-clobber renamable $lr = MLAv5 renamable $r1, killed renamable $r5, killed renamable $r6, 14, $noreg, $noreg, debug-location !1118; ../divmoddi4.c:23:16
  renamable $r12 = SUBrr killed renamable $r12, killed renamable $r4, 14, $noreg, def $cpsr, debug-location !1119; ../divmoddi4.c:23:12
  renamable $r2 = SBCrr killed renamable $r2, killed renamable $lr, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1119; ../divmoddi4.c:23:12
  STRi12 killed renamable $r12, renamable $r3, 0, 14, $noreg, debug-location !1120 :: (store (s32) into %ir.rem, align 8); ../divmoddi4.c:23:8
  STRi12 killed renamable $r2, killed renamable $r3, 4, 14, $noreg, debug-location !1120 :: (store (s32) into %ir.rem + 4, basealign 8); ../divmoddi4.c:23:8
  $sp = frame-destroy SUBri killed $r11, 16, 14, $noreg, $noreg, debug-location !1121; ../divmoddi4.c:24:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r5, def $r6, def $r7, def $r11, def $lr, debug-location !1121; ../divmoddi4.c:24:3
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1121; ../divmoddi4.c:24:3

# End machine code for function __divmoddi4.

# Machine code for function __divmodsi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-4]
  fi#4: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  liveins: $r0, $r1, $r2, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1123; ../divmodsi4.c:22:14
  $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !1123 :: (load (s32) from %stack.2); ../divmodsi4.c:22:14
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1123 :: (load (s32) from %stack.1); ../divmodsi4.c:22:14
  $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1123 :: (load (s32) from %stack.0); ../divmodsi4.c:22:14
  early-clobber renamable $r3 = nsw MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !1124; ../divmodsi4.c:23:16
  renamable $r1 = nsw SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1125; ../divmodsi4.c:23:12
  STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !1126 :: (store (s32) into %ir.rem); ../divmodsi4.c:23:8
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1127; ../divmodsi4.c:24:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1127; ../divmodsi4.c:24:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1127; ../divmodsi4.c:24:3

# End machine code for function __divmodsi4.

# Machine code for function __divsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  $r3 = MOVr killed $r1, 14, $noreg, $noreg
  $r1 = MOVr killed $r0, 14, $noreg, $noreg
  renamable $r2 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !1129; ../divsi3.c:25:20
  renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !1131; ../divsi3.c:27:12
  renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 249, 14, $noreg, $noreg, debug-location !1132; ../divsi3.c:27:19
  renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1133; ../divsi3.c:28:12
  renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1134; ../divsi3.c:28:19
  renamable $r2 = EORrsi killed renamable $r2, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !1135; ../divsi3.c:29:9
  STRi12 $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1136; ../divsi3.c:36:22
  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1136 :: (load (s32) from %stack.0); ../divsi3.c:36:22
  renamable $r0 = EORrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1137; ../divsi3.c:36:33
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1138; ../divsi3.c:36:40
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1139; ../divsi3.c:36:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1139; ../divsi3.c:36:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1139; ../divsi3.c:36:5

# End machine code for function __divsi3.

# Machine code for function __ffsdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 12, 14, $noreg, debug-location !1142 :: (store (s32) into %ir.all + 4, basealign 8); ../ffsdi2.c:25:11
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg, debug-location !1142 :: (store (s32) into %ir.all, align 8); ../ffsdi2.c:25:11
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1143 :: (dereferenceable load (s32) from %ir.low, align 8); ../ffsdi2.c:26:13
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1145; ../ffsdi2.c:26:9
  Bcc %bb.4, 1, killed $cpsr, debug-location !1145; ../ffsdi2.c:26:9
  B %bb.1, debug-location !1145; ../ffsdi2.c:26:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1147 :: (dereferenceable load (s32) from %ir.high); ../ffsdi2.c:28:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1149; ../ffsdi2.c:28:13
  Bcc %bb.3, 1, killed $cpsr, debug-location !1149; ../ffsdi2.c:28:13
  B %bb.2, debug-location !1149; ../ffsdi2.c:28:13

bb.2.if.then3:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.5, debug-location !1150; ../ffsdi2.c:29:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1152 :: (dereferenceable load (s32) from %ir.high5); ../ffsdi2.c:30:34
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1153; ../ffsdi2.c:30:16
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1153; ../ffsdi2.c:30:16
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1153; ../ffsdi2.c:30:16
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1153; ../ffsdi2.c:30:16
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1153; ../ffsdi2.c:30:16
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1153; ../ffsdi2.c:30:16
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1153; ../ffsdi2.c:30:16
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1153; ../ffsdi2.c:30:16
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1153; ../ffsdi2.c:30:16
  renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1153; ../ffsdi2.c:30:16
  renamable $r0 = MOVi 33, 14, $noreg, $noreg
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1154; ../ffsdi2.c:30:40
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.5, debug-location !1155; ../ffsdi2.c:30:9

bb.4.if.end6:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1156 :: (dereferenceable load (s32) from %ir.low8, align 8); ../ffsdi2.c:32:30
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1157; ../ffsdi2.c:32:12
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1157; ../ffsdi2.c:32:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1157; ../ffsdi2.c:32:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1157; ../ffsdi2.c:32:12
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1157; ../ffsdi2.c:32:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1157; ../ffsdi2.c:32:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1157; ../ffsdi2.c:32:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1157; ../ffsdi2.c:32:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1157; ../ffsdi2.c:32:12
  renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1157; ../ffsdi2.c:32:12
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1158; ../ffsdi2.c:32:35
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.5, debug-location !1159; ../ffsdi2.c:32:5

bb.5.return:
; predecessors: %bb.4, %bb.3, %bb.2

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1160 :: (load (s32) from %stack.1); ../ffsdi2.c:0
  $sp = frame-destroy ADDri killed $sp, 16, 14, $noreg, $noreg, debug-location !1161; ../ffsdi2.c:33:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1161; ../ffsdi2.c:33:1

bb.6 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __ffsdi2.

# Machine code for function __ffssi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1164; ../ffssi2.c:24:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !1164; ../ffssi2.c:24:9
  B %bb.1, debug-location !1164; ../ffssi2.c:24:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.3, debug-location !1165; ../ffssi2.c:26:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1166 :: (load (s32) from %stack.0); ../ffssi2.c:28:12
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1166; ../ffssi2.c:28:12
  renamable $r0 = BICrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1166; ../ffssi2.c:28:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1166; ../ffssi2.c:28:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1166; ../ffssi2.c:28:12
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1166; ../ffssi2.c:28:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1166; ../ffssi2.c:28:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1166; ../ffssi2.c:28:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1166; ../ffssi2.c:28:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1166; ../ffssi2.c:28:12
  renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1166; ../ffssi2.c:28:12
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1167; ../ffssi2.c:28:29
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.3, debug-location !1168; ../ffssi2.c:28:5

bb.3.return:
; predecessors: %bb.2, %bb.1

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1169 :: (load (s32) from %stack.1); ../ffssi2.c:0
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !1170; ../ffssi2.c:29:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1170; ../ffssi2.c:29:1

bb.4 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __ffssi2.

# Machine code for function __lshrdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.2, %bb.1
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 40
  STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  $r3 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  $r3 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !1173 :: (store (s32) into %ir.all + 4, basealign 8); ../lshrdi3.c:29:15
  STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !1173 :: (store (s32) into %ir.all, align 8); ../lshrdi3.c:29:15
  TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !1175; ../lshrdi3.c:30:9
  Bcc %bb.2, 0, killed $cpsr, debug-location !1175; ../lshrdi3.c:30:9
  B %bb.1, debug-location !1175; ../lshrdi3.c:30:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !1178 :: (store (s32) into %ir.high); ../lshrdi3.c:32:23
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1180 :: (dereferenceable load (s32) from %ir.high2); ../lshrdi3.c:33:32
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !1181; ../lshrdi3.c:33:43
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !1182; ../lshrdi3.c:33:37
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !1184 :: (store (s32) into %ir.low, align 8); ../lshrdi3.c:33:22
  B %bb.5, debug-location !1185; ../lshrdi3.c:34:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1187 :: (load (s32) from %stack.4); ../lshrdi3.c:37:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1187; ../lshrdi3.c:37:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !1187; ../lshrdi3.c:37:13
  B %bb.3, debug-location !1187; ../lshrdi3.c:37:13

bb.3.if.then4:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
  $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !1188; ../lshrdi3.c:38:13

bb.4.if.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !1190 :: (load (s32) from %stack.4); ../lshrdi3.c:39:34
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1190 :: (dereferenceable load (s32) from %ir.high6); ../lshrdi3.c:39:34
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1191; ../lshrdi3.c:39:39
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !1194 :: (store (s32) into %ir.high9); ../lshrdi3.c:39:24
  renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !1199 :: (dereferenceable load (s32) from %ir.low14, align 8); ../lshrdi3.c:40:72
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1196 :: (dereferenceable load (s32) from %ir.high11); ../lshrdi3.c:40:33
  renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !1197; ../lshrdi3.c:40:55
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !1198; ../lshrdi3.c:40:38
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1201; ../lshrdi3.c:40:61
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !1203 :: (store (s32) into %ir.low17, align 8); ../lshrdi3.c:40:22
  B %bb.5

bb.5.if.end18:
; predecessors: %bb.1, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1204 :: (dereferenceable load (s32) from %ir.all19, align 8); ../lshrdi3.c:42:19
  renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1204 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../lshrdi3.c:42:19
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !1205; ../lshrdi3.c:42:5

bb.6.return:
; predecessors: %bb.5, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1206 :: (load (s32) from %stack.6); ../lshrdi3.c:0
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1206 :: (load (s32) from %stack.5); ../lshrdi3.c:0
  $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !1207; ../lshrdi3.c:43:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1207; ../lshrdi3.c:43:1

# End machine code for function __lshrdi3.

# Machine code for function __moddi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  $r12 = MOVr killed $r1, 14, $noreg, $noreg
  STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  dead renamable $r1 = KILL renamable $r3
  dead renamable $r1 = KILL renamable $r2
  dead renamable $r1 = KILL renamable $r12
  dead renamable $r1 = KILL renamable $r0
  renamable $r1 = ADDrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !1209; ../moddi3.c:24:17
  renamable $r2 = EORrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1209; ../moddi3.c:24:17
  renamable $r1 = ADCrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1209; ../moddi3.c:24:17
  renamable $r3 = EORrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !1209; ../moddi3.c:24:17
  renamable $r0 = EORrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1211; ../moddi3.c:26:12
  renamable $r1 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1211; ../moddi3.c:26:12
  renamable $r0 = SUBrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !1212; ../moddi3.c:26:17
  renamable $r1 = SBCrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1212; ../moddi3.c:26:17
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1213; ../moddi3.c:28:5
  renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1213 :: (store (s32) into stack); ../moddi3.c:28:5
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1213; ../moddi3.c:28:5
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1213 :: (load (s32) from %stack.1); ../moddi3.c:28:5
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1214 :: (dereferenceable load (s32) from %ir.r, align 8); ../moddi3.c:29:21
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1214 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../moddi3.c:29:21
  renamable $r1 = EORrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1215; ../moddi3.c:29:23
  renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1215; ../moddi3.c:29:23
  renamable $r0 = SUBrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !1216; ../moddi3.c:29:28
  renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1216; ../moddi3.c:29:28
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1217; ../moddi3.c:29:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1217; ../moddi3.c:29:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1217; ../moddi3.c:29:5

# End machine code for function __moddi3.

# Machine code for function __modsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1219; ../modsi3.c:22:16
  $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !1219 :: (load (s32) from %stack.1); ../modsi3.c:22:16
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1219; ../modsi3.c:22:16
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1220 :: (load (s32) from %stack.0); ../modsi3.c:22:31
  early-clobber renamable $r1 = nsw MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1220; ../modsi3.c:22:31
  renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1221; ../modsi3.c:22:14
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1222; ../modsi3.c:22:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1222; ../modsi3.c:22:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1222; ../modsi3.c:22:5

# End machine code for function __modsi3.

# Machine code for function __mulvdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-44]
  fi#7: size=4, align=4, at location [SP-48]
  fi#8: size=4, align=4, at location [SP-52]
  fi#9: size=4, align=4, at location [SP-56]
  fi#10: size=4, align=4, at location [SP-60]
  fi#11: size=4, align=4, at location [SP-64]
  fi#12: size=4, align=4, at location [SP-4]
  fi#13: size=4, align=4, at location [SP-8]
  fi#14: size=4, align=4, at location [SP-12]
  fi#15: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str.8, align=4
  cp#1: @__func__.__mulvdi3, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.5
  liveins: $r0, $r1, $r2, $r3, $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 48, 14, $noreg, $noreg
  STRi12 killed $r3, $r11, -24, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r2, $r11, -20, 14, $noreg :: (store (s32) into %stack.2)
  $r2 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r2, $r11, -16, 14, $noreg :: (store (s32) into %stack.1)
  $r2 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r2, $r11, -12, 14, $noreg :: (store (s32) into %stack.0)
  renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !1224; ../mulvdi3.c:27:11
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1224; ../mulvdi3.c:27:11
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1225; ../mulvdi3.c:27:9
  Bcc %bb.5, 1, killed $cpsr, debug-location !1225; ../mulvdi3.c:27:9
  B %bb.1, debug-location !1225; ../mulvdi3.c:27:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1226 :: (load (s32) from %stack.2); ../mulvdi3.c:29:15
  $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1226 :: (load (s32) from %stack.3); ../mulvdi3.c:29:15
  renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1226; ../mulvdi3.c:29:15
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1227; ../mulvdi3.c:29:20
  Bcc %bb.3, 0, killed $cpsr, debug-location !1227; ../mulvdi3.c:29:20
  B %bb.2, debug-location !1227; ../mulvdi3.c:29:20

bb.2.lor.lhs.false:
; predecessors: %bb.1
  successors: %bb.3, %bb.4

  $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1228 :: (load (s32) from %stack.3); ../mulvdi3.c:29:25
  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1228 :: (load (s32) from %stack.2); ../mulvdi3.c:29:25
  renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1228; ../mulvdi3.c:29:25
  renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1228; ../mulvdi3.c:29:25
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1229; ../mulvdi3.c:29:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !1229; ../mulvdi3.c:29:13
  B %bb.3, debug-location !1229; ../mulvdi3.c:29:13

bb.3.if.then3:
; predecessors: %bb.1, %bb.2
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1230; ../mulvdi3.c:30:13

bb.4.if.end:
; predecessors: %bb.2

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1231 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1231 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
  renamable $r1 = MOVi 31, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1231; ../mulvdi3.c:31:9

bb.5.if.end4:
; predecessors: %bb.0
  successors: %bb.6, %bb.10

  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1232 :: (load (s32) from %stack.2); ../mulvdi3.c:33:11
  $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1232 :: (load (s32) from %stack.3); ../mulvdi3.c:33:11
  renamable $r1 = EORri renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !1232; ../mulvdi3.c:33:11
  renamable $r0 = ORRrr renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1232; ../mulvdi3.c:33:11
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1233; ../mulvdi3.c:33:9
  Bcc %bb.10, 1, killed $cpsr, debug-location !1233; ../mulvdi3.c:33:9
  B %bb.6, debug-location !1233; ../mulvdi3.c:33:9

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.8, %bb.7

  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1234 :: (load (s32) from %stack.0); ../mulvdi3.c:35:15
  $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1234 :: (load (s32) from %stack.1); ../mulvdi3.c:35:15
  renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1234; ../mulvdi3.c:35:15
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1235; ../mulvdi3.c:35:20
  Bcc %bb.8, 0, killed $cpsr, debug-location !1235; ../mulvdi3.c:35:20
  B %bb.7, debug-location !1235; ../mulvdi3.c:35:20

bb.7.lor.lhs.false8:
; predecessors: %bb.6
  successors: %bb.8, %bb.9

  $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1236 :: (load (s32) from %stack.1); ../mulvdi3.c:35:25
  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1236 :: (load (s32) from %stack.0); ../mulvdi3.c:35:25
  renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1236; ../mulvdi3.c:35:25
  renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1236; ../mulvdi3.c:35:25
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1237; ../mulvdi3.c:35:13
  Bcc %bb.9, 1, killed $cpsr, debug-location !1237; ../mulvdi3.c:35:13
  B %bb.8, debug-location !1237; ../mulvdi3.c:35:13

bb.8.if.then10:
; predecessors: %bb.6, %bb.7
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1238; ../mulvdi3.c:36:13

bb.9.if.end12:
; predecessors: %bb.7

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1239 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1239 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
  renamable $r1 = MOVi 37, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1239; ../mulvdi3.c:37:9

bb.10.if.end13:
; predecessors: %bb.5
  successors: %bb.12, %bb.11

  $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1240 :: (load (s32) from %stack.3); ../mulvdi3.c:39:19
  $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !1240 :: (load (s32) from %stack.2); ../mulvdi3.c:39:19
  $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !1240 :: (load (s32) from %stack.1); ../mulvdi3.c:39:19
  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1240 :: (load (s32) from %stack.0); ../mulvdi3.c:39:19
  renamable $r1 = MOVsi renamable $r12, 249, 14, $noreg, $noreg, debug-location !1240; ../mulvdi3.c:39:19
  STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.11)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.10)
  renamable $r1 = EORrsi renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1241; ../mulvdi3.c:40:23
  renamable $r0 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1241; ../mulvdi3.c:40:23
  renamable $r1 = SUBrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !1242; ../mulvdi3.c:40:29
  STRi12 $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.9)
  renamable $r0 = SBCrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1242; ../mulvdi3.c:40:29
  STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.8)
  renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !1243; ../mulvdi3.c:41:19
  STRi12 $r12, $sp, 16, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r12, $sp, 20, 14, $noreg :: (store (s32) into %stack.6)
  renamable $r12 = EORrsi renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1244; ../mulvdi3.c:42:23
  renamable $r2 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1244; ../mulvdi3.c:42:23
  renamable $r12 = SUBrsi killed renamable $r12, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !1245; ../mulvdi3.c:42:29
  STRi12 killed $r12, $sp, 24, 14, $noreg :: (store (s32) into %stack.5)
  renamable $r2 = SBCrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1245; ../mulvdi3.c:42:29
  STRi12 killed $r2, $sp, 28, 14, $noreg :: (store (s32) into %stack.4)
  dead renamable $r1 = SUBri renamable $r1, 2, 14, $noreg, def $cpsr, debug-location !1246; ../mulvdi3.c:43:15
  dead renamable $r0 = SBCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1246; ../mulvdi3.c:43:15
  Bcc %bb.12, 11, killed $cpsr, debug-location !1247; ../mulvdi3.c:43:19
  B %bb.11, debug-location !1247; ../mulvdi3.c:43:19

bb.11.lor.lhs.false18:
; predecessors: %bb.10
  successors: %bb.12, %bb.13

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1248 :: (load (s32) from %stack.4); ../mulvdi3.c:43:28
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1248 :: (load (s32) from %stack.5); ../mulvdi3.c:43:28
  dead renamable $r1 = RSBri renamable $r1, 1, 14, $noreg, def $cpsr, debug-location !1248; ../mulvdi3.c:43:28
  dead renamable $r0 = RSCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1248; ../mulvdi3.c:43:28
  Bcc %bb.13, 11, killed $cpsr, debug-location !1249; ../mulvdi3.c:43:9
  B %bb.12, debug-location !1249; ../mulvdi3.c:43:9

bb.12.if.then20:
; predecessors: %bb.10, %bb.11
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1250; ../mulvdi3.c:44:9

bb.13.if.end22:
; predecessors: %bb.11
  successors: %bb.14, %bb.17

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1251 :: (load (s32) from %stack.10); ../mulvdi3.c:45:12
  $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !1251 :: (load (s32) from %stack.6); ../mulvdi3.c:45:12
  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1251 :: (load (s32) from %stack.11); ../mulvdi3.c:45:12
  $r3 = LDRi12 $sp, 16, 14, $noreg, debug-location !1251 :: (load (s32) from %stack.7); ../mulvdi3.c:45:12
  renamable $r0 = EORrr renamable $r0, renamable $r3, 14, $noreg, $noreg, debug-location !1251; ../mulvdi3.c:45:12
  renamable $r1 = EORrr renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !1251; ../mulvdi3.c:45:12
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1251; ../mulvdi3.c:45:12
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1252; ../mulvdi3.c:45:9
  Bcc %bb.17, 1, killed $cpsr, debug-location !1252; ../mulvdi3.c:45:9
  B %bb.14, debug-location !1252; ../mulvdi3.c:45:9

bb.14.if.then24:
; predecessors: %bb.13
  successors: %bb.15, %bb.16

  $r3 = LDRi12 $sp, 28, 14, $noreg, debug-location !1253 :: (load (s32) from %stack.4); ../mulvdi3.c:47:25
  $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !1253 :: (load (s32) from %stack.5); ../mulvdi3.c:47:25
  renamable $r0 = MVNi 0, 14, $noreg, $noreg
  renamable $r1 = MVNi -2147483648, 14, $noreg, $noreg
  BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1253; ../mulvdi3.c:47:25
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1253 :: (load (s32) from %stack.9); ../mulvdi3.c:47:25
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1253; ../mulvdi3.c:47:25
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1253 :: (load (s32) from %stack.8); ../mulvdi3.c:47:25
  dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1254; ../mulvdi3.c:47:19
  dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1254; ../mulvdi3.c:47:19
  Bcc %bb.16, 10, killed $cpsr, debug-location !1255; ../mulvdi3.c:47:13
  B %bb.15, debug-location !1255; ../mulvdi3.c:47:13

bb.15.if.then26:
; predecessors: %bb.14

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1256 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1256 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
  renamable $r1 = MOVi 48, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1256; ../mulvdi3.c:48:13

bb.16.if.end27:
; predecessors: %bb.14
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20, debug-location !1257; ../mulvdi3.c:49:5

bb.17.if.else:
; predecessors: %bb.13
  successors: %bb.18, %bb.19

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1258 :: (load (s32) from %stack.4); ../mulvdi3.c:52:27
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1258 :: (load (s32) from %stack.5); ../mulvdi3.c:52:27
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !1258; ../mulvdi3.c:52:27
  renamable $r3 = RSCri renamable $r0, 0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1258; ../mulvdi3.c:52:27
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  renamable $r1 = MOVi -2147483648, 14, $noreg, $noreg
  BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1259; ../mulvdi3.c:52:25
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1259 :: (load (s32) from %stack.9); ../mulvdi3.c:52:25
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1259; ../mulvdi3.c:52:25
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1259 :: (load (s32) from %stack.8); ../mulvdi3.c:52:25
  dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1260; ../mulvdi3.c:52:19
  dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1260; ../mulvdi3.c:52:19
  Bcc %bb.19, 10, killed $cpsr, debug-location !1261; ../mulvdi3.c:52:13
  B %bb.18, debug-location !1261; ../mulvdi3.c:52:13

bb.18.if.then31:
; predecessors: %bb.17

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1262 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1262 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
  renamable $r1 = MOVi 53, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1262; ../mulvdi3.c:53:13

bb.19.if.end32:
; predecessors: %bb.17
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20

bb.20.if.end33:
; predecessors: %bb.19, %bb.16
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1263; ../mulvdi3.c:55:5

bb.21.return:
; predecessors: %bb.20, %bb.12, %bb.8, %bb.3

  $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !1264 :: (load (s32) from %stack.1); ../mulvdi3.c:0
  $r3 = LDRi12 $r11, -20, 14, $noreg, debug-location !1264 :: (load (s32) from %stack.2); ../mulvdi3.c:0
  $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !1264 :: (load (s32) from %stack.0); ../mulvdi3.c:0
  $lr = LDRi12 $r11, -24, 14, $noreg, debug-location !1264 :: (load (s32) from %stack.3); ../mulvdi3.c:0
  early-clobber renamable $r0, early-clobber renamable $r4 = UMULLv5 renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !1264; ../mulvdi3.c:0
  early-clobber renamable $r12 = MLAv5 killed renamable $r1, killed renamable $lr, killed renamable $r4, 14, $noreg, $noreg, debug-location !1264; ../mulvdi3.c:0
  early-clobber renamable $r1 = MLAv5 killed renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !1264; ../mulvdi3.c:0
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg, debug-location !1265; ../mulvdi3.c:56:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr, debug-location !1265; ../mulvdi3.c:56:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1265; ../mulvdi3.c:56:1

bb.22 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __mulvdi3.

# Machine code for function __mulvsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.9, align=4
  cp#1: @__func__.__mulvsi3, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.5
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  STRi12 killed $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !1268; ../mulvsi3.c:27:9
  Bcc %bb.5, 1, killed $cpsr, debug-location !1268; ../mulvsi3.c:27:9
  B %bb.1, debug-location !1268; ../mulvsi3.c:27:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1270 :: (load (s32) from %stack.1); ../mulvsi3.c:29:20
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1270; ../mulvsi3.c:29:20
  Bcc %bb.3, 0, killed $cpsr, debug-location !1270; ../mulvsi3.c:29:20
  B %bb.2, debug-location !1270; ../mulvsi3.c:29:20

bb.2.lor.lhs.false:
; predecessors: %bb.1
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1272 :: (load (s32) from %stack.1); ../mulvsi3.c:29:13
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1272; ../mulvsi3.c:29:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !1272; ../mulvsi3.c:29:13
  B %bb.3, debug-location !1272; ../mulvsi3.c:29:13

bb.3.if.then3:
; predecessors: %bb.1, %bb.2
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1273; ../mulvsi3.c:30:13

bb.4.if.end:
; predecessors: %bb.2

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1274 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1274 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
  renamable $r1 = MOVi 31, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1274; ../mulvsi3.c:31:9

bb.5.if.end4:
; predecessors: %bb.0
  successors: %bb.6, %bb.10

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1276 :: (load (s32) from %stack.1); ../mulvsi3.c:33:9
  CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !1276; ../mulvsi3.c:33:9
  Bcc %bb.10, 1, killed $cpsr, debug-location !1276; ../mulvsi3.c:33:9
  B %bb.6, debug-location !1276; ../mulvsi3.c:33:9

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.8, %bb.7

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1278 :: (load (s32) from %stack.0); ../mulvsi3.c:35:20
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1278; ../mulvsi3.c:35:20
  Bcc %bb.8, 0, killed $cpsr, debug-location !1278; ../mulvsi3.c:35:20
  B %bb.7, debug-location !1278; ../mulvsi3.c:35:20

bb.7.lor.lhs.false8:
; predecessors: %bb.6
  successors: %bb.8, %bb.9

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1280 :: (load (s32) from %stack.0); ../mulvsi3.c:35:13
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1280; ../mulvsi3.c:35:13
  Bcc %bb.9, 1, killed $cpsr, debug-location !1280; ../mulvsi3.c:35:13
  B %bb.8, debug-location !1280; ../mulvsi3.c:35:13

bb.8.if.then10:
; predecessors: %bb.6, %bb.7
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1281; ../mulvsi3.c:36:13

bb.9.if.end12:
; predecessors: %bb.7

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1282 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1282 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
  renamable $r1 = MOVi 37, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1282; ../mulvsi3.c:37:9

bb.10.if.end13:
; predecessors: %bb.5
  successors: %bb.12, %bb.11

  $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !1283 :: (load (s32) from %stack.1); ../mulvsi3.c:39:19
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1283 :: (load (s32) from %stack.0); ../mulvsi3.c:39:19
  renamable $r0 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !1283; ../mulvsi3.c:39:19
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.5)
  renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !1284; ../mulvsi3.c:40:23
  renamable $r0 = nsw SUBrsi killed renamable $r0, renamable $r1, 249, 14, $noreg, $noreg, debug-location !1285; ../mulvsi3.c:40:29
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.4)
  renamable $r1 = MOVsi renamable $r2, 249, 14, $noreg, $noreg, debug-location !1286; ../mulvsi3.c:41:19
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.3)
  renamable $r1 = EORrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1287; ../mulvsi3.c:42:23
  renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1288; ../mulvsi3.c:42:29
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.2)
  CMPri renamable $r0, 2, 14, $noreg, implicit-def $cpsr, debug-location !1290; ../mulvsi3.c:43:19
  Bcc %bb.12, 11, killed $cpsr, debug-location !1290; ../mulvsi3.c:43:19
  B %bb.11, debug-location !1290; ../mulvsi3.c:43:19

bb.11.lor.lhs.false18:
; predecessors: %bb.10
  successors: %bb.12, %bb.13

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1292 :: (load (s32) from %stack.2); ../mulvsi3.c:43:9
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1292; ../mulvsi3.c:43:9
  Bcc %bb.13, 12, killed $cpsr, debug-location !1292; ../mulvsi3.c:43:9
  B %bb.12, debug-location !1292; ../mulvsi3.c:43:9

bb.12.if.then20:
; predecessors: %bb.10, %bb.11
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1293; ../mulvsi3.c:44:9

bb.13.if.end22:
; predecessors: %bb.11
  successors: %bb.14, %bb.17

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1295 :: (load (s32) from %stack.5); ../mulvsi3.c:45:9
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1295 :: (load (s32) from %stack.3); ../mulvsi3.c:45:9
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1295; ../mulvsi3.c:45:9
  Bcc %bb.17, 1, killed $cpsr, debug-location !1295; ../mulvsi3.c:45:9
  B %bb.14, debug-location !1295; ../mulvsi3.c:45:9

bb.14.if.then24:
; predecessors: %bb.13
  successors: %bb.15, %bb.16

  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1296 :: (load (s32) from %stack.2); ../mulvsi3.c:47:25
  renamable $r0 = MVNi -2147483648, 14, $noreg, $noreg
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1296; ../mulvsi3.c:47:25
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1296; ../mulvsi3.c:47:25
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1298 :: (load (s32) from %stack.4); ../mulvsi3.c:47:13
  CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1298; ../mulvsi3.c:47:13
  Bcc %bb.16, 13, killed $cpsr, debug-location !1298; ../mulvsi3.c:47:13
  B %bb.15, debug-location !1298; ../mulvsi3.c:47:13

bb.15.if.then26:
; predecessors: %bb.14

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1299 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1299 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
  renamable $r1 = MOVi 48, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1299; ../mulvsi3.c:48:13

bb.16.if.end27:
; predecessors: %bb.14
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20, debug-location !1300; ../mulvsi3.c:49:5

bb.17.if.else:
; predecessors: %bb.13
  successors: %bb.18, %bb.19

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1301 :: (load (s32) from %stack.2); ../mulvsi3.c:52:27
  renamable $r1 = nsw RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !1301; ../mulvsi3.c:52:27
  renamable $r0 = MOVi -2147483648, 14, $noreg, $noreg
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1302; ../mulvsi3.c:52:25
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1302; ../mulvsi3.c:52:25
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1304 :: (load (s32) from %stack.4); ../mulvsi3.c:52:13
  CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1304; ../mulvsi3.c:52:13
  Bcc %bb.19, 13, killed $cpsr, debug-location !1304; ../mulvsi3.c:52:13
  B %bb.18, debug-location !1304; ../mulvsi3.c:52:13

bb.18.if.then31:
; predecessors: %bb.17

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1305 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1305 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
  renamable $r1 = MOVi 53, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1305; ../mulvsi3.c:53:13

bb.19.if.end32:
; predecessors: %bb.17
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20

bb.20.if.end33:
; predecessors: %bb.19, %bb.16
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1306; ../mulvsi3.c:55:5

bb.21.return:
; predecessors: %bb.20, %bb.12, %bb.8, %bb.3

  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1307 :: (load (s32) from %stack.0); ../mulvsi3.c:0
  $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !1307 :: (load (s32) from %stack.1); ../mulvsi3.c:0
  early-clobber renamable $r0 = nsw MULv5 killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1307; ../mulvsi3.c:0
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1308; ../mulvsi3.c:56:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1308; ../mulvsi3.c:56:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1308; ../mulvsi3.c:56:1

bb.22 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __mulvsi3.

# Machine code for function __paritydi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !1311 :: (store (s32) into %ir.all + 4, basealign 8); ../paritydi2.c:23:11
  STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !1311 :: (store (s32) into %ir.all, align 8); ../paritydi2.c:23:11
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1314 :: (dereferenceable load (s32) from %ir.low, align 8); ../paritydi2.c:24:39
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1313 :: (dereferenceable load (s32) from %ir.high); ../paritydi2.c:24:28
  renamable $r0 = EORrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1315; ../paritydi2.c:24:33
  BL_pred @__paritysi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1316; ../paritydi2.c:24:12
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1317; ../paritydi2.c:24:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1317; ../paritydi2.c:24:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1317; ../paritydi2.c:24:5

# End machine code for function __paritydi2.

# Machine code for function __paritysi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0
  renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1320; ../paritysi2.c:23:7
  renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1322; ../paritysi2.c:24:7
  renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1324; ../paritysi2.c:25:7
  renamable $r2 = ANDri killed renamable $r0, 15, 14, $noreg, $noreg, debug-location !1325; ../paritysi2.c:26:26
  $r1 = MOVi 150, 14, $noreg, $noreg
  $r1 = ORRri $r1, 26880, 14, $noreg, $noreg
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  renamable $r0 = ANDrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !1327; ../paritysi2.c:26:34
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1328; ../paritysi2.c:26:5

# End machine code for function __paritysi2.

# Machine code for function __popcountdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1
  $r2 = MOVr killed $r0, 14, $noreg, $noreg
  dead renamable $r0 = KILL renamable $r1
  dead renamable $r0 = KILL renamable $r2
  $r0 = MOVsi renamable $r1, 11, 14, $noreg, def $cpsr, debug-location !1330; ../popcountdi2.c:23:20
  $r3 = MOVsi renamable $r2, 5, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1330; ../popcountdi2.c:23:20
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !1331; ../popcountdi2.c:23:26
  renamable $r3 = ANDrr killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !1331; ../popcountdi2.c:23:26
  renamable $r2 = SUBrr killed renamable $r2, killed renamable $r3, 14, $noreg, def $cpsr, debug-location !1332; ../popcountdi2.c:23:13
  renamable $r3 = SBCrr killed renamable $r1, killed renamable $r0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1332; ../popcountdi2.c:23:13
  renamable $r12 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r3, 19, 14, $noreg, $noreg, debug-location !1334; ../popcountdi2.c:25:21
  renamable $r0 = ANDrsi renamable $r12, renamable $r2, 19, 14, $noreg, $noreg, debug-location !1334; ../popcountdi2.c:25:21
  renamable $r3 = ANDrr killed renamable $r3, renamable $r12, 14, $noreg, $noreg, debug-location !1335; ../popcountdi2.c:25:52
  renamable $r2 = ANDrr killed renamable $r2, killed renamable $r12, 14, $noreg, $noreg, debug-location !1335; ../popcountdi2.c:25:52
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1336; ../popcountdi2.c:25:46
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1336; ../popcountdi2.c:25:46
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1338; ../popcountdi2.c:27:14
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1338; ../popcountdi2.c:27:14
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !1339; ../popcountdi2.c:27:27
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1339; ../popcountdi2.c:27:27
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1341; ../popcountdi2.c:29:28
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1344; ../popcountdi2.c:32:11
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1346; ../popcountdi2.c:35:15
  renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !1347; ../popcountdi2.c:35:27
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1348; ../popcountdi2.c:35:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4

# End machine code for function __popcountdi2.

# Machine code for function __popcountsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1351; ../popcountsi2.c:23:23
  renamable $r1 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1352; ../popcountsi2.c:23:11
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrsi renamable $r2, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1354; ../popcountsi2.c:25:19
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1355; ../popcountsi2.c:25:38
  renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1356; ../popcountsi2.c:25:33
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1358; ../popcountsi2.c:27:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1359; ../popcountsi2.c:27:24
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1361; ../popcountsi2.c:29:12
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1363; ../popcountsi2.c:32:15
  renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !1364; ../popcountsi2.c:32:27
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1365; ../popcountsi2.c:32:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4

# End machine code for function __popcountsi2.

# Machine code for function __subvdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-4]
  fi#5: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.12, align=4
  cp#1: @__func__.__subvdi3, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  $r12 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  $r12 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !1367; ../subvdi3.c:24:27
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = SBCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1367; ../subvdi3.c:24:27
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !1369; ../subvdi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !1369; ../subvdi3.c:25:9
  B %bb.1, debug-location !1369; ../subvdi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1370 :: (load (s32) from %stack.3); ../subvdi3.c:27:15
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1370 :: (load (s32) from %stack.0); ../subvdi3.c:27:15
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1370 :: (load (s32) from %stack.2); ../subvdi3.c:27:15
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1370 :: (load (s32) from %stack.1); ../subvdi3.c:27:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1370; ../subvdi3.c:27:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1370; ../subvdi3.c:27:15
  Bcc %bb.3, 10, killed $cpsr, debug-location !1371; ../subvdi3.c:27:13
  B %bb.2, debug-location !1371; ../subvdi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1372 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1372 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1372; ../subvdi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !1373; ../subvdi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1374 :: (load (s32) from %stack.3); ../subvdi3.c:32:15
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1374 :: (load (s32) from %stack.0); ../subvdi3.c:32:15
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1374 :: (load (s32) from %stack.2); ../subvdi3.c:32:15
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1374 :: (load (s32) from %stack.1); ../subvdi3.c:32:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1374; ../subvdi3.c:32:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1374; ../subvdi3.c:32:15
  Bcc %bb.6, 11, killed $cpsr, debug-location !1375; ../subvdi3.c:32:13
  B %bb.5, debug-location !1375; ../subvdi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1376 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1376 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1376; ../subvdi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1377 :: (load (s32) from %stack.0); ../subvdi3.c:35:5
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1377 :: (load (s32) from %stack.1); ../subvdi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1377; ../subvdi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1377; ../subvdi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1377; ../subvdi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __subvdi3.

# Machine code for function __subvsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.13, align=4
  cp#1: @__func__.__subvsi3, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = SUBrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1379; ../subvsi3.c:24:27
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1381; ../subvsi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !1381; ../subvsi3.c:25:9
  B %bb.1, debug-location !1381; ../subvsi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1383 :: (load (s32) from %stack.0); ../subvsi3.c:27:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1383 :: (load (s32) from %stack.1); ../subvsi3.c:27:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1383; ../subvsi3.c:27:13
  Bcc %bb.3, 13, killed $cpsr, debug-location !1383; ../subvsi3.c:27:13
  B %bb.2, debug-location !1383; ../subvsi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1384 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1384 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1384; ../subvsi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !1385; ../subvsi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1387 :: (load (s32) from %stack.0); ../subvsi3.c:32:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1387 :: (load (s32) from %stack.1); ../subvsi3.c:32:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1387; ../subvsi3.c:32:13
  Bcc %bb.6, 12, killed $cpsr, debug-location !1387; ../subvsi3.c:32:13
  B %bb.5, debug-location !1387; ../subvsi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1388 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1388 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1388; ../subvsi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1389 :: (load (s32) from %stack.0); ../subvsi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1389; ../subvsi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1389; ../subvsi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1389; ../subvsi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __subvsi3.

# Machine code for function __ucmpdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $r2, $r3
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !1392 :: (store (s32) into %ir.all + 4, basealign 8); ../ucmpdi2.c:26:11
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !1392 :: (store (s32) into %ir.all, align 8); ../ucmpdi2.c:26:11
  STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !1394 :: (store (s32) into %ir.all1 + 4, basealign 8); ../ucmpdi2.c:28:11
  STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !1394 :: (store (s32) into %ir.all1, align 8); ../ucmpdi2.c:28:11
  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1396 :: (dereferenceable load (s32) from %ir.high); ../ucmpdi2.c:29:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1398 :: (dereferenceable load (s32) from %ir.high3); ../ucmpdi2.c:29:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1400; ../ucmpdi2.c:29:9
  Bcc %bb.2, 2, killed $cpsr, debug-location !1400; ../ucmpdi2.c:29:9
  B %bb.1, debug-location !1400; ../ucmpdi2.c:29:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1401; ../ucmpdi2.c:30:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1403 :: (dereferenceable load (s32) from %ir.high5); ../ucmpdi2.c:31:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1405 :: (dereferenceable load (s32) from %ir.high7); ../ucmpdi2.c:31:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1407; ../ucmpdi2.c:31:9
  Bcc %bb.4, 9, killed $cpsr, debug-location !1407; ../ucmpdi2.c:31:9
  B %bb.3, debug-location !1407; ../ucmpdi2.c:31:9

bb.3.if.then9:
; predecessors: %bb.2
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1408; ../ucmpdi2.c:32:9

bb.4.if.end10:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1409 :: (dereferenceable load (s32) from %ir.low, align 8); ../ucmpdi2.c:33:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1410 :: (dereferenceable load (s32) from %ir.low13, align 8); ../ucmpdi2.c:33:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1412; ../ucmpdi2.c:33:9
  Bcc %bb.6, 2, killed $cpsr, debug-location !1412; ../ucmpdi2.c:33:9
  B %bb.5, debug-location !1412; ../ucmpdi2.c:33:9

bb.5.if.then15:
; predecessors: %bb.4
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1413; ../ucmpdi2.c:34:9

bb.6.if.end16:
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1414 :: (dereferenceable load (s32) from %ir.low18, align 8); ../ucmpdi2.c:35:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1415 :: (dereferenceable load (s32) from %ir.low20, align 8); ../ucmpdi2.c:35:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1417; ../ucmpdi2.c:35:9
  Bcc %bb.8, 9, killed $cpsr, debug-location !1417; ../ucmpdi2.c:35:9
  B %bb.7, debug-location !1417; ../ucmpdi2.c:35:9

bb.7.if.then22:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1418; ../ucmpdi2.c:36:9

bb.8.if.end23:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1419; ../ucmpdi2.c:37:5

bb.9.return:
; predecessors: %bb.8, %bb.7, %bb.5, %bb.3, %bb.1

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1420 :: (load (s32) from %stack.2); ../ucmpdi2.c:0
  $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !1421; ../ucmpdi2.c:38:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1421; ../ucmpdi2.c:38:1

# End machine code for function __ucmpdi2.

# Machine code for function __aeabi_ulcmp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  BL_pred @__ucmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !1423; ../ucmpdi2.c:48:9
  renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !1424; ../ucmpdi2.c:48:25
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1425; ../ucmpdi2.c:48:2
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1425; ../ucmpdi2.c:48:2

# End machine code for function __aeabi_ulcmp.

# Machine code for function __udivdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1427; ../udivdi3.c:22:12
  renamable $r12 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1427 :: (store (s32) into stack); ../udivdi3.c:22:12
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1427; ../udivdi3.c:22:12
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1428; ../udivdi3.c:22:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1428; ../udivdi3.c:22:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1428; ../udivdi3.c:22:5

# End machine code for function __udivdi3.

# Machine code for function __udivmodsi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-4]
  fi#4: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  liveins: $r0, $r1, $r2, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1430; ../udivmodsi4.c:22:14
  $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !1430 :: (load (s32) from %stack.2); ../udivmodsi4.c:22:14
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1430 :: (load (s32) from %stack.1); ../udivmodsi4.c:22:14
  $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1430 :: (load (s32) from %stack.0); ../udivmodsi4.c:22:14
  early-clobber renamable $r3 = MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !1431; ../udivmodsi4.c:23:16
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1432; ../udivmodsi4.c:23:12
  STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !1433 :: (store (s32) into %ir.rem); ../udivmodsi4.c:23:8
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1434; ../udivmodsi4.c:24:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1434; ../udivmodsi4.c:24:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1434; ../udivmodsi4.c:24:3

# End machine code for function __udivmodsi4.

# Machine code for function __udivsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
  fi#7: size=4, align=4, at location [SP-40]
  fi#8: size=4, align=4, at location [SP-44]
  fi#9: size=4, align=4, at location [SP-48]
  fi#10: size=4, align=4, at location [SP-52]
  fi#11: size=4, align=4, at location [SP-56]
  fi#12: size=4, align=4, at location [SP-60]
  fi#13: size=4, align=4, at location [SP-64]
  fi#14: size=4, align=4, at location [SP-68]
  fi#15: size=4, align=4, at location [SP-4]
  fi#16: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 64, 14, $noreg, $noreg
  STRi12 $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1437; ../udivsi3.c:32:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !1437; ../udivsi3.c:32:9
  B %bb.1, debug-location !1437; ../udivsi3.c:32:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1438; ../udivsi3.c:33:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1440 :: (load (s32) from %stack.0); ../udivsi3.c:34:9
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1440; ../udivsi3.c:34:9
  Bcc %bb.4, 1, killed $cpsr, debug-location !1440; ../udivsi3.c:34:9
  B %bb.3, debug-location !1440; ../udivsi3.c:34:9

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1441; ../udivsi3.c:35:9

bb.4.if.end3:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1442 :: (load (s32) from %stack.1); ../udivsi3.c:36:10
  BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1442; ../udivsi3.c:36:10
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1442; ../udivsi3.c:36:10
  $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
  STRi12 $r1, $r11, -20, 14, $noreg :: (store (s32) into %stack.4)
  BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1443; ../udivsi3.c:36:29
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1443; ../udivsi3.c:36:29
  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1444 :: (load (s32) from %stack.4); ../udivsi3.c:36:27
  renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1444; ../udivsi3.c:36:27
  STRi12 $r0, $r11, -16, 14, $noreg :: (store (s32) into %stack.3)
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1446; ../udivsi3.c:38:9
  Bcc %bb.6, 3, killed $cpsr, debug-location !1446; ../udivsi3.c:38:9
  B %bb.5, debug-location !1446; ../udivsi3.c:38:9

bb.5.if.then5:
; predecessors: %bb.4
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1447; ../udivsi3.c:39:9

bb.6.if.end6:
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !1449 :: (load (s32) from %stack.3); ../udivsi3.c:40:9
  CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !1449; ../udivsi3.c:40:9
  Bcc %bb.8, 1, killed $cpsr, debug-location !1449; ../udivsi3.c:40:9
  B %bb.7, debug-location !1449; ../udivsi3.c:40:9

bb.7.if.then8:
; predecessors: %bb.6
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1450; ../udivsi3.c:41:9

bb.8.if.end9:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1451 :: (load (s32) from %stack.0); ../udivsi3.c:42:5
  $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !1451 :: (load (s32) from %stack.3); ../udivsi3.c:42:5
  renamable $r1 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !1451; ../udivsi3.c:42:5
  renamable $r2 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !1452; ../udivsi3.c:45:28
  renamable $r3 = MOVsr renamable $r0, killed renamable $r2, 2, 14, $noreg, $noreg, debug-location !1453; ../udivsi3.c:45:11
  renamable $r2 = MOVsr renamable $r0, renamable $r1, 3, 14, $noreg, $noreg, debug-location !1454; ../udivsi3.c:46:11
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
  STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.9, debug-location !1455; ../udivsi3.c:48:5

bb.9.for.cond:
; predecessors: %bb.8, %bb.11
  successors: %bb.12, %bb.10

  $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !1456 :: (load (s32) from %stack.8); ../udivsi3.c:0
  $r2 = LDRi12 $sp, 32, 14, $noreg, debug-location !1456 :: (load (s32) from %stack.7); ../udivsi3.c:0
  $r0 = LDRi12 $r11, -28, 14, $noreg, debug-location !1456 :: (load (s32) from %stack.6); ../udivsi3.c:0
  $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1456 :: (load (s32) from %stack.5); ../udivsi3.c:0
  STRi12 killed $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.12)
  STRi12 $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.11)
  STRi12 killed $r2, $sp, 20, 14, $noreg :: (store (s32) into %stack.10)
  STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.9)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1455; ../udivsi3.c:48:5
  Bcc %bb.12, 0, killed $cpsr, debug-location !1455; ../udivsi3.c:48:5
  B %bb.10, debug-location !1455; ../udivsi3.c:48:5

bb.10.for.body:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1458 :: (load (s32) from %stack.1); ../udivsi3.c:51:22
  $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !1458 :: (load (s32) from %stack.9); ../udivsi3.c:51:22
  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1458 :: (load (s32) from %stack.10); ../udivsi3.c:51:22
  renamable $r0 = MOVsi renamable $r0, 10, 14, $noreg, $noreg, debug-location !1458; ../udivsi3.c:51:22
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r2, 251, 14, $noreg, $noreg, debug-location !1458; ../udivsi3.c:51:22
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.14)
  renamable $r0 = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !1459; ../udivsi3.c:60:41
  renamable $r0 = ADDrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1459; ../udivsi3.c:60:41
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.11, debug-location !1460; ../udivsi3.c:63:5

bb.11.for.inc:
; predecessors: %bb.10
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !1462 :: (load (s32) from %stack.11); ../udivsi3.c:62:11
  $r3 = LDRi12 $sp, 12, 14, $noreg, debug-location !1462 :: (load (s32) from %stack.12); ../udivsi3.c:62:11
  $r12 = LDRi12 $sp, 24, 14, $noreg, debug-location !1462 :: (load (s32) from %stack.9); ../udivsi3.c:62:11
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1462 :: (load (s32) from %stack.13); ../udivsi3.c:62:11
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1462 :: (load (s32) from %stack.14); ../udivsi3.c:62:11
  $lr = LDRi12 $r11, -8, 14, $noreg, debug-location !1462 :: (load (s32) from %stack.1); ../udivsi3.c:62:11
  renamable $lr = SUBrr renamable $r2, renamable $lr, 14, $noreg, $noreg, debug-location !1462; ../udivsi3.c:62:11
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1462; ../udivsi3.c:62:11
  $r2 = MOVr killed renamable $lr, 4, killed $cpsr, $noreg, implicit renamable $r2, debug-location !1462; ../udivsi3.c:62:11
  renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !1463; ../udivsi3.c:61:19
  renamable $r3 = ORRrsi renamable $r3, renamable $r12, 10, 14, $noreg, $noreg, debug-location !1465; ../udivsi3.c:52:22
  renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1466; ../udivsi3.c:48:20
  STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
  STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.9, debug-location !1455; ../udivsi3.c:48:5

bb.12.for.end:
; predecessors: %bb.9
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1469 :: (load (s32) from %stack.12); ../udivsi3.c:64:18
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1469 :: (load (s32) from %stack.9); ../udivsi3.c:64:18
  renamable $r0 = ORRrsi renamable $r0, renamable $r1, 10, 14, $noreg, $noreg, debug-location !1469; ../udivsi3.c:64:18
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1470; ../udivsi3.c:65:5

bb.13.return:
; predecessors: %bb.12, %bb.7, %bb.5, %bb.3, %bb.1

  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1456 :: (load (s32) from %stack.2); ../udivsi3.c:0
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1471; ../udivsi3.c:66:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1471; ../udivsi3.c:66:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1471; ../udivsi3.c:66:1

# End machine code for function __udivsi3.

# Machine code for function __umoddi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1473; ../umoddi3.c:23:5
  renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1473 :: (store (s32) into stack); ../umoddi3.c:23:5
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1473; ../umoddi3.c:23:5
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1474 :: (dereferenceable load (s32) from %ir.r, align 8); ../umoddi3.c:24:12
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1474 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../umoddi3.c:24:12
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1475; ../umoddi3.c:24:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1475; ../umoddi3.c:24:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1475; ../umoddi3.c:24:5

# End machine code for function __umoddi3.

# Machine code for function __umodsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1477; ../umodsi3.c:22:16
  $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !1477 :: (load (s32) from %stack.1); ../umodsi3.c:22:16
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1477; ../umodsi3.c:22:16
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1478 :: (load (s32) from %stack.0); ../umodsi3.c:22:32
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1478; ../umodsi3.c:22:32
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1479; ../umodsi3.c:22:14
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1480; ../umodsi3.c:22:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1480; ../umodsi3.c:22:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1480; ../umodsi3.c:22:5

# End machine code for function __umodsi3.

# Machine code for function memcpy: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 20
  STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1482; ../memory.c:8:6

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1483 :: (load (s32) from %stack.3); ../memory.c:0
  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1483 :: (load (s32) from %stack.0); ../memory.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1485; ../memory.c:8:2
  Bcc %bb.4, 0, killed $cpsr, debug-location !1485; ../memory.c:8:2
  B %bb.2, debug-location !1485; ../memory.c:8:2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1486 :: (load (s32) from %stack.1); ../memory.c:9:21
  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1486 :: (load (s32) from %stack.4); ../memory.c:9:21
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1486 :: (load (s32) from %stack.2); ../memory.c:9:21
  renamable $r0 = LDRBrs renamable $r0, renamable $r2, 0, 14, $noreg, debug-location !1486 :: (load (s8) from %ir.arrayidx); ../memory.c:9:21
  STRBrs killed renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1488 :: (store (s8) into %ir.arrayidx1); ../memory.c:9:19
  B %bb.3, debug-location !1489; ../memory.c:10:2

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1490 :: (load (s32) from %stack.4); ../memory.c:8:26
  renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1490; ../memory.c:8:26
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1485; ../memory.c:8:2

bb.4.for.end:
; predecessors: %bb.1

  renamable $r0 = IMPLICIT_DEF
  $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1492; ../memory.c:11:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1492; ../memory.c:11:1

# End machine code for function memcpy.

# Machine code for function memset: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 20
  STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1494; ../memory.c:17:6

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1495 :: (load (s32) from %stack.3); ../memory.c:0
  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1495 :: (load (s32) from %stack.0); ../memory.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1497; ../memory.c:17:2
  Bcc %bb.4, 0, killed $cpsr, debug-location !1497; ../memory.c:17:2
  B %bb.2, debug-location !1497; ../memory.c:17:2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1500 :: (load (s32) from %stack.2); ../memory.c:18:11
  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1500 :: (load (s32) from %stack.1); ../memory.c:18:11
  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1500 :: (load (s32) from %stack.4); ../memory.c:18:11
  STRBrs renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1500 :: (store (s8) into %ir.arrayidx); ../memory.c:18:11
  B %bb.3, debug-location !1501; ../memory.c:19:2

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1502 :: (load (s32) from %stack.4); ../memory.c:17:26
  renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1502; ../memory.c:17:26
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1497; ../memory.c:17:2

bb.4.for.end:
; predecessors: %bb.1

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1504 :: (load (s32) from %stack.1); ../memory.c:20:2
  $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1504; ../memory.c:20:2
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1504; ../memory.c:20:2

# End machine code for function memset.

