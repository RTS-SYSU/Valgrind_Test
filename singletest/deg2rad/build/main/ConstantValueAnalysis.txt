##########################
## Analysis Information ##
##########################
#### Function: __absvdi2
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r2 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !158; ../absvdi2.c:25:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !158; ../absvdi2.c:25:11
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !159; ../absvdi2.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 1, killed $cpsr, debug-location !159; ../absvdi2.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !159; ../absvdi2.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !160 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !160 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 26, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !160; ../absvdi2.c:26:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !161 :: (load (s32) from %stack.1); ../absvdi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !161 :: (load (s32) from %stack.0); ../absvdi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !161; ../absvdi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !161; ../absvdi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !161; ../absvdi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, debug-location !161; ../absvdi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !162; ../absvdi2.c:28:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !162; ../absvdi2.c:28:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !162; ../absvdi2.c:28:5
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __absvsi2
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !167; ../absvsi2.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 1, killed $cpsr, debug-location !167; ../absvsi2.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !167; ../absvsi2.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !168 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !168 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 26, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !168; ../absvsi2.c:26:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !169 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !169; ../absvsi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: Bcc %bb.4, 5, killed $cpsr, debug-location !169; ../absvsi2.c:28:20
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !169 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !169; ../absvsi2.c:28:20
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !169 :: (load (s32) from %stack.1); ../absvsi2.c:28:20
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !170; ../absvsi2.c:28:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !170; ../absvsi2.c:28:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !170; ../absvsi2.c:28:5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __addvdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r12 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r12 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !172; ../addvdi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ADCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !172; ../addvdi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !174; ../addvdi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 4, killed $cpsr, debug-location !174; ../addvdi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !174; ../addvdi3.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !175 :: (load (s32) from %stack.0); ../addvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !175 :: (load (s32) from %stack.3); ../addvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !175 :: (load (s32) from %stack.1); ../addvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !175 :: (load (s32) from %stack.2); ../addvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !175; ../addvdi3.c:27:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !175; ../addvdi3.c:27:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 10, killed $cpsr, debug-location !176; ../addvdi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !176; ../addvdi3.c:27:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !177 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !177 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 28, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !177; ../addvdi3.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.7, debug-location !178; ../addvdi3.c:29:5
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !179 :: (load (s32) from %stack.0); ../addvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !179 :: (load (s32) from %stack.3); ../addvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !179 :: (load (s32) from %stack.1); ../addvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !179 :: (load (s32) from %stack.2); ../addvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !179; ../addvdi3.c:32:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !179; ../addvdi3.c:32:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 11, killed $cpsr, debug-location !180; ../addvdi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !180; ../addvdi3.c:32:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !181 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !181 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !181; ../addvdi3.c:33:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: B %bb.7
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !182 :: (load (s32) from %stack.0); ../addvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !182 :: (load (s32) from %stack.1); ../addvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !182; ../addvdi3.c:35:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !182; ../addvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !182; ../addvdi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __addvsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ADDrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !184; ../addvsi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !186; ../addvsi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 4, killed $cpsr, debug-location !186; ../addvsi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !186; ../addvsi3.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !188 :: (load (s32) from %stack.0); ../addvsi3.c:27:13
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !188 :: (load (s32) from %stack.1); ../addvsi3.c:27:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !188; ../addvsi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 10, killed $cpsr, debug-location !188; ../addvsi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !188; ../addvsi3.c:27:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !189 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !189 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 28, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !189; ../addvsi3.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.7, debug-location !190; ../addvsi3.c:29:5
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !192 :: (load (s32) from %stack.0); ../addvsi3.c:32:13
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !192 :: (load (s32) from %stack.1); ../addvsi3.c:32:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !192; ../addvsi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 11, killed $cpsr, debug-location !192; ../addvsi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !192; ../addvsi3.c:32:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !193 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !193 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !193; ../addvsi3.c:33:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: B %bb.7
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !194 :: (load (s32) from %stack.0); ../addvsi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !194; ../addvsi3.c:35:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !194; ../addvsi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !194; ../addvsi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __aeabi_lcmp
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL_pred @__cmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !346; ../cmpdi2.c:48:9
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !347; ../cmpdi2.c:48:24
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !348; ../cmpdi2.c:48:2
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !348; ../cmpdi2.c:48:2
# Before:
not available
# After:
not available
#### Function: __aeabi_ulcmp
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL_pred @__ucmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !1069; ../ucmpdi2.c:48:9
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !1070; ../ucmpdi2.c:48:25
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1071; ../ucmpdi2.c:48:2
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1071; ../ucmpdi2.c:48:2
# Before:
not available
# After:
not available
#### Function: __ashldi3
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !197 :: (store (s32) into %ir.all + 4, basealign 8); ../ashldi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !197 :: (store (s32) into %ir.all, align 8); ../ashldi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !199; ../ashldi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 0, killed $cpsr, debug-location !199; ../ashldi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !199; ../ashldi3.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !201 :: (store (s32) into %ir.low, align 8); ../ashldi3.c:32:22
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !202 :: (dereferenceable load (s32) from %ir.low2, align 8); ../ashldi3.c:33:33
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !203; ../ashldi3.c:33:43
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !204; ../ashldi3.c:33:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !207 :: (store (s32) into %ir.high); ../ashldi3.c:33:23
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !208; ../ashldi3.c:34:5
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !210 :: (load (s32) from %stack.4); ../ashldi3.c:37:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !210; ../ashldi3.c:37:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !210; ../ashldi3.c:37:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !210; ../ashldi3.c:37:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !211; ../ashldi3.c:38:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !212 :: (load (s32) from %stack.4); ../ashldi3.c:39:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !212 :: (dereferenceable load (s32) from %ir.low6, align 8); ../ashldi3.c:39:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !213; ../ashldi3.c:39:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !215 :: (store (s32) into %ir.low9, align 8); ../ashldi3.c:39:23
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !219 :: (dereferenceable load (s32) from %ir.low14, align 8); ../ashldi3.c:40:56
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !217 :: (dereferenceable load (s32) from %ir.high11); ../ashldi3.c:40:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !218; ../ashldi3.c:40:39
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !220; ../ashldi3.c:40:77
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !222; ../ashldi3.c:40:45
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !225 :: (store (s32) into %ir.high17); ../ashldi3.c:40:23
# Before:
bot
# After:
not available
## Instruction: B %bb.5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !226 :: (dereferenceable load (s32) from %ir.all19, align 8); ../ashldi3.c:42:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !226 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../ashldi3.c:42:19
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !227; ../ashldi3.c:42:5
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !228 :: (load (s32) from %stack.6); ../ashldi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !228 :: (load (s32) from %stack.5); ../ashldi3.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !229; ../ashldi3.c:43:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !229; ../ashldi3.c:43:1
# Before:
not available
# After:
not available
#### Function: __ashrdi3
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !232 :: (store (s32) into %ir.all + 4, basealign 8); ../ashrdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !232 :: (store (s32) into %ir.all, align 8); ../ashrdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !234; ../ashrdi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 0, killed $cpsr, debug-location !234; ../ashrdi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !234; ../ashrdi3.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !236 :: (load (s32) from %stack.4); ../ashrdi3.c:33:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !236 :: (dereferenceable load (s32) from %ir.high); ../ashrdi3.c:33:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 249, 14, $noreg, $noreg, debug-location !237; ../ashrdi3.c:33:38
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !240 :: (store (s32) into %ir.high2); ../ashrdi3.c:33:23
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !242 :: (dereferenceable load (s32) from %ir.high4); ../ashrdi3.c:34:32
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !243; ../ashrdi3.c:34:43
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 1, 14, $noreg, $noreg, debug-location !244; ../ashrdi3.c:34:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !246 :: (store (s32) into %ir.low, align 8); ../ashrdi3.c:34:22
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !247; ../ashrdi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !249 :: (load (s32) from %stack.4); ../ashrdi3.c:38:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !249; ../ashrdi3.c:38:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !249; ../ashrdi3.c:38:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !249; ../ashrdi3.c:38:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !250; ../ashrdi3.c:39:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !252 :: (load (s32) from %stack.4); ../ashrdi3.c:40:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !252 :: (dereferenceable load (s32) from %ir.high9); ../ashrdi3.c:40:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 1, 14, $noreg, $noreg, debug-location !253; ../ashrdi3.c:40:39
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !256 :: (store (s32) into %ir.high12); ../ashrdi3.c:40:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !261 :: (dereferenceable load (s32) from %ir.low17, align 8); ../ashrdi3.c:41:72
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !258 :: (dereferenceable load (s32) from %ir.high14); ../ashrdi3.c:41:33
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !259; ../ashrdi3.c:41:55
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !260; ../ashrdi3.c:41:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !263; ../ashrdi3.c:41:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !265 :: (store (s32) into %ir.low20, align 8); ../ashrdi3.c:41:22
# Before:
bot
# After:
not available
## Instruction: B %bb.5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !266 :: (dereferenceable load (s32) from %ir.all22, align 8); ../ashrdi3.c:43:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !266 :: (dereferenceable load (s32) from %ir.all22 + 4, basealign 8); ../ashrdi3.c:43:19
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !267; ../ashrdi3.c:43:5
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !268 :: (load (s32) from %stack.6); ../ashrdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !268 :: (load (s32) from %stack.5); ../ashrdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !269; ../ashrdi3.c:44:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !269; ../ashrdi3.c:44:1
# Before:
not available
# After:
not available
#### Function: __clzdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !272 :: (store (s32) into %ir.all + 4, basealign 8); ../clzdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !272 :: (store (s32) into %ir.all, align 8); ../clzdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !278 :: (dereferenceable load (s32) from %ir.low, align 8); ../clzdi2.c:27:49
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !274 :: (dereferenceable load (s32) from %ir.high2); ../clzdi2.c:26:28
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !279; ../clzdi2.c:27:42
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr $r2, 14, $noreg, $noreg, debug-location !279; ../clzdi2.c:27:42
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !279; ../clzdi2.c:27:42
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !280; ../clzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 32, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !283; ../clzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !283; ../clzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !283; ../clzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !284; ../clzdi2.c:27:5
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !284; ../clzdi2.c:27:5
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __clzsi2
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r3 = MOVr killed $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: CMPri renamable $r3, 65536, 14, $noreg, implicit-def $cpsr
# Before:
not available
# After:
not available
## Instruction: $r2 = MOVi 1, 3, killed $cpsr, $noreg, implicit renamable $r2
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r2, 34, 14, $noreg, $noreg, debug-location !287; ../clzsi2.c:25:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nuw nsw SUBrsi killed renamable $r1, killed renamable $r2, 34, 14, $noreg, $noreg, debug-location !288; ../clzsi2.c:26:14
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !289; ../clzsi2.c:26:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 65280, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !290; ../clzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !290; ../clzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !290; ../clzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVi 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nuw nsw SUBrsi killed renamable $r3, renamable $r1, 26, 14, $noreg, $noreg, debug-location !293; ../clzsi2.c:30:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !294; ../clzsi2.c:30:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !295; ../clzsi2.c:31:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 240, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !296; ../clzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !296; ../clzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !296; ../clzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVi 4, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nuw nsw SUBrsi killed renamable $r2, renamable $r1, 18, 14, $noreg, $noreg, debug-location !299; ../clzsi2.c:34:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !300; ../clzsi2.c:34:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !301; ../clzsi2.c:35:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 12, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !302; ../clzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !302; ../clzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $lr = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !302; ../clzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = nuw nsw SUBrsi renamable $r1, renamable $lr, 10, 14, $noreg, $noreg, debug-location !305; ../clzsi2.c:38:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !306; ../clzsi2.c:38:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $lr, 10, 14, $noreg, $noreg, debug-location !307; ../clzsi2.c:39:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !308; ../clzsi2.c:52:20
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MVNi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsi killed renamable $r2, killed renamable $r3, 11, 14, $noreg, $noreg, debug-location !309; ../clzsi2.c:52:37
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !309; ../clzsi2.c:52:37
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !310; ../clzsi2.c:52:25
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !311; ../clzsi2.c:52:14
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !312; ../clzsi2.c:52:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !312; ../clzsi2.c:52:5
# Before:
not available
# After:
not available
#### Function: __cmpdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !315 :: (store (s32) into %ir.all + 4, basealign 8); ../cmpdi2.c:26:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !315 :: (store (s32) into %ir.all, align 8); ../cmpdi2.c:26:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !317 :: (store (s32) into %ir.all1 + 4, basealign 8); ../cmpdi2.c:28:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !317 :: (store (s32) into %ir.all1, align 8); ../cmpdi2.c:28:11
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !319 :: (dereferenceable load (s32) from %ir.high); ../cmpdi2.c:29:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !321 :: (dereferenceable load (s32) from %ir.high3); ../cmpdi2.c:29:24
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !323; ../cmpdi2.c:29:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 10, killed $cpsr, debug-location !323; ../cmpdi2.c:29:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !323; ../cmpdi2.c:29:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !324; ../cmpdi2.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !326 :: (dereferenceable load (s32) from %ir.high5); ../cmpdi2.c:31:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !328 :: (dereferenceable load (s32) from %ir.high7); ../cmpdi2.c:31:24
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !330; ../cmpdi2.c:31:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 13, killed $cpsr, debug-location !330; ../cmpdi2.c:31:9
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !330; ../cmpdi2.c:31:9
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r0 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !331; ../cmpdi2.c:32:9
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !332 :: (dereferenceable load (s32) from %ir.low, align 8); ../cmpdi2.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !333 :: (dereferenceable load (s32) from %ir.low13, align 8); ../cmpdi2.c:33:23
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !335; ../cmpdi2.c:33:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 2, killed $cpsr, debug-location !335; ../cmpdi2.c:33:9
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !335; ../cmpdi2.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !336; ../cmpdi2.c:34:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !337 :: (dereferenceable load (s32) from %ir.low18, align 8); ../cmpdi2.c:35:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !338 :: (dereferenceable load (s32) from %ir.low20, align 8); ../cmpdi2.c:35:23
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !340; ../cmpdi2.c:35:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 9, killed $cpsr, debug-location !340; ../cmpdi2.c:35:9
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !340; ../cmpdi2.c:35:9
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: renamable $r0 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !341; ../cmpdi2.c:36:9
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !342; ../cmpdi2.c:37:5
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !343 :: (load (s32) from %stack.2); ../cmpdi2.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !344; ../cmpdi2.c:38:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !344; ../cmpdi2.c:38:1
# Before:
not available
# After:
not available
#### Function: __ctzdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !351 :: (store (s32) into %ir.all + 4, basealign 8); ../ctzdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !351 :: (store (s32) into %ir.all, align 8); ../ctzdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !352 :: (dereferenceable load (s32) from %ir.low, align 8); ../ctzdi2.c:26:28
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !355 :: (dereferenceable load (s32) from %ir.high); ../ctzdi2.c:27:31
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !356; ../ctzdi2.c:27:41
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r2, 14, $noreg, $noreg, debug-location !356; ../ctzdi2.c:27:41
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed renamable $r0, 0, killed $cpsr, $noreg, implicit renamable $r1, debug-location !356; ../ctzdi2.c:27:41
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !357; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !357; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !357; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !357; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !357; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !357; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !357; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !357; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !357; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !357; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !357; ../ctzdi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 32, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !359; ../ctzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !359; ../ctzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !359; ../ctzdi2.c:27:59
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !360; ../ctzdi2.c:27:5
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !360; ../ctzdi2.c:27:5
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __ctzsi2
### Basic Block: 0
## Instruction: $r2 = MOVr killed $r0, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: $r0 = MOVi 255, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r0 = ORRri $r0, 65280, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr renamable $r2, killed renamable $r0, 14, $noreg, $noreg, debug-location !362; ../ctzsi2.c:25:20
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = RSBri renamable $r0, 0, 14, $noreg, def $cpsr, debug-location !362; ../ctzsi2.c:25:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADCrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !362; ../ctzsi2.c:25:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 34, 14, $noreg, $noreg, debug-location !364; ../ctzsi2.c:25:40
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !365; ../ctzsi2.c:26:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 255, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !366; ../ctzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !366; ../ctzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !366; ../ctzsi2.c:29:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r1, 26, 14, $noreg, $noreg, debug-location !368; ../ctzsi2.c:29:29
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !369; ../ctzsi2.c:30:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !370; ../ctzsi2.c:31:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 15, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !371; ../ctzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !371; ../ctzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !371; ../ctzsi2.c:33:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r1, 18, 14, $noreg, $noreg, debug-location !373; ../ctzsi2.c:33:27
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !374; ../ctzsi2.c:34:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !375; ../ctzsi2.c:35:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 3, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !376; ../ctzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !376; ../ctzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !376; ../ctzsi2.c:37:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r1, 10, 14, $noreg, $noreg, debug-location !378; ../ctzsi2.c:37:26
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !379; ../ctzsi2.c:38:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !380; ../ctzsi2.c:40:7
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, killed renamable $r2, 11, 14, $noreg, $noreg, debug-location !381; ../ctzsi2.c:56:25
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nuw nsw RSBri killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !382; ../ctzsi2.c:56:20
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MVNi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsr killed renamable $r2, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !383; ../ctzsi2.c:56:44
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !383; ../ctzsi2.c:56:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !384; ../ctzsi2.c:56:32
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !385; ../ctzsi2.c:56:14
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !386; ../ctzsi2.c:56:5
# Before:
not available
# After:
not available
#### Function: __divdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $lr = MOVr killed $r3, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r3 = MOVr killed $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !388; ../divdi3.c:23:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, $noreg, debug-location !390; ../divdi3.c:25:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !390; ../divdi3.c:25:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !391; ../divdi3.c:25:19
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !391; ../divdi3.c:25:19
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = EORrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, $noreg, debug-location !392; ../divdi3.c:26:12
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = EORrsi renamable $lr, renamable $lr, 249, 14, $noreg, $noreg, debug-location !392; ../divdi3.c:26:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = SUBrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, def $cpsr, debug-location !393; ../divdi3.c:26:19
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = SBCrsi killed renamable $r3, renamable $lr, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !393; ../divdi3.c:26:19
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = EORrsi killed renamable $r12, killed renamable $lr, 249, 14, $noreg, $noreg, debug-location !394; ../divdi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !395; ../divdi3.c:28:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !395 :: (store (s32) into stack); ../divdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !395; ../divdi3.c:28:13
# Before:
not available
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !395 :: (load (s32) from %stack.0); ../divdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !396; ../divdi3.c:28:44
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !396; ../divdi3.c:28:44
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, renamable $r2, 14, $noreg, def $cpsr, debug-location !397; ../divdi3.c:28:51
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SBCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !397; ../divdi3.c:28:51
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !398; ../divdi3.c:28:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !398; ../divdi3.c:28:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !398; ../divdi3.c:28:5
# Before:
not available
# After:
not available
#### Function: __divmoddi4
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r7, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup ADDri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: $r5 = MOVr killed $r2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r2, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r5, 14, $noreg, $noreg, debug-location !763; ../divmoddi4.c:22:14
# Before:
not available
# After:
not available
## Instruction: BL_pred @__divdi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !763; ../divmoddi4.c:22:14
# Before:
not available
# After:
not available
## Instruction: $r12 = LDRi12 $sp, 0, 14, $noreg, debug-location !763 :: (load (s32) from %stack.3); ../divmoddi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !763 :: (load (s32) from %stack.2); ../divmoddi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !763 :: (load (s32) from %stack.1); ../divmoddi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $lr = LDRi12 $sp, 12, 14, $noreg, debug-location !763 :: (load (s32) from %stack.0); ../divmoddi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r4, early-clobber renamable $r7 = UMULLv5 renamable $r0, renamable $r5, 14, $noreg, $noreg, debug-location !764; ../divmoddi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r6 = MLAv5 renamable $r0, killed renamable $lr, killed renamable $r7, 14, $noreg, $noreg, debug-location !764; ../divmoddi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $lr = MLAv5 renamable $r1, killed renamable $r5, killed renamable $r6, 14, $noreg, $noreg, debug-location !764; ../divmoddi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = SUBrr killed renamable $r12, killed renamable $r4, 14, $noreg, def $cpsr, debug-location !765; ../divmoddi4.c:23:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = SBCrr killed renamable $r2, killed renamable $lr, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !765; ../divmoddi4.c:23:12
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, renamable $r3, 0, 14, $noreg, debug-location !766 :: (store (s32) into %ir.rem, align 8); ../divmoddi4.c:23:8
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, killed renamable $r3, 4, 14, $noreg, debug-location !766 :: (store (s32) into %ir.rem + 4, basealign 8); ../divmoddi4.c:23:8
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy SUBri killed $r11, 16, 14, $noreg, $noreg, debug-location !767; ../divmoddi4.c:24:3
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r5, def $r6, def $r7, def $r11, def $lr, debug-location !767; ../divmoddi4.c:24:3
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !767; ../divmoddi4.c:24:3
# Before:
not available
# After:
not available
#### Function: __divmodsi4
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !769; ../divmodsi4.c:22:14
# Before:
not available
# After:
not available
## Instruction: $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !769 :: (load (s32) from %stack.2); ../divmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !769 :: (load (s32) from %stack.1); ../divmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !769 :: (load (s32) from %stack.0); ../divmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r3 = nsw MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !770; ../divmodsi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !771; ../divmodsi4.c:23:12
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !772 :: (store (s32) into %ir.rem); ../divmodsi4.c:23:8
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !773; ../divmodsi4.c:24:3
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !773; ../divmodsi4.c:24:3
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !773; ../divmodsi4.c:24:3
# Before:
not available
# After:
not available
#### Function: __divsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r3 = MOVr killed $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !775; ../divsi3.c:25:20
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !777; ../divsi3.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 249, 14, $noreg, $noreg, debug-location !778; ../divsi3.c:27:19
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !779; ../divsi3.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !780; ../divsi3.c:28:19
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = EORrsi killed renamable $r2, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !781; ../divsi3.c:29:9
# Before:
not available
# After:
not available
## Instruction: STRi12 $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !782; ../divsi3.c:36:22
# Before:
not available
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !782 :: (load (s32) from %stack.0); ../divsi3.c:36:22
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !783; ../divsi3.c:36:33
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !784; ../divsi3.c:36:40
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !785; ../divsi3.c:36:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !785; ../divsi3.c:36:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !785; ../divsi3.c:36:5
# Before:
not available
# After:
not available
#### Function: __ffsdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 12, 14, $noreg, debug-location !788 :: (store (s32) into %ir.all + 4, basealign 8); ../ffsdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 8, 14, $noreg, debug-location !788 :: (store (s32) into %ir.all, align 8); ../ffsdi2.c:25:11
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !789 :: (dereferenceable load (s32) from %ir.low, align 8); ../ffsdi2.c:26:13
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !791; ../ffsdi2.c:26:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !791; ../ffsdi2.c:26:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !791; ../ffsdi2.c:26:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !793 :: (dereferenceable load (s32) from %ir.high); ../ffsdi2.c:28:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !795; ../ffsdi2.c:28:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 1, killed $cpsr, debug-location !795; ../ffsdi2.c:28:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !795; ../ffsdi2.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !796; ../ffsdi2.c:29:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !798 :: (dereferenceable load (s32) from %ir.high5); ../ffsdi2.c:30:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !799; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !799; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !799; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !799; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !799; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !799; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !799; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !799; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !799; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !799; ../ffsdi2.c:30:16
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !800; ../ffsdi2.c:30:40
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !801; ../ffsdi2.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !802 :: (dereferenceable load (s32) from %ir.low8, align 8); ../ffsdi2.c:32:30
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !803; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !803; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !803; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !803; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !803; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !803; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !803; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !803; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !803; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !803; ../ffsdi2.c:32:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !804; ../ffsdi2.c:32:35
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !805; ../ffsdi2.c:32:5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !806 :: (load (s32) from %stack.1); ../ffsdi2.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 16, 14, $noreg, $noreg, debug-location !807; ../ffsdi2.c:33:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !807; ../ffsdi2.c:33:1
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __ffssi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !810; ../ffssi2.c:24:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 1, killed $cpsr, debug-location !810; ../ffssi2.c:24:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !810; ../ffssi2.c:24:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.3, debug-location !811; ../ffssi2.c:26:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !812 :: (load (s32) from %stack.0); ../ffssi2.c:28:12
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !812; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !812; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !812; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !812; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !812; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !812; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !812; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !812; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !812; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !812; ../ffssi2.c:28:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !813; ../ffssi2.c:28:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: B %bb.3, debug-location !814; ../ffssi2.c:28:5
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !815 :: (load (s32) from %stack.1); ../ffssi2.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !816; ../ffssi2.c:29:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !816; ../ffssi2.c:29:1
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __lshrdi3
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r3 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !819 :: (store (s32) into %ir.all + 4, basealign 8); ../lshrdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !819 :: (store (s32) into %ir.all, align 8); ../lshrdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !821; ../lshrdi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 0, killed $cpsr, debug-location !821; ../lshrdi3.c:30:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !821; ../lshrdi3.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !824 :: (store (s32) into %ir.high); ../lshrdi3.c:32:23
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !826 :: (dereferenceable load (s32) from %ir.high2); ../lshrdi3.c:33:32
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !827; ../lshrdi3.c:33:43
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !828; ../lshrdi3.c:33:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !830 :: (store (s32) into %ir.low, align 8); ../lshrdi3.c:33:22
# Before:
bot
# After:
not available
## Instruction: B %bb.5, debug-location !831; ../lshrdi3.c:34:5
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !833 :: (load (s32) from %stack.4); ../lshrdi3.c:37:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !833; ../lshrdi3.c:37:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !833; ../lshrdi3.c:37:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !833; ../lshrdi3.c:37:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !834; ../lshrdi3.c:38:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !836 :: (load (s32) from %stack.4); ../lshrdi3.c:39:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !836 :: (dereferenceable load (s32) from %ir.high6); ../lshrdi3.c:39:34
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !837; ../lshrdi3.c:39:39
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !840 :: (store (s32) into %ir.high9); ../lshrdi3.c:39:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !845 :: (dereferenceable load (s32) from %ir.low14, align 8); ../lshrdi3.c:40:72
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !842 :: (dereferenceable load (s32) from %ir.high11); ../lshrdi3.c:40:33
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !843; ../lshrdi3.c:40:55
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !844; ../lshrdi3.c:40:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !847; ../lshrdi3.c:40:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !849 :: (store (s32) into %ir.low17, align 8); ../lshrdi3.c:40:22
# Before:
bot
# After:
not available
## Instruction: B %bb.5
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !850 :: (dereferenceable load (s32) from %ir.all19, align 8); ../lshrdi3.c:42:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !850 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../lshrdi3.c:42:19
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.6, debug-location !851; ../lshrdi3.c:42:5
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !852 :: (load (s32) from %stack.6); ../lshrdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !852 :: (load (s32) from %stack.5); ../lshrdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !853; ../lshrdi3.c:43:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !853; ../lshrdi3.c:43:1
# Before:
not available
# After:
not available
#### Function: __moddi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r12 = MOVr killed $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !855; ../moddi3.c:24:17
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = EORrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !855; ../moddi3.c:24:17
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADCrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !855; ../moddi3.c:24:17
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = EORrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !855; ../moddi3.c:24:17
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !857; ../moddi3.c:26:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !857; ../moddi3.c:26:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !858; ../moddi3.c:26:17
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SBCrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !858; ../moddi3.c:26:17
# Before:
not available
# After:
not available
## Instruction: $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !859; ../moddi3.c:28:5
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !859 :: (store (s32) into stack); ../moddi3.c:28:5
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !859; ../moddi3.c:28:5
# Before:
not available
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !859 :: (load (s32) from %stack.1); ../moddi3.c:28:5
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !860 :: (dereferenceable load (s32) from %ir.r, align 8); ../moddi3.c:29:21
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !860 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../moddi3.c:29:21
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !861; ../moddi3.c:29:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !861; ../moddi3.c:29:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !862; ../moddi3.c:29:28
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !862; ../moddi3.c:29:28
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !863; ../moddi3.c:29:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !863; ../moddi3.c:29:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !863; ../moddi3.c:29:5
# Before:
not available
# After:
not available
#### Function: __modsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !865; ../modsi3.c:22:16
# Before:
not available
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !865 :: (load (s32) from %stack.1); ../modsi3.c:22:16
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !865; ../modsi3.c:22:16
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !866 :: (load (s32) from %stack.0); ../modsi3.c:22:31
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = nsw MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !866; ../modsi3.c:22:31
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !867; ../modsi3.c:22:14
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !868; ../modsi3.c:22:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !868; ../modsi3.c:22:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !868; ../modsi3.c:22:5
# Before:
not available
# After:
not available
#### Function: __mulvdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 48, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $r11, -24, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $r11, -20, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $r11, -16, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $r11, -12, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !870; ../mulvdi3.c:27:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !870; ../mulvdi3.c:27:11
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !871; ../mulvdi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.5, 1, killed $cpsr, debug-location !871; ../mulvdi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !871; ../mulvdi3.c:27:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !872 :: (load (s32) from %stack.2); ../mulvdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !872 :: (load (s32) from %stack.3); ../mulvdi3.c:29:15
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !872; ../mulvdi3.c:29:15
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !873; ../mulvdi3.c:29:20
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 0, killed $cpsr, debug-location !873; ../mulvdi3.c:29:20
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !873; ../mulvdi3.c:29:20
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !874 :: (load (s32) from %stack.3); ../mulvdi3.c:29:25
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !874 :: (load (s32) from %stack.2); ../mulvdi3.c:29:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !874; ../mulvdi3.c:29:25
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !874; ../mulvdi3.c:29:25
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !875; ../mulvdi3.c:29:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !875; ../mulvdi3.c:29:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !875; ../mulvdi3.c:29:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.21, debug-location !876; ../mulvdi3.c:30:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !877 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !877 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 31, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !877; ../mulvdi3.c:31:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !878 :: (load (s32) from %stack.2); ../mulvdi3.c:33:11
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !878 :: (load (s32) from %stack.3); ../mulvdi3.c:33:11
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORri renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !878; ../mulvdi3.c:33:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !878; ../mulvdi3.c:33:11
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !879; ../mulvdi3.c:33:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.10, 1, killed $cpsr, debug-location !879; ../mulvdi3.c:33:9
# Before:
not available
# After:
not available
## Instruction: B %bb.6, debug-location !879; ../mulvdi3.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !880 :: (load (s32) from %stack.0); ../mulvdi3.c:35:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !880 :: (load (s32) from %stack.1); ../mulvdi3.c:35:15
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !880; ../mulvdi3.c:35:15
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !881; ../mulvdi3.c:35:20
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 0, killed $cpsr, debug-location !881; ../mulvdi3.c:35:20
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !881; ../mulvdi3.c:35:20
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !882 :: (load (s32) from %stack.1); ../mulvdi3.c:35:25
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !882 :: (load (s32) from %stack.0); ../mulvdi3.c:35:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !882; ../mulvdi3.c:35:25
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !882; ../mulvdi3.c:35:25
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !883; ../mulvdi3.c:35:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.9, 1, killed $cpsr, debug-location !883; ../mulvdi3.c:35:13
# Before:
not available
# After:
not available
## Instruction: B %bb.8, debug-location !883; ../mulvdi3.c:35:13
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: B %bb.21, debug-location !884; ../mulvdi3.c:36:13
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !885 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !885 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 37, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !885; ../mulvdi3.c:37:9
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !886 :: (load (s32) from %stack.3); ../mulvdi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !886 :: (load (s32) from %stack.2); ../mulvdi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !886 :: (load (s32) from %stack.1); ../mulvdi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !886 :: (load (s32) from %stack.0); ../mulvdi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsi renamable $r12, 249, 14, $noreg, $noreg, debug-location !886; ../mulvdi3.c:39:19
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.11)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.10)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !887; ../mulvdi3.c:40:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !887; ../mulvdi3.c:40:23
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !888; ../mulvdi3.c:40:29
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.9)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SBCrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !888; ../mulvdi3.c:40:29
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !889; ../mulvdi3.c:41:19
# Before:
not available
# After:
not available
## Instruction: STRi12 $r12, $sp, 16, 14, $noreg :: (store (s32) into %stack.7)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 20, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: renamable $r12 = EORrsi renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, debug-location !890; ../mulvdi3.c:42:23
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !890; ../mulvdi3.c:42:23
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = SUBrsi killed renamable $r12, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !891; ../mulvdi3.c:42:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 24, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = SBCrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !891; ../mulvdi3.c:42:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 28, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: dead renamable $r1 = SUBri renamable $r1, 2, 14, $noreg, def $cpsr, debug-location !892; ../mulvdi3.c:43:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !892; ../mulvdi3.c:43:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.12, 11, killed $cpsr, debug-location !893; ../mulvdi3.c:43:19
# Before:
not available
# After:
not available
## Instruction: B %bb.11, debug-location !893; ../mulvdi3.c:43:19
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !894 :: (load (s32) from %stack.4); ../mulvdi3.c:43:28
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !894 :: (load (s32) from %stack.5); ../mulvdi3.c:43:28
# Before:
bot
# After:
not available
## Instruction: dead renamable $r1 = RSBri renamable $r1, 1, 14, $noreg, def $cpsr, debug-location !894; ../mulvdi3.c:43:28
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = RSCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !894; ../mulvdi3.c:43:28
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.13, 11, killed $cpsr, debug-location !895; ../mulvdi3.c:43:9
# Before:
not available
# After:
not available
## Instruction: B %bb.12, debug-location !895; ../mulvdi3.c:43:9
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: B %bb.21, debug-location !896; ../mulvdi3.c:44:9
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !897 :: (load (s32) from %stack.10); ../mulvdi3.c:45:12
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !897 :: (load (s32) from %stack.6); ../mulvdi3.c:45:12
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !897 :: (load (s32) from %stack.11); ../mulvdi3.c:45:12
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 16, 14, $noreg, debug-location !897 :: (load (s32) from %stack.7); ../mulvdi3.c:45:12
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrr renamable $r0, renamable $r3, 14, $noreg, $noreg, debug-location !897; ../mulvdi3.c:45:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = EORrr renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !897; ../mulvdi3.c:45:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !897; ../mulvdi3.c:45:12
# Before:
not available
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !898; ../mulvdi3.c:45:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.17, 1, killed $cpsr, debug-location !898; ../mulvdi3.c:45:9
# Before:
not available
# After:
not available
## Instruction: B %bb.14, debug-location !898; ../mulvdi3.c:45:9
# Before:
not available
# After:
not available
### Basic Block: 14
## Instruction: $r3 = LDRi12 $sp, 28, 14, $noreg, debug-location !899 :: (load (s32) from %stack.4); ../mulvdi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !899 :: (load (s32) from %stack.5); ../mulvdi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MVNi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MVNi -2147483648, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !899; ../mulvdi3.c:47:25
# Before:
not available
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !899 :: (load (s32) from %stack.9); ../mulvdi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !899; ../mulvdi3.c:47:25
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !899 :: (load (s32) from %stack.8); ../mulvdi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !900; ../mulvdi3.c:47:19
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !900; ../mulvdi3.c:47:19
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.16, 10, killed $cpsr, debug-location !901; ../mulvdi3.c:47:13
# Before:
not available
# After:
not available
## Instruction: B %bb.15, debug-location !901; ../mulvdi3.c:47:13
# Before:
not available
# After:
not available
### Basic Block: 15
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !902 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !902 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 48, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !902; ../mulvdi3.c:48:13
# Before:
not available
# After:
not available
### Basic Block: 16
## Instruction: B %bb.20, debug-location !903; ../mulvdi3.c:49:5
# Before:
not available
# After:
not available
### Basic Block: 17
## Instruction: $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !904 :: (load (s32) from %stack.4); ../mulvdi3.c:52:27
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !904 :: (load (s32) from %stack.5); ../mulvdi3.c:52:27
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !904; ../mulvdi3.c:52:27
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = RSCri renamable $r0, 0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !904; ../mulvdi3.c:52:27
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi -2147483648, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !905; ../mulvdi3.c:52:25
# Before:
not available
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !905 :: (load (s32) from %stack.9); ../mulvdi3.c:52:25
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !905; ../mulvdi3.c:52:25
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !905 :: (load (s32) from %stack.8); ../mulvdi3.c:52:25
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !906; ../mulvdi3.c:52:19
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !906; ../mulvdi3.c:52:19
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.19, 10, killed $cpsr, debug-location !907; ../mulvdi3.c:52:13
# Before:
not available
# After:
not available
## Instruction: B %bb.18, debug-location !907; ../mulvdi3.c:52:13
# Before:
not available
# After:
not available
### Basic Block: 18
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !908 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !908 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 53, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !908; ../mulvdi3.c:53:13
# Before:
not available
# After:
not available
### Basic Block: 19
## Instruction: B %bb.20
# Before:
not available
# After:
not available
### Basic Block: 20
## Instruction: B %bb.21, debug-location !909; ../mulvdi3.c:55:5
# Before:
not available
# After:
not available
### Basic Block: 21
## Instruction: $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !910 :: (load (s32) from %stack.1); ../mulvdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $r11, -20, 14, $noreg, debug-location !910 :: (load (s32) from %stack.2); ../mulvdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !910 :: (load (s32) from %stack.0); ../mulvdi3.c:0
# Before:
bot
# After:
not available
## Instruction: $lr = LDRi12 $r11, -24, 14, $noreg, debug-location !910 :: (load (s32) from %stack.3); ../mulvdi3.c:0
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0, early-clobber renamable $r4 = UMULLv5 renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !910; ../mulvdi3.c:0
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r12 = MLAv5 killed renamable $r1, killed renamable $lr, killed renamable $r4, 14, $noreg, $noreg, debug-location !910; ../mulvdi3.c:0
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MLAv5 killed renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !910; ../mulvdi3.c:0
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg, debug-location !911; ../mulvdi3.c:56:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr, debug-location !911; ../mulvdi3.c:56:1
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !911; ../mulvdi3.c:56:1
# Before:
not available
# After:
not available
### Basic Block: 22
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __mulvsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !914; ../mulvsi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.5, 1, killed $cpsr, debug-location !914; ../mulvsi3.c:27:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !914; ../mulvsi3.c:27:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !916 :: (load (s32) from %stack.1); ../mulvsi3.c:29:20
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !916; ../mulvsi3.c:29:20
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 0, killed $cpsr, debug-location !916; ../mulvsi3.c:29:20
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !916; ../mulvsi3.c:29:20
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !918 :: (load (s32) from %stack.1); ../mulvsi3.c:29:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !918; ../mulvsi3.c:29:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !918; ../mulvsi3.c:29:13
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !918; ../mulvsi3.c:29:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.21, debug-location !919; ../mulvsi3.c:30:13
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !920 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !920 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 31, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !920; ../mulvsi3.c:31:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !922 :: (load (s32) from %stack.1); ../mulvsi3.c:33:9
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !922; ../mulvsi3.c:33:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.10, 1, killed $cpsr, debug-location !922; ../mulvsi3.c:33:9
# Before:
not available
# After:
not available
## Instruction: B %bb.6, debug-location !922; ../mulvsi3.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !924 :: (load (s32) from %stack.0); ../mulvsi3.c:35:20
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !924; ../mulvsi3.c:35:20
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 0, killed $cpsr, debug-location !924; ../mulvsi3.c:35:20
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !924; ../mulvsi3.c:35:20
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !926 :: (load (s32) from %stack.0); ../mulvsi3.c:35:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !926; ../mulvsi3.c:35:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.9, 1, killed $cpsr, debug-location !926; ../mulvsi3.c:35:13
# Before:
not available
# After:
not available
## Instruction: B %bb.8, debug-location !926; ../mulvsi3.c:35:13
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: B %bb.21, debug-location !927; ../mulvsi3.c:36:13
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !928 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !928 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 37, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !928; ../mulvsi3.c:37:9
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !929 :: (load (s32) from %stack.1); ../mulvsi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !929 :: (load (s32) from %stack.0); ../mulvsi3.c:39:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !929; ../mulvsi3.c:39:19
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !930; ../mulvsi3.c:40:23
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrsi killed renamable $r0, renamable $r1, 249, 14, $noreg, $noreg, debug-location !931; ../mulvsi3.c:40:29
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsi renamable $r2, 249, 14, $noreg, $noreg, debug-location !932; ../mulvsi3.c:41:19
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = EORrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, debug-location !933; ../mulvsi3.c:42:23
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !934; ../mulvsi3.c:42:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 2, 14, $noreg, implicit-def $cpsr, debug-location !936; ../mulvsi3.c:43:19
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.12, 11, killed $cpsr, debug-location !936; ../mulvsi3.c:43:19
# Before:
not available
# After:
not available
## Instruction: B %bb.11, debug-location !936; ../mulvsi3.c:43:19
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !938 :: (load (s32) from %stack.2); ../mulvsi3.c:43:9
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !938; ../mulvsi3.c:43:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.13, 12, killed $cpsr, debug-location !938; ../mulvsi3.c:43:9
# Before:
not available
# After:
not available
## Instruction: B %bb.12, debug-location !938; ../mulvsi3.c:43:9
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: B %bb.21, debug-location !939; ../mulvsi3.c:44:9
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !941 :: (load (s32) from %stack.5); ../mulvsi3.c:45:9
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !941 :: (load (s32) from %stack.3); ../mulvsi3.c:45:9
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !941; ../mulvsi3.c:45:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.17, 1, killed $cpsr, debug-location !941; ../mulvsi3.c:45:9
# Before:
not available
# After:
not available
## Instruction: B %bb.14, debug-location !941; ../mulvsi3.c:45:9
# Before:
not available
# After:
not available
### Basic Block: 14
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !942 :: (load (s32) from %stack.2); ../mulvsi3.c:47:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MVNi -2147483648, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !942; ../mulvsi3.c:47:25
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !942; ../mulvsi3.c:47:25
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !944 :: (load (s32) from %stack.4); ../mulvsi3.c:47:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !944; ../mulvsi3.c:47:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.16, 13, killed $cpsr, debug-location !944; ../mulvsi3.c:47:13
# Before:
not available
# After:
not available
## Instruction: B %bb.15, debug-location !944; ../mulvsi3.c:47:13
# Before:
not available
# After:
not available
### Basic Block: 15
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !945 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !945 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 48, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !945; ../mulvsi3.c:48:13
# Before:
not available
# After:
not available
### Basic Block: 16
## Instruction: B %bb.20, debug-location !946; ../mulvsi3.c:49:5
# Before:
not available
# After:
not available
### Basic Block: 17
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !947 :: (load (s32) from %stack.2); ../mulvsi3.c:52:27
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !947; ../mulvsi3.c:52:27
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi -2147483648, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !948; ../mulvsi3.c:52:25
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !948; ../mulvsi3.c:52:25
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !950 :: (load (s32) from %stack.4); ../mulvsi3.c:52:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !950; ../mulvsi3.c:52:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.19, 13, killed $cpsr, debug-location !950; ../mulvsi3.c:52:13
# Before:
not available
# After:
not available
## Instruction: B %bb.18, debug-location !950; ../mulvsi3.c:52:13
# Before:
not available
# After:
not available
### Basic Block: 18
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !951 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !951 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 53, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !951; ../mulvsi3.c:53:13
# Before:
not available
# After:
not available
### Basic Block: 19
## Instruction: B %bb.20
# Before:
not available
# After:
not available
### Basic Block: 20
## Instruction: B %bb.21, debug-location !952; ../mulvsi3.c:55:5
# Before:
not available
# After:
not available
### Basic Block: 21
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !953 :: (load (s32) from %stack.0); ../mulvsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !953 :: (load (s32) from %stack.1); ../mulvsi3.c:0
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0 = nsw MULv5 killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !953; ../mulvsi3.c:0
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !954; ../mulvsi3.c:56:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !954; ../mulvsi3.c:56:1
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !954; ../mulvsi3.c:56:1
# Before:
not available
# After:
not available
### Basic Block: 22
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __paritydi2
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !957 :: (store (s32) into %ir.all + 4, basealign 8); ../paritydi2.c:23:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !957 :: (store (s32) into %ir.all, align 8); ../paritydi2.c:23:11
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !960 :: (dereferenceable load (s32) from %ir.low, align 8); ../paritydi2.c:24:39
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !959 :: (dereferenceable load (s32) from %ir.high); ../paritydi2.c:24:28
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !961; ../paritydi2.c:24:33
# Before:
not available
# After:
not available
## Instruction: BL_pred @__paritysi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !962; ../paritydi2.c:24:12
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !963; ../paritydi2.c:24:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !963; ../paritydi2.c:24:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !963; ../paritydi2.c:24:5
# Before:
not available
# After:
not available
#### Function: __paritysi2
### Basic Block: 0
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !966; ../paritysi2.c:23:7
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !968; ../paritysi2.c:24:7
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !970; ../paritysi2.c:25:7
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDri killed renamable $r0, 15, 14, $noreg, $noreg, debug-location !971; ../paritysi2.c:26:26
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVi 150, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = ORRri $r1, 26880, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !973; ../paritysi2.c:26:34
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !974; ../paritysi2.c:26:5
# Before:
not available
# After:
not available
#### Function: __popcountdi2
### Basic Block: 0
## Instruction: $r2 = MOVr killed $r0, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: $r0 = MOVsi renamable $r1, 11, 14, $noreg, def $cpsr, debug-location !976; ../popcountdi2.c:23:20
# Before:
not available
# After:
not available
## Instruction: $r3 = MOVsi renamable $r2, 5, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !976; ../popcountdi2.c:23:20
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !977; ../popcountdi2.c:23:26
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = ANDrr killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !977; ../popcountdi2.c:23:26
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = SUBrr killed renamable $r2, killed renamable $r3, 14, $noreg, def $cpsr, debug-location !978; ../popcountdi2.c:23:13
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = SBCrr killed renamable $r1, killed renamable $r0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !978; ../popcountdi2.c:23:13
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r12, renamable $r3, 19, 14, $noreg, $noreg, debug-location !980; ../popcountdi2.c:25:21
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrsi renamable $r12, renamable $r2, 19, 14, $noreg, $noreg, debug-location !980; ../popcountdi2.c:25:21
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = ANDrr killed renamable $r3, renamable $r12, 14, $noreg, $noreg, debug-location !981; ../popcountdi2.c:25:52
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r2, killed renamable $r12, 14, $noreg, $noreg, debug-location !981; ../popcountdi2.c:25:52
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !982; ../popcountdi2.c:25:46
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !982; ../popcountdi2.c:25:46
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !984; ../popcountdi2.c:27:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !984; ../popcountdi2.c:27:14
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !985; ../popcountdi2.c:27:27
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !985; ../popcountdi2.c:27:27
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !987; ../popcountdi2.c:29:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !990; ../popcountdi2.c:32:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !992; ../popcountdi2.c:35:15
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !993; ../popcountdi2.c:35:27
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !994; ../popcountdi2.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
#### Function: __popcountsi2
### Basic Block: 0
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !997; ../popcountsi2.c:23:23
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !998; ../popcountsi2.c:23:11
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrsi renamable $r2, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1000; ../popcountsi2.c:25:19
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1001; ../popcountsi2.c:25:38
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1002; ../popcountsi2.c:25:33
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1004; ../popcountsi2.c:27:12
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1005; ../popcountsi2.c:27:24
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1007; ../popcountsi2.c:29:12
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1009; ../popcountsi2.c:32:15
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !1010; ../popcountsi2.c:32:27
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1011; ../popcountsi2.c:32:5
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
#### Function: __subvdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r12 = MOVr $r1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: $r12 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !1013; ../subvdi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SBCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1013; ../subvdi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !1015; ../subvdi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 4, killed $cpsr, debug-location !1015; ../subvdi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1015; ../subvdi3.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1016 :: (load (s32) from %stack.3); ../subvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1016 :: (load (s32) from %stack.0); ../subvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1016 :: (load (s32) from %stack.2); ../subvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1016 :: (load (s32) from %stack.1); ../subvdi3.c:27:15
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1016; ../subvdi3.c:27:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1016; ../subvdi3.c:27:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 10, killed $cpsr, debug-location !1017; ../subvdi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1017; ../subvdi3.c:27:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1018 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1018 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 28, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1018; ../subvdi3.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.7, debug-location !1019; ../subvdi3.c:29:5
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1020 :: (load (s32) from %stack.3); ../subvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1020 :: (load (s32) from %stack.0); ../subvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1020 :: (load (s32) from %stack.2); ../subvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1020 :: (load (s32) from %stack.1); ../subvdi3.c:32:15
# Before:
bot
# After:
not available
## Instruction: dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1020; ../subvdi3.c:32:15
# Before:
not available
# After:
not available
## Instruction: dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1020; ../subvdi3.c:32:15
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 11, killed $cpsr, debug-location !1021; ../subvdi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !1021; ../subvdi3.c:32:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1022 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1022 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1022; ../subvdi3.c:33:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: B %bb.7
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1023 :: (load (s32) from %stack.0); ../subvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1023 :: (load (s32) from %stack.1); ../subvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1023; ../subvdi3.c:35:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1023; ../subvdi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1023; ../subvdi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __subvsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1025; ../subvsi3.c:24:27
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1027; ../subvsi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 4, killed $cpsr, debug-location !1027; ../subvsi3.c:25:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1027; ../subvsi3.c:25:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1029 :: (load (s32) from %stack.0); ../subvsi3.c:27:13
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1029 :: (load (s32) from %stack.1); ../subvsi3.c:27:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1029; ../subvsi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.3, 13, killed $cpsr, debug-location !1029; ../subvsi3.c:27:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1029; ../subvsi3.c:27:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1030 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1030 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 28, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1030; ../subvsi3.c:28:13
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: B %bb.7, debug-location !1031; ../subvsi3.c:29:5
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1033 :: (load (s32) from %stack.0); ../subvsi3.c:32:13
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1033 :: (load (s32) from %stack.1); ../subvsi3.c:32:13
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1033; ../subvsi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 12, killed $cpsr, debug-location !1033; ../subvsi3.c:32:13
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !1033; ../subvsi3.c:32:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1034 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1034 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 33, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1034; ../subvsi3.c:33:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: B %bb.7
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1035 :: (load (s32) from %stack.0); ../subvsi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1035; ../subvsi3.c:35:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1035; ../subvsi3.c:35:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1035; ../subvsi3.c:35:5
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: __ucmpdi2
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !1038 :: (store (s32) into %ir.all + 4, basealign 8); ../ucmpdi2.c:26:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !1038 :: (store (s32) into %ir.all, align 8); ../ucmpdi2.c:26:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !1040 :: (store (s32) into %ir.all1 + 4, basealign 8); ../ucmpdi2.c:28:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !1040 :: (store (s32) into %ir.all1, align 8); ../ucmpdi2.c:28:11
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1042 :: (dereferenceable load (s32) from %ir.high); ../ucmpdi2.c:29:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1044 :: (dereferenceable load (s32) from %ir.high3); ../ucmpdi2.c:29:24
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1046; ../ucmpdi2.c:29:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 2, killed $cpsr, debug-location !1046; ../ucmpdi2.c:29:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1046; ../ucmpdi2.c:29:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1047; ../ucmpdi2.c:30:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1049 :: (dereferenceable load (s32) from %ir.high5); ../ucmpdi2.c:31:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1051 :: (dereferenceable load (s32) from %ir.high7); ../ucmpdi2.c:31:24
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1053; ../ucmpdi2.c:31:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 9, killed $cpsr, debug-location !1053; ../ucmpdi2.c:31:9
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !1053; ../ucmpdi2.c:31:9
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r0 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1054; ../ucmpdi2.c:32:9
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1055 :: (dereferenceable load (s32) from %ir.low, align 8); ../ucmpdi2.c:33:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1056 :: (dereferenceable load (s32) from %ir.low13, align 8); ../ucmpdi2.c:33:23
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1058; ../ucmpdi2.c:33:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 2, killed $cpsr, debug-location !1058; ../ucmpdi2.c:33:9
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !1058; ../ucmpdi2.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1059; ../ucmpdi2.c:34:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1060 :: (dereferenceable load (s32) from %ir.low18, align 8); ../ucmpdi2.c:35:13
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1061 :: (dereferenceable load (s32) from %ir.low20, align 8); ../ucmpdi2.c:35:23
# Before:
bot
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1063; ../ucmpdi2.c:35:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 9, killed $cpsr, debug-location !1063; ../ucmpdi2.c:35:9
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !1063; ../ucmpdi2.c:35:9
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: renamable $r0 = MOVi 2, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1064; ../ucmpdi2.c:36:9
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: renamable $r0 = MOVi 1, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1065; ../ucmpdi2.c:37:5
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1066 :: (load (s32) from %stack.2); ../ucmpdi2.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !1067; ../ucmpdi2.c:38:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1067; ../ucmpdi2.c:38:1
# Before:
not available
# After:
not available
#### Function: __udivdi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1073; ../udivdi3.c:22:12
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1073 :: (store (s32) into stack); ../udivdi3.c:22:12
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1073; ../udivdi3.c:22:12
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1074; ../udivdi3.c:22:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1074; ../udivdi3.c:22:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1074; ../udivdi3.c:22:5
# Before:
not available
# After:
not available
#### Function: __udivmoddi4
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 88, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r12, $r11, -36, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -4, 14, $noreg, debug-location !401 :: (store (s32) into %ir.all + 4, basealign 8); ../udivmoddi4.c:29:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -8, 14, $noreg, debug-location !401 :: (store (s32) into %ir.all, align 8); ../udivmoddi4.c:29:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r3, $r11, -12, 14, $noreg, debug-location !403 :: (store (s32) into %ir.all1 + 4, basealign 8); ../udivmoddi4.c:31:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, $r11, -16, 14, $noreg, debug-location !403 :: (store (s32) into %ir.all1, align 8); ../udivmoddi4.c:31:11
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !405 :: (dereferenceable load (s32) from %ir.high); ../udivmoddi4.c:36:13
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !407; ../udivmoddi4.c:36:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 1, killed $cpsr, debug-location !407; ../udivmoddi4.c:36:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !407; ../udivmoddi4.c:36:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !409 :: (dereferenceable load (s32) from %ir.high3); ../udivmoddi4.c:38:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !411; ../udivmoddi4.c:38:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.5, 1, killed $cpsr, debug-location !411; ../udivmoddi4.c:38:13
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !411; ../udivmoddi4.c:38:13
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !412 :: (load (s32) from %stack.4); ../udivmoddi4.c:44:17
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !412; ../udivmoddi4.c:44:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 0, killed $cpsr, debug-location !412; ../udivmoddi4.c:44:17
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !412; ../udivmoddi4.c:44:17
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !413 :: (dereferenceable load (s32) from %ir.low, align 8); ../udivmoddi4.c:45:28
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !414 :: (dereferenceable load (s32) from %ir.low9, align 8); ../udivmoddi4.c:45:38
# Before:
bot
# After:
not available
## Instruction: BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !415; ../udivmoddi4.c:45:32
# Before:
not available
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !415 :: (load (s32) from %stack.4); ../udivmoddi4.c:45:32
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !417 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:45:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !417 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:45:22
# Before:
bot
# After:
not available
## Instruction: B %bb.4, debug-location !418; ../udivmoddi4.c:45:17
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !419 :: (dereferenceable load (s32) from %ir.low12, align 8); ../udivmoddi4.c:46:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !420 :: (dereferenceable load (s32) from %ir.low14, align 8); ../udivmoddi4.c:46:34
# Before:
bot
# After:
not available
## Instruction: BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !421; ../udivmoddi4.c:46:28
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !421; ../udivmoddi4.c:46:28
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !423; ../udivmoddi4.c:46:13
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !424 :: (load (s32) from %stack.4); ../udivmoddi4.c:52:13
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !424; ../udivmoddi4.c:52:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.7, 0, killed $cpsr, debug-location !424; ../udivmoddi4.c:52:13
# Before:
not available
# After:
not available
## Instruction: B %bb.6, debug-location !424; ../udivmoddi4.c:52:13
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !425 :: (load (s32) from %stack.4); ../udivmoddi4.c:53:24
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !425 :: (dereferenceable load (s32) from %ir.low20, align 8); ../udivmoddi4.c:53:24
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !427 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:53:18
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !427 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:53:18
# Before:
bot
# After:
not available
## Instruction: B %bb.7, debug-location !428; ../udivmoddi4.c:53:13
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !429; ../udivmoddi4.c:54:9
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !430 :: (dereferenceable load (s32) from %ir.low25, align 8); ../udivmoddi4.c:57:13
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !432; ../udivmoddi4.c:57:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.26, 1, killed $cpsr, debug-location !432; ../udivmoddi4.c:57:9
# Before:
not available
# After:
not available
## Instruction: B %bb.9, debug-location !432; ../udivmoddi4.c:57:9
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !434 :: (dereferenceable load (s32) from %ir.high30); ../udivmoddi4.c:59:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !436; ../udivmoddi4.c:59:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.13, 1, killed $cpsr, debug-location !436; ../udivmoddi4.c:59:13
# Before:
not available
# After:
not available
## Instruction: B %bb.10, debug-location !436; ../udivmoddi4.c:59:13
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !437 :: (load (s32) from %stack.4); ../udivmoddi4.c:65:17
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !437; ../udivmoddi4.c:65:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.12, 0, killed $cpsr, debug-location !437; ../udivmoddi4.c:65:17
# Before:
not available
# After:
not available
## Instruction: B %bb.11, debug-location !437; ../udivmoddi4.c:65:17
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !439 :: (dereferenceable load (s32) from %ir.high37); ../udivmoddi4.c:66:28
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !440 :: (dereferenceable load (s32) from %ir.low39, align 8); ../udivmoddi4.c:66:39
# Before:
bot
# After:
not available
## Instruction: BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !441; ../udivmoddi4.c:66:33
# Before:
not available
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !441 :: (load (s32) from %stack.4); ../udivmoddi4.c:66:33
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !443 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:66:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !443 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:66:22
# Before:
bot
# After:
not available
## Instruction: B %bb.12, debug-location !444; ../udivmoddi4.c:66:17
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !446 :: (dereferenceable load (s32) from %ir.high44); ../udivmoddi4.c:67:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !447 :: (dereferenceable load (s32) from %ir.low46, align 8); ../udivmoddi4.c:67:35
# Before:
bot
# After:
not available
## Instruction: BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !448; ../udivmoddi4.c:67:29
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !448; ../udivmoddi4.c:67:29
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !450; ../udivmoddi4.c:67:13
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !451 :: (dereferenceable load (s32) from %ir.low51, align 8); ../udivmoddi4.c:70:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !453; ../udivmoddi4.c:70:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.17, 1, killed $cpsr, debug-location !453; ../udivmoddi4.c:70:13
# Before:
not available
# After:
not available
## Instruction: B %bb.14, debug-location !453; ../udivmoddi4.c:70:13
# Before:
not available
# After:
not available
### Basic Block: 14
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !454 :: (load (s32) from %stack.4); ../udivmoddi4.c:76:17
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !454; ../udivmoddi4.c:76:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.16, 0, killed $cpsr, debug-location !454; ../udivmoddi4.c:76:17
# Before:
not available
# After:
not available
## Instruction: B %bb.15, debug-location !454; ../udivmoddi4.c:76:17
# Before:
not available
# After:
not available
### Basic Block: 15
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !456 :: (dereferenceable load (s32) from %ir.high58); ../udivmoddi4.c:78:32
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !458 :: (dereferenceable load (s32) from %ir.high60); ../udivmoddi4.c:78:43
# Before:
bot
# After:
not available
## Instruction: BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !459; ../udivmoddi4.c:78:37
# Before:
not available
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !459 :: (load (s32) from %stack.4); ../udivmoddi4.c:78:37
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !462 :: (store (s32) into %ir.high63); ../udivmoddi4.c:78:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !464 :: (store (s32) into %ir.low65, align 8); ../udivmoddi4.c:79:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !465 :: (dereferenceable load (s32) from %ir.all66, align 8); ../udivmoddi4.c:80:26
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !465 :: (dereferenceable load (s32) from %ir.all66 + 4, basealign 8); ../udivmoddi4.c:80:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !466 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:80:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !466 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:80:22
# Before:
bot
# After:
not available
## Instruction: B %bb.16, debug-location !467; ../udivmoddi4.c:81:13
# Before:
not available
# After:
not available
### Basic Block: 16
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !469 :: (dereferenceable load (s32) from %ir.high69); ../udivmoddi4.c:82:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !471 :: (dereferenceable load (s32) from %ir.high71); ../udivmoddi4.c:82:35
# Before:
bot
# After:
not available
## Instruction: BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !472; ../udivmoddi4.c:82:29
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !472; ../udivmoddi4.c:82:29
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !474; ../udivmoddi4.c:82:13
# Before:
not available
# After:
not available
### Basic Block: 17
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !476 :: (dereferenceable load (s32) from %ir.high78); ../udivmoddi4.c:88:18
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !479; ../udivmoddi4.c:88:35
# Before:
not available
# After:
not available
## Instruction: TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !482; ../udivmoddi4.c:88:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.21, 1, killed $cpsr, debug-location !482; ../udivmoddi4.c:88:13
# Before:
not available
# After:
not available
## Instruction: B %bb.18, debug-location !482; ../udivmoddi4.c:88:13
# Before:
not available
# After:
not available
### Basic Block: 18
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !483 :: (load (s32) from %stack.4); ../udivmoddi4.c:90:17
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !483; ../udivmoddi4.c:90:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.20, 0, killed $cpsr, debug-location !483; ../udivmoddi4.c:90:17
# Before:
not available
# After:
not available
## Instruction: B %bb.19, debug-location !483; ../udivmoddi4.c:90:17
# Before:
not available
# After:
not available
### Basic Block: 19
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !484 :: (load (s32) from %stack.4); ../udivmoddi4.c:92:31
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !484 :: (dereferenceable load (s32) from %ir.low85, align 8); ../udivmoddi4.c:92:31
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !486 :: (store (s32) into %ir.low87, align 8); ../udivmoddi4.c:92:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !488 :: (dereferenceable load (s32) from %ir.high89); ../udivmoddi4.c:93:32
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !490 :: (dereferenceable load (s32) from %ir.high91); ../udivmoddi4.c:93:44
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !491; ../udivmoddi4.c:93:49
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !492; ../udivmoddi4.c:93:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !495 :: (store (s32) into %ir.high95); ../udivmoddi4.c:93:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !496 :: (dereferenceable load (s32) from %ir.all96, align 8); ../udivmoddi4.c:94:26
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !496 :: (dereferenceable load (s32) from %ir.all96 + 4, basealign 8); ../udivmoddi4.c:94:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !497 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:94:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !497 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:94:22
# Before:
bot
# After:
not available
## Instruction: B %bb.20, debug-location !498; ../udivmoddi4.c:95:13
# Before:
not available
# After:
not available
### Basic Block: 20
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !500 :: (dereferenceable load (s32) from %ir.high99); ../udivmoddi4.c:96:24
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !502 :: (dereferenceable load (s32) from %ir.high101); ../udivmoddi4.c:96:50
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r2, 1, 14, $noreg, $noreg, debug-location !503; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = BICrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !503; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = ANDrsi killed renamable $r2, renamable $r1, 11, 14, $noreg, $noreg, debug-location !503; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !503; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = ANDrsi renamable $r3, renamable $r1, 19, 14, $noreg, $noreg, debug-location !503; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !503; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !503; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !503; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !503; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !503; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVsi killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !503; ../udivmoddi4.c:96:32
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !504; ../udivmoddi4.c:96:29
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !506; ../udivmoddi4.c:96:13
# Before:
not available
# After:
not available
### Basic Block: 21
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !508 :: (dereferenceable load (s32) from %ir.high105); ../udivmoddi4.c:102:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !509; ../udivmoddi4.c:102:14
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !511 :: (dereferenceable load (s32) from %ir.high107); ../udivmoddi4.c:102:58
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !512; ../udivmoddi4.c:102:40
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !513; ../udivmoddi4.c:102:38
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.7)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !515; ../udivmoddi4.c:104:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.25, 3, killed $cpsr, debug-location !515; ../udivmoddi4.c:104:13
# Before:
not available
# After:
not available
## Instruction: B %bb.22, debug-location !515; ../udivmoddi4.c:104:13
# Before:
not available
# After:
not available
### Basic Block: 22
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !516 :: (load (s32) from %stack.4); ../udivmoddi4.c:106:16
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !516; ../udivmoddi4.c:106:16
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.24, 0, killed $cpsr, debug-location !516; ../udivmoddi4.c:106:16
# Before:
not available
# After:
not available
## Instruction: B %bb.23, debug-location !516; ../udivmoddi4.c:106:16
# Before:
not available
# After:
not available
### Basic Block: 23
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !517 :: (load (s32) from %stack.4); ../udivmoddi4.c:107:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !517 :: (dereferenceable load (s32) from %ir.all114, align 8); ../udivmoddi4.c:107:26
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !517 :: (dereferenceable load (s32) from %ir.all114 + 4, basealign 8); ../udivmoddi4.c:107:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !518 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:107:22
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !518 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:107:22
# Before:
bot
# After:
not available
## Instruction: B %bb.24, debug-location !519; ../udivmoddi4.c:107:17
# Before:
not available
# After:
not available
### Basic Block: 24
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !520; ../udivmoddi4.c:108:13
# Before:
not available
# After:
not available
### Basic Block: 25
## Instruction: $r2 = LDRi12 $sp, 40, 14, $noreg, debug-location !521 :: (load (s32) from %stack.7); ../udivmoddi4.c:110:9
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !521; ../udivmoddi4.c:110:9
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !523 :: (store (s32) into %ir.low118, align 8); ../udivmoddi4.c:113:17
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !524 :: (dereferenceable load (s32) from %ir.low120, align 8); ../udivmoddi4.c:114:24
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !525; ../udivmoddi4.c:114:45
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MOVsr killed renamable $r1, renamable $r3, 2, 14, $noreg, $noreg, debug-location !526; ../udivmoddi4.c:114:28
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !529 :: (store (s32) into %ir.high123); ../udivmoddi4.c:114:18
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !531 :: (dereferenceable load (s32) from %ir.high125); ../udivmoddi4.c:116:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsr killed renamable $r1, renamable $r0, 3, 14, $noreg, $noreg, debug-location !532; ../udivmoddi4.c:116:29
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !535 :: (store (s32) into %ir.high128); ../udivmoddi4.c:116:18
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !540 :: (dereferenceable load (s32) from %ir.low134, align 8); ../udivmoddi4.c:117:60
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !537 :: (dereferenceable load (s32) from %ir.high130); ../udivmoddi4.c:117:24
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsr killed renamable $r1, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !539; ../udivmoddi4.c:117:29
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !542; ../udivmoddi4.c:117:53
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !544 :: (store (s32) into %ir.low137, align 8); ../udivmoddi4.c:117:17
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: B %bb.49, debug-location !545; ../udivmoddi4.c:118:5
# Before:
not available
# After:
not available
### Basic Block: 26
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !547 :: (dereferenceable load (s32) from %ir.high139); ../udivmoddi4.c:121:17
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !549; ../udivmoddi4.c:121:13
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.40, 1, killed $cpsr, debug-location !549; ../udivmoddi4.c:121:13
# Before:
not available
# After:
not available
## Instruction: B %bb.27, debug-location !549; ../udivmoddi4.c:121:13
# Before:
not available
# After:
not available
### Basic Block: 27
## Instruction: renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !550 :: (dereferenceable load (s32) from %ir.low144, align 8); ../udivmoddi4.c:127:22
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !552; ../udivmoddi4.c:127:17
# Before:
not available
# After:
not available
## Instruction: TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !552; ../udivmoddi4.c:127:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.33, 1, killed $cpsr, debug-location !552; ../udivmoddi4.c:127:17
# Before:
not available
# After:
not available
## Instruction: B %bb.28, debug-location !552; ../udivmoddi4.c:127:17
# Before:
not available
# After:
not available
### Basic Block: 28
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !553 :: (load (s32) from %stack.4); ../udivmoddi4.c:129:21
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !553; ../udivmoddi4.c:129:21
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.30, 0, killed $cpsr, debug-location !553; ../udivmoddi4.c:129:21
# Before:
not available
# After:
not available
## Instruction: B %bb.29, debug-location !553; ../udivmoddi4.c:129:21
# Before:
not available
# After:
not available
### Basic Block: 29
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !554 :: (load (s32) from %stack.4); ../udivmoddi4.c:130:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !554 :: (dereferenceable load (s32) from %ir.low155, align 8); ../udivmoddi4.c:130:32
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !555 :: (dereferenceable load (s32) from %ir.low157, align 8); ../udivmoddi4.c:130:43
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !556; ../udivmoddi4.c:130:47
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !557; ../udivmoddi4.c:130:36
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !559 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:130:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !559 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:130:26
# Before:
bot
# After:
not available
## Instruction: B %bb.30, debug-location !560; ../udivmoddi4.c:130:21
# Before:
not available
# After:
not available
### Basic Block: 30
## Instruction: renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !561 :: (dereferenceable load (s32) from %ir.low163, align 8); ../udivmoddi4.c:131:25
# Before:
bot
# After:
not available
## Instruction: CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !563; ../udivmoddi4.c:131:21
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.32, 1, killed $cpsr, debug-location !563; ../udivmoddi4.c:131:21
# Before:
not available
# After:
not available
## Instruction: B %bb.31, debug-location !563; ../udivmoddi4.c:131:21
# Before:
not available
# After:
not available
### Basic Block: 31
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !564 :: (dereferenceable load (s32) from %ir.all167, align 8); ../udivmoddi4.c:132:30
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !564 :: (dereferenceable load (s32) from %ir.all167 + 4, basealign 8); ../udivmoddi4.c:132:30
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !565; ../udivmoddi4.c:132:21
# Before:
not available
# After:
not available
### Basic Block: 32
## Instruction: renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !566 :: (dereferenceable load (s32) from %ir.low170, align 8); ../udivmoddi4.c:133:40
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !567; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !567; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !567; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !567; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !567; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !567; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !567; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !567; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !567; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r12 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !567; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsi renamable $r12, 195, 14, $noreg, $noreg, debug-location !567; ../udivmoddi4.c:133:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !569 :: (dereferenceable load (s32) from %ir.high172); ../udivmoddi4.c:134:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !570; ../udivmoddi4.c:134:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !573 :: (store (s32) into %ir.high175); ../udivmoddi4.c:134:26
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !578 :: (dereferenceable load (s32) from %ir.low181, align 8); ../udivmoddi4.c:135:68
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !575 :: (dereferenceable load (s32) from %ir.high177); ../udivmoddi4.c:135:32
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = MOVi 32, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = nuw nsw SUBrsi killed renamable $r3, killed renamable $r12, 195, 14, $noreg, $noreg, debug-location !576; ../udivmoddi4.c:135:54
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !577; ../udivmoddi4.c:135:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !580; ../udivmoddi4.c:135:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !582 :: (store (s32) into %ir.low185, align 8); ../udivmoddi4.c:135:25
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !583 :: (dereferenceable load (s32) from %ir.all186, align 8); ../udivmoddi4.c:136:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !583 :: (dereferenceable load (s32) from %ir.all186 + 4, basealign 8); ../udivmoddi4.c:136:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !584; ../udivmoddi4.c:136:17
# Before:
not available
# After:
not available
### Basic Block: 33
## Instruction: renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !585 :: (dereferenceable load (s32) from %ir.low189, align 8); ../udivmoddi4.c:142:55
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !586; ../udivmoddi4.c:142:37
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !589 :: (dereferenceable load (s32) from %ir.high191); ../udivmoddi4.c:142:80
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !590; ../udivmoddi4.c:142:62
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !591; ../udivmoddi4.c:142:60
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDri killed renamable $r0, 33, 14, $noreg, $noreg, debug-location !591; ../udivmoddi4.c:142:60
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.9)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !593; ../udivmoddi4.c:147:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.35, 1, killed $cpsr, debug-location !593; ../udivmoddi4.c:147:17
# Before:
not available
# After:
not available
## Instruction: B %bb.34, debug-location !593; ../udivmoddi4.c:147:17
# Before:
not available
# After:
not available
### Basic Block: 34
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 renamable $r0, $r11, -24, 14, $noreg, debug-location !595 :: (store (s32) into %ir.low197, align 8); ../udivmoddi4.c:149:25
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !596 :: (dereferenceable load (s32) from %ir.low199, align 8); ../udivmoddi4.c:150:32
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !599 :: (store (s32) into %ir.high201); ../udivmoddi4.c:150:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !602 :: (store (s32) into %ir.high203); ../udivmoddi4.c:151:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !604 :: (dereferenceable load (s32) from %ir.high205); ../udivmoddi4.c:152:31
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !606 :: (store (s32) into %ir.low207, align 8); ../udivmoddi4.c:152:25
# Before:
bot
# After:
not available
## Instruction: B %bb.39, debug-location !607; ../udivmoddi4.c:153:13
# Before:
not available
# After:
not available
### Basic Block: 35
## Instruction: $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !609 :: (load (s32) from %stack.9); ../udivmoddi4.c:154:22
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !609; ../udivmoddi4.c:154:22
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.37, 8, killed $cpsr, debug-location !609; ../udivmoddi4.c:154:22
# Before:
not available
# After:
not available
## Instruction: B %bb.36, debug-location !609; ../udivmoddi4.c:154:22
# Before:
not available
# After:
not available
### Basic Block: 36
## Instruction: $r2 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !611 :: (store (s32) into %ir.low213, align 8); ../udivmoddi4.c:156:25
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !612 :: (dereferenceable load (s32) from %ir.low215, align 8); ../udivmoddi4.c:157:32
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !613; ../udivmoddi4.c:157:53
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !614; ../udivmoddi4.c:157:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !617 :: (store (s32) into %ir.high219); ../udivmoddi4.c:157:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !619 :: (dereferenceable load (s32) from %ir.high221); ../udivmoddi4.c:158:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !620; ../udivmoddi4.c:158:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !623 :: (store (s32) into %ir.high224); ../udivmoddi4.c:158:26
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !628 :: (dereferenceable load (s32) from %ir.low230, align 8); ../udivmoddi4.c:159:68
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !625 :: (dereferenceable load (s32) from %ir.high226); ../udivmoddi4.c:159:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !627; ../udivmoddi4.c:159:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !630; ../udivmoddi4.c:159:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !632 :: (store (s32) into %ir.low234, align 8); ../udivmoddi4.c:159:25
# Before:
bot
# After:
not available
## Instruction: B %bb.38, debug-location !633; ../udivmoddi4.c:160:13
# Before:
not available
# After:
not available
### Basic Block: 37
## Instruction: $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !634 :: (load (s32) from %stack.9); ../udivmoddi4.c:163:31
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !634 :: (dereferenceable load (s32) from %ir.low237, align 8); ../udivmoddi4.c:163:31
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r1, 64, 14, $noreg, $noreg, debug-location !635; ../udivmoddi4.c:163:53
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !636; ../udivmoddi4.c:163:35
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !638 :: (store (s32) into %ir.low241, align 8); ../udivmoddi4.c:163:25
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !643 :: (dereferenceable load (s32) from %ir.low247, align 8); ../udivmoddi4.c:165:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !640 :: (dereferenceable load (s32) from %ir.high243); ../udivmoddi4.c:164:33
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !642; ../udivmoddi4.c:164:38
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !644; ../udivmoddi4.c:165:44
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r2, renamable $r1, 3, 14, $noreg, $noreg, debug-location !646; ../udivmoddi4.c:164:63
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !649 :: (store (s32) into %ir.high252); ../udivmoddi4.c:164:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !652 :: (store (s32) into %ir.high254); ../udivmoddi4.c:166:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !654 :: (dereferenceable load (s32) from %ir.high256); ../udivmoddi4.c:167:31
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !656; ../udivmoddi4.c:167:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !658 :: (store (s32) into %ir.low260, align 8); ../udivmoddi4.c:167:25
# Before:
bot
# After:
not available
## Instruction: B %bb.38
# Before:
not available
# After:
not available
### Basic Block: 38
## Instruction: B %bb.39
# Before:
not available
# After:
not available
### Basic Block: 39
## Instruction: $r0 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
# Before:
bot
# After:
not available
## Instruction: B %bb.48, debug-location !659; ../udivmoddi4.c:169:9
# Before:
not available
# After:
not available
### Basic Block: 40
## Instruction: renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !661 :: (dereferenceable load (s32) from %ir.high265); ../udivmoddi4.c:176:36
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !662; ../udivmoddi4.c:176:18
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !664 :: (dereferenceable load (s32) from %ir.high267); ../udivmoddi4.c:176:62
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !665; ../udivmoddi4.c:176:44
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !666; ../udivmoddi4.c:176:42
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.11)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !668; ../udivmoddi4.c:178:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.44, 3, killed $cpsr, debug-location !668; ../udivmoddi4.c:178:17
# Before:
not available
# After:
not available
## Instruction: B %bb.41, debug-location !668; ../udivmoddi4.c:178:17
# Before:
not available
# After:
not available
### Basic Block: 41
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !669 :: (load (s32) from %stack.4); ../udivmoddi4.c:180:21
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !669; ../udivmoddi4.c:180:21
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.43, 0, killed $cpsr, debug-location !669; ../udivmoddi4.c:180:21
# Before:
not available
# After:
not available
## Instruction: B %bb.42, debug-location !669; ../udivmoddi4.c:180:21
# Before:
not available
# After:
not available
### Basic Block: 42
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !670 :: (load (s32) from %stack.4); ../udivmoddi4.c:181:30
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !670 :: (dereferenceable load (s32) from %ir.all274, align 8); ../udivmoddi4.c:181:30
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !670 :: (dereferenceable load (s32) from %ir.all274 + 4, basealign 8); ../udivmoddi4.c:181:30
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !671 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:181:26
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !671 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:181:26
# Before:
bot
# After:
not available
## Instruction: B %bb.43, debug-location !672; ../udivmoddi4.c:181:21
# Before:
not available
# After:
not available
### Basic Block: 43
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !673; ../udivmoddi4.c:182:17
# Before:
not available
# After:
not available
### Basic Block: 44
## Instruction: $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !674 :: (load (s32) from %stack.11); ../udivmoddi4.c:184:13
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !674; ../udivmoddi4.c:184:13
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.12)
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !676 :: (store (s32) into %ir.low279, align 8); ../udivmoddi4.c:187:21
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !678; ../udivmoddi4.c:188:17
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.46, 1, killed $cpsr, debug-location !678; ../udivmoddi4.c:188:17
# Before:
not available
# After:
not available
## Instruction: B %bb.45, debug-location !678; ../udivmoddi4.c:188:17
# Before:
not available
# After:
not available
### Basic Block: 45
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !679 :: (dereferenceable load (s32) from %ir.low284, align 8); ../udivmoddi4.c:190:32
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !682 :: (store (s32) into %ir.high286); ../udivmoddi4.c:190:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !685 :: (store (s32) into %ir.high288); ../udivmoddi4.c:191:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !687 :: (dereferenceable load (s32) from %ir.high290); ../udivmoddi4.c:192:31
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !689 :: (store (s32) into %ir.low292, align 8); ../udivmoddi4.c:192:25
# Before:
bot
# After:
not available
## Instruction: B %bb.47, debug-location !690; ../udivmoddi4.c:193:13
# Before:
not available
# After:
not available
### Basic Block: 46
## Instruction: $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !691 :: (load (s32) from %stack.12); ../udivmoddi4.c:196:32
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !691 :: (load (s32) from %stack.11); ../udivmoddi4.c:196:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !691 :: (dereferenceable load (s32) from %ir.low295, align 8); ../udivmoddi4.c:196:32
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = nsw RSBri renamable $r1, 31, 14, $noreg, $noreg, debug-location !692; ../udivmoddi4.c:196:53
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !693; ../udivmoddi4.c:196:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !696 :: (store (s32) into %ir.high299); ../udivmoddi4.c:196:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !698 :: (dereferenceable load (s32) from %ir.high301); ../udivmoddi4.c:197:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !699; ../udivmoddi4.c:197:37
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !702 :: (store (s32) into %ir.high304); ../udivmoddi4.c:197:26
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !707 :: (dereferenceable load (s32) from %ir.low310, align 8); ../udivmoddi4.c:198:68
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !704 :: (dereferenceable load (s32) from %ir.high306); ../udivmoddi4.c:198:32
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !706; ../udivmoddi4.c:198:37
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !709; ../udivmoddi4.c:198:61
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !711 :: (store (s32) into %ir.low314, align 8); ../udivmoddi4.c:198:25
# Before:
bot
# After:
not available
## Instruction: B %bb.47
# Before:
not available
# After:
not available
### Basic Block: 47
## Instruction: $r0 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.12)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
# Before:
bot
# After:
not available
## Instruction: B %bb.48
# Before:
not available
# After:
not available
### Basic Block: 48
## Instruction: $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !712 :: (load (s32) from %stack.10); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: B %bb.49
# Before:
not available
# After:
not available
### Basic Block: 49
## Instruction: $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !712 :: (load (s32) from %stack.8); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
# Before:
bot
# After:
not available
## Instruction: B %bb.50, debug-location !713; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
### Basic Block: 50
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !712 :: (load (s32) from %stack.14); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !712 :: (load (s32) from %stack.13); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.16)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.15)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !713; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.53, 0, killed $cpsr, debug-location !713; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
## Instruction: B %bb.51, debug-location !713; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
### Basic Block: 51
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !717 :: (load (s32) from %stack.16); ../udivmoddi4.c:212:43
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -32, 14, $noreg, debug-location !717 :: (dereferenceable load (s32) from %ir.low324, align 8); ../udivmoddi4.c:212:43
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !716 :: (dereferenceable load (s32) from %ir.high321); ../udivmoddi4.c:212:25
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !718; ../udivmoddi4.c:212:36
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !718; ../udivmoddi4.c:212:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, $r11, -28, 14, $noreg, debug-location !721 :: (store (s32) into %ir.high328); ../udivmoddi4.c:212:18
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !723 :: (dereferenceable load (s32) from %ir.high333); ../udivmoddi4.c:213:43
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:213:36
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, killed renamable $r2, 251, 14, $noreg, $noreg, debug-location !724; ../udivmoddi4.c:213:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !726 :: (store (s32) into %ir.low337, align 8); ../udivmoddi4.c:213:18
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !729 :: (dereferenceable load (s32) from %ir.low342, align 8); ../udivmoddi4.c:214:43
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !728 :: (dereferenceable load (s32) from %ir.high339); ../udivmoddi4.c:214:25
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !730; ../udivmoddi4.c:214:36
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !730; ../udivmoddi4.c:214:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, $r11, -20, 14, $noreg, debug-location !733 :: (store (s32) into %ir.high346); ../udivmoddi4.c:214:18
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !735; ../udivmoddi4.c:215:36
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !737 :: (store (s32) into %ir.low352, align 8); ../udivmoddi4.c:215:18
# Before:
bot
# After:
not available
## Instruction: renamable $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !738 :: (dereferenceable load (s32) from %ir.all354, align 8); ../udivmoddi4.c:223:37
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !738 :: (dereferenceable load (s32) from %ir.all354 + 4, basealign 8); ../udivmoddi4.c:223:37
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !739 :: (dereferenceable load (s32) from %ir.all355, align 8); ../udivmoddi4.c:223:45
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -28, 14, $noreg, debug-location !739 :: (dereferenceable load (s32) from %ir.all355 + 4, basealign 8); ../udivmoddi4.c:223:45
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = MVNr renamable $r1, 14, $noreg, $noreg, debug-location !740; ../udivmoddi4.c:223:49
# Before:
not available
# After:
not available
## Instruction: renamable $lr = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !740; ../udivmoddi4.c:223:49
# Before:
not available
# After:
not available
## Instruction: dead renamable $lr = ADDrr renamable $r12, killed renamable $lr, 14, $noreg, def $cpsr, debug-location !740; ../udivmoddi4.c:223:49
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = ADCrr renamable $r2, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !740; ../udivmoddi4.c:223:49
# Before:
not available
# After:
not available
## Instruction: STRi12 $r3, $sp, 0, 14, $noreg :: (store (s32) into %stack.17)
# Before:
bot
# After:
not available
## Instruction: renamable $r12 = SUBrr renamable $r0, killed renamable $r12, 14, $noreg, def $cpsr, debug-location !743; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = SBCrr renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !743; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !743; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: $r0 = MOVr killed renamable $r12, 4, killed $cpsr, $noreg, implicit renamable $r0, debug-location !743; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !743; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr killed renamable $r2, 4, killed $cpsr, $noreg, implicit renamable $r1, debug-location !743; ../udivmoddi4.c:225:15
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !743 :: (store (s32) into %ir.all363 + 4, basealign 8); ../udivmoddi4.c:225:15
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !743 :: (store (s32) into %ir.all363, align 8); ../udivmoddi4.c:225:15
# Before:
bot
# After:
not available
## Instruction: B %bb.52, debug-location !744; ../udivmoddi4.c:226:5
# Before:
not available
# After:
not available
### Basic Block: 52
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !745 :: (load (s32) from %stack.15); ../udivmoddi4.c:224:19
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !745 :: (load (s32) from %stack.17); ../udivmoddi4.c:224:19
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !745; ../udivmoddi4.c:224:19
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !747; ../udivmoddi4.c:209:20
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
# Before:
bot
# After:
not available
## Instruction: B %bb.50, debug-location !713; ../udivmoddi4.c:209:5
# Before:
not available
# After:
not available
### Basic Block: 53
## Instruction: $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !749 :: (load (s32) from %stack.4); ../udivmoddi4.c:227:16
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !749 :: (load (s32) from %stack.16); ../udivmoddi4.c:227:16
# Before:
bot
# After:
not available
## Instruction: renamable $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !749 :: (dereferenceable load (s32) from %ir.all365, align 8); ../udivmoddi4.c:227:16
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $r11, -20, 14, $noreg, debug-location !749 :: (dereferenceable load (s32) from %ir.all365 + 4, basealign 8); ../udivmoddi4.c:227:16
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !750; ../udivmoddi4.c:227:20
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = ORRrsi killed renamable $r1, renamable $r3, 251, 14, $noreg, $noreg, debug-location !750; ../udivmoddi4.c:227:20
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = ORRrsi renamable $r2, killed renamable $r3, 10, 14, $noreg, $noreg, debug-location !752; ../udivmoddi4.c:227:26
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r2, $r11, -24, 14, $noreg, debug-location !754 :: (store (s32) into %ir.all369, align 8); ../udivmoddi4.c:227:11
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !754 :: (store (s32) into %ir.all369 + 4, basealign 8); ../udivmoddi4.c:227:11
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !755; ../udivmoddi4.c:228:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.55, 0, killed $cpsr, debug-location !755; ../udivmoddi4.c:228:9
# Before:
not available
# After:
not available
## Instruction: B %bb.54, debug-location !755; ../udivmoddi4.c:228:9
# Before:
not available
# After:
not available
### Basic Block: 54
## Instruction: $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !756 :: (load (s32) from %stack.4); ../udivmoddi4.c:229:18
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !756 :: (dereferenceable load (s32) from %ir.all372, align 8); ../udivmoddi4.c:229:18
# Before:
bot
# After:
not available
## Instruction: renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !756 :: (dereferenceable load (s32) from %ir.all372 + 4, basealign 8); ../udivmoddi4.c:229:18
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !757 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:229:14
# Before:
bot
# After:
not available
## Instruction: STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !757 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:229:14
# Before:
bot
# After:
not available
## Instruction: B %bb.55, debug-location !758; ../udivmoddi4.c:229:9
# Before:
not available
# After:
not available
### Basic Block: 55
## Instruction: renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !759 :: (dereferenceable load (s32) from %ir.all374, align 8); ../udivmoddi4.c:230:14
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !759 :: (dereferenceable load (s32) from %ir.all374 + 4, basealign 8); ../udivmoddi4.c:230:14
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.56, debug-location !760; ../udivmoddi4.c:230:5
# Before:
not available
# After:
not available
### Basic Block: 56
## Instruction: $r0 = LDRi12 $sp, 44, 14, $noreg, debug-location !712 :: (load (s32) from %stack.6); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $r11, -40, 14, $noreg, debug-location !712 :: (load (s32) from %stack.5); ../udivmoddi4.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !761; ../udivmoddi4.c:231:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !761; ../udivmoddi4.c:231:1
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !761; ../udivmoddi4.c:231:1
# Before:
not available
# After:
not available
### Basic Block: 57
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
#### Function: __udivmodsi4
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1076; ../udivmodsi4.c:22:14
# Before:
not available
# After:
not available
## Instruction: $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !1076 :: (load (s32) from %stack.2); ../udivmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1076 :: (load (s32) from %stack.1); ../udivmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1076 :: (load (s32) from %stack.0); ../udivmodsi4.c:22:14
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r3 = MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !1077; ../udivmodsi4.c:23:16
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1078; ../udivmodsi4.c:23:12
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !1079 :: (store (s32) into %ir.rem); ../udivmodsi4.c:23:8
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1080; ../udivmodsi4.c:24:3
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1080; ../udivmodsi4.c:24:3
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1080; ../udivmodsi4.c:24:3
# Before:
not available
# After:
not available
#### Function: __udivsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 64, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1083; ../udivsi3.c:32:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 1, killed $cpsr, debug-location !1083; ../udivsi3.c:32:9
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !1083; ../udivsi3.c:32:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1084; ../udivsi3.c:33:9
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1086 :: (load (s32) from %stack.0); ../udivsi3.c:34:9
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1086; ../udivsi3.c:34:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 1, killed $cpsr, debug-location !1086; ../udivsi3.c:34:9
# Before:
not available
# After:
not available
## Instruction: B %bb.3, debug-location !1086; ../udivsi3.c:34:9
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1087; ../udivsi3.c:35:9
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1088 :: (load (s32) from %stack.1); ../udivsi3.c:36:10
# Before:
bot
# After:
not available
## Instruction: BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1088; ../udivsi3.c:36:10
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1088; ../udivsi3.c:36:10
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r1, $r11, -20, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1089; ../udivsi3.c:36:29
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1089; ../udivsi3.c:36:29
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1090 :: (load (s32) from %stack.4); ../udivsi3.c:36:27
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1090; ../udivsi3.c:36:27
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $r11, -16, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1092; ../udivsi3.c:38:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.6, 3, killed $cpsr, debug-location !1092; ../udivsi3.c:38:9
# Before:
not available
# After:
not available
## Instruction: B %bb.5, debug-location !1092; ../udivsi3.c:38:9
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1093; ../udivsi3.c:39:9
# Before:
not available
# After:
not available
### Basic Block: 6
## Instruction: $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !1095 :: (load (s32) from %stack.3); ../udivsi3.c:40:9
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !1095; ../udivsi3.c:40:9
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.8, 1, killed $cpsr, debug-location !1095; ../udivsi3.c:40:9
# Before:
not available
# After:
not available
## Instruction: B %bb.7, debug-location !1095; ../udivsi3.c:40:9
# Before:
not available
# After:
not available
### Basic Block: 7
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1096; ../udivsi3.c:41:9
# Before:
not available
# After:
not available
### Basic Block: 8
## Instruction: $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1097 :: (load (s32) from %stack.0); ../udivsi3.c:42:5
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !1097 :: (load (s32) from %stack.3); ../udivsi3.c:42:5
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !1097; ../udivsi3.c:42:5
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !1098; ../udivsi3.c:45:28
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = MOVsr renamable $r0, killed renamable $r2, 2, 14, $noreg, $noreg, debug-location !1099; ../udivsi3.c:45:11
# Before:
not available
# After:
not available
## Instruction: renamable $r2 = MOVsr renamable $r0, renamable $r1, 3, 14, $noreg, $noreg, debug-location !1100; ../udivsi3.c:46:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1101; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
### Basic Block: 9
## Instruction: $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !1102 :: (load (s32) from %stack.8); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 32, 14, $noreg, debug-location !1102 :: (load (s32) from %stack.7); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $r11, -28, 14, $noreg, debug-location !1102 :: (load (s32) from %stack.6); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1102 :: (load (s32) from %stack.5); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.12)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.11)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 20, 14, $noreg :: (store (s32) into %stack.10)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.9)
# Before:
bot
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1101; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.12, 0, killed $cpsr, debug-location !1101; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
## Instruction: B %bb.10, debug-location !1101; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
### Basic Block: 10
## Instruction: $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1104 :: (load (s32) from %stack.1); ../udivsi3.c:51:22
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !1104 :: (load (s32) from %stack.9); ../udivsi3.c:51:22
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1104 :: (load (s32) from %stack.10); ../udivsi3.c:51:22
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r0, 10, 14, $noreg, $noreg, debug-location !1104; ../udivsi3.c:51:22
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ORRrsi killed renamable $r0, renamable $r2, 251, 14, $noreg, $noreg, debug-location !1104; ../udivsi3.c:51:22
# Before:
not available
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.14)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !1105; ../udivsi3.c:60:41
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = ADDrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1105; ../udivsi3.c:60:41
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.13)
# Before:
bot
# After:
not available
## Instruction: B %bb.11, debug-location !1106; ../udivsi3.c:63:5
# Before:
not available
# After:
not available
### Basic Block: 11
## Instruction: $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !1108 :: (load (s32) from %stack.11); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 12, 14, $noreg, debug-location !1108 :: (load (s32) from %stack.12); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $r12 = LDRi12 $sp, 24, 14, $noreg, debug-location !1108 :: (load (s32) from %stack.9); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1108 :: (load (s32) from %stack.13); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1108 :: (load (s32) from %stack.14); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: $lr = LDRi12 $r11, -8, 14, $noreg, debug-location !1108 :: (load (s32) from %stack.1); ../udivsi3.c:62:11
# Before:
bot
# After:
not available
## Instruction: renamable $lr = SUBrr renamable $r2, renamable $lr, 14, $noreg, $noreg, debug-location !1108; ../udivsi3.c:62:11
# Before:
not available
# After:
not available
## Instruction: CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1108; ../udivsi3.c:62:11
# Before:
not available
# After:
not available
## Instruction: $r2 = MOVr killed renamable $lr, 4, killed $cpsr, $noreg, implicit renamable $r2, debug-location !1108; ../udivsi3.c:62:11
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !1109; ../udivsi3.c:61:19
# Before:
not available
# After:
not available
## Instruction: renamable $r3 = ORRrsi renamable $r3, renamable $r12, 10, 14, $noreg, $noreg, debug-location !1111; ../udivsi3.c:52:22
# Before:
not available
# After:
not available
## Instruction: renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1112; ../udivsi3.c:48:20
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
# Before:
bot
# After:
not available
## Instruction: B %bb.9, debug-location !1101; ../udivsi3.c:48:5
# Before:
not available
# After:
not available
### Basic Block: 12
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1115 :: (load (s32) from %stack.12); ../udivsi3.c:64:18
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1115 :: (load (s32) from %stack.9); ../udivsi3.c:64:18
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = ORRrsi renamable $r0, renamable $r1, 10, 14, $noreg, $noreg, debug-location !1115; ../udivsi3.c:64:18
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: B %bb.13, debug-location !1116; ../udivsi3.c:65:5
# Before:
not available
# After:
not available
### Basic Block: 13
## Instruction: $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1102 :: (load (s32) from %stack.2); ../udivsi3.c:0
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1117; ../udivsi3.c:66:1
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1117; ../udivsi3.c:66:1
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1117; ../udivsi3.c:66:1
# Before:
not available
# After:
not available
#### Function: __umoddi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1119; ../umoddi3.c:23:5
# Before:
not available
# After:
not available
## Instruction: renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1119 :: (store (s32) into stack); ../umoddi3.c:23:5
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1119; ../umoddi3.c:23:5
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1120 :: (dereferenceable load (s32) from %ir.r, align 8); ../umoddi3.c:24:12
# Before:
bot
# After:
not available
## Instruction: renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1120 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../umoddi3.c:24:12
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1121; ../umoddi3.c:24:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1121; ../umoddi3.c:24:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1121; ../umoddi3.c:24:5
# Before:
not available
# After:
not available
#### Function: __umodsi3
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
bot
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1123; ../umodsi3.c:22:16
# Before:
not available
# After:
not available
## Instruction: $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !1123 :: (load (s32) from %stack.1); ../umodsi3.c:22:16
# Before:
bot
# After:
not available
## Instruction: $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1123; ../umodsi3.c:22:16
# Before:
not available
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1124 :: (load (s32) from %stack.0); ../umodsi3.c:22:32
# Before:
bot
# After:
not available
## Instruction: early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1124; ../umodsi3.c:22:32
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1125; ../umodsi3.c:22:14
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1126; ../umodsi3.c:22:5
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1126; ../umodsi3.c:22:5
# Before:
bot
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1126; ../umodsi3.c:22:5
# Before:
not available
# After:
not available
#### Function: compilerrt_abort_impl
### Basic Block: 0
#### Function: deg2rad_init
### Basic Block: 0
## Instruction: renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !129 :: (load (s32) from constant-pool); batchtest/deg2rad/deg2rad.c:51:13
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function deg2rad_init |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{}
  ]
]
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !129 :: (store (s32) into @deg2rad_X); batchtest/deg2rad/deg2rad.c:51:13
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function deg2rad_init |->
    Leaf:
[0 |-> 0x0,
 1 |-> 0xd0000, @deg2rad_X,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{}
  ]
]
# After:
not available
## Instruction: renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !130 :: (load (s32) from constant-pool); batchtest/deg2rad/deg2rad.c:52:13
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function deg2rad_init |->
    Leaf:
[0 |-> 0x0,
 1 |-> 0xd0000, @deg2rad_X,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{0xd0000 |-> 0x0
}
  ]
]
# After:
not available
## Instruction: STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !130 :: (store (s32) into @deg2rad_Y); batchtest/deg2rad/deg2rad.c:52:13
# Before:
[
 Function call at location main_BB0_I6 |->
  [
   Call of function deg2rad_init |->
    Leaf:
[0 |-> 0x0,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{0xd0000 |-> 0x0
}
  ]
]
# After:
not available
## Instruction: BX_RET 14, $noreg, debug-location !131; batchtest/deg2rad/deg2rad.c:53:1
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
#### Function: deg2rad_main
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 4, 14, $noreg, $noreg
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    Leaf:
[0 |-> 0x0,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{0xd0000 |-> 0x0
0xd0004 |-> 0x0
}
  ]
]
# After:
not available
## Instruction: renamable $s0 = VLDRS %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    Leaf:
[0 |-> 0x0,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{0xd0000 |-> 0x0
0xd0004 |-> 0x0
}
  ]
]
# After:
not available
## Instruction: VSTRS killed $s0, $sp, 0, 14, $noreg :: (store (s32) into %stack.0)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    Leaf:
[0 |-> 0x0,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{0xd0000 |-> 0x0
0xd0004 |-> 0x0
}
  ]
]
# After:
not available
## Instruction: B %bb.1, debug-location !141; batchtest/deg2rad/deg2rad.c:80:9
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $s0 = VLDRS $sp, 0, 14, $noreg, debug-location !142 :: (load (s32) from %stack.0); batchtest/deg2rad/deg2rad.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{0xd0000 |-> 0x0
0xd0004 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $r0 = LDRi12 %const.1, 0, 14, $noreg, debug-location !142 :: (load (s32) from constant-pool); batchtest/deg2rad/deg2rad.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0x0,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{0xd0000 |-> 0x0
0xd0004 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: VSTRS renamable $s0, killed renamable $r0, 0, 14, $noreg, debug-location !142 :: (store (s32) into @deg2rad_X); batchtest/deg2rad/deg2rad.c:0
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{0xd0000 |-> 0x0
0xd0004 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $s2 = VLDRS %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{0xd0004 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: VCMPS killed renamable $s0, killed renamable $s2, 14, $noreg, implicit-def $fpscr_nzcv, debug-location !144; batchtest/deg2rad/deg2rad.c:80:3
# Before:
not available
# After:
not available
## Instruction: FMSTAT 14, $noreg, implicit-def $cpsr, implicit killed $fpscr_nzcv, debug-location !144; batchtest/deg2rad/deg2rad.c:80:3
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 8, killed $cpsr, debug-location !144; batchtest/deg2rad/deg2rad.c:80:3
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !144; batchtest/deg2rad/deg2rad.c:80:3
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = LDRi12 %const.1, 0, 14, $noreg, debug-location !145 :: (load (s32) from constant-pool); batchtest/deg2rad/deg2rad.c:81:18
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{0xd0004 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $s0 = VLDRS killed renamable $r0, 0, 14, $noreg, debug-location !145 :: (dereferenceable load (s32) from @deg2rad_X); batchtest/deg2rad/deg2rad.c:81:18
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{0xd0004 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $s2 = VLDRS %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{0xd0004 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $s0 = VMULS killed renamable $s0, killed renamable $s2, 14, $noreg, debug-location !145; batchtest/deg2rad/deg2rad.c:81:18
# Before:
not available
# After:
not available
## Instruction: renamable $s2 = VLDRS %const.4, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{0xd0004 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $s2 = VDIVS killed renamable $s0, killed renamable $s2, 14, $noreg, debug-location !145; batchtest/deg2rad/deg2rad.c:81:18
# Before:
not available
# After:
not available
## Instruction: renamable $r0 = LDRi12 %const.5, 0, 14, $noreg, debug-location !146 :: (load (s32) from constant-pool); batchtest/deg2rad/deg2rad.c:81:15
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{0xd0004 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $s0 = VLDRS renamable $r0, 0, 14, $noreg, debug-location !146 :: (dereferenceable load (s32) from @deg2rad_Y); batchtest/deg2rad/deg2rad.c:81:15
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0xd0004, @deg2rad_Y,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{0xd0004 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0004, @deg2rad_Y,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $s0 = VADDS killed renamable $s0, killed renamable $s2, 14, $noreg, debug-location !146; batchtest/deg2rad/deg2rad.c:81:15
# Before:
not available
# After:
not available
## Instruction: VSTRS killed renamable $s0, killed renamable $r0, 0, 14, $noreg, debug-location !146 :: (store (s32) into @deg2rad_Y); batchtest/deg2rad/deg2rad.c:81:15
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0xd0004, @deg2rad_Y,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{0xd0004 |-> 0x0
}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0004, @deg2rad_Y,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.3, debug-location !147; batchtest/deg2rad/deg2rad.c:81:5
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: renamable $r0 = LDRi12 %const.1, 0, 14, $noreg, debug-location !148 :: (load (s32) from constant-pool); batchtest/deg2rad/deg2rad.c:80:57
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0xd0004, @deg2rad_Y,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0004, @deg2rad_Y,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $s0 = VLDRS killed renamable $r0, 0, 14, $noreg, debug-location !148 :: (dereferenceable load (s32) from @deg2rad_X); batchtest/deg2rad/deg2rad.c:80:57
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $s2 = VLDRS %const.6, 0, 14, $noreg :: (load (s32) from constant-pool)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: renamable $s0 = VADDS killed renamable $s0, killed renamable $s2, 14, $noreg, debug-location !148; batchtest/deg2rad/deg2rad.c:80:57
# Before:
not available
# After:
not available
## Instruction: VSTRS killed $s0, $sp, 0, 14, $noreg :: (store (s32) into %stack.0)
# Before:
[
 Function call at location main_BB0_I7 |->
  [
   Call of function deg2rad_main |->
    [
     Loop Peeling: Backedges {(BB3, BB1)} in function deg2rad_main taken 0 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}

     Loop Iteration: Backedges {(BB3, BB1)} in function deg2rad_main taken at least 1 times |->
      Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
    ]
  ]
]
# After:
not available
## Instruction: B %bb.1, debug-location !144; batchtest/deg2rad/deg2rad.c:80:3
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $sp = frame-destroy ADDri killed $sp, 4, 14, $noreg, $noreg, debug-location !151; batchtest/deg2rad/deg2rad.c:82:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, debug-location !151; batchtest/deg2rad/deg2rad.c:82:1
# Before:
not available
# After:
not available
### Basic Block: 5
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 1, %const.1, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 2, %const.2, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 3, %const.3, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 4, %const.4, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 5, %const.5, 4
# Before:
not available
# After:
not available
## Instruction: CONSTPOOL_ENTRY 6, %const.6, 4
# Before:
not available
# After:
not available
#### Function: deg2rad_return
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 4, 14, $noreg, $noreg
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function deg2rad_return |->
    Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{}
  ]
]
# After:
not available
## Instruction: renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !133 :: (load (s32) from constant-pool); batchtest/deg2rad/deg2rad.c:62:14
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function deg2rad_return |->
    Leaf:
[0 |-> 0xd0000, @deg2rad_X,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
  ]
]
# After:
not available
## Instruction: renamable $s0 = VLDRS killed renamable $r0, 0, 14, $noreg, debug-location !133 :: (dereferenceable load (s32) from @deg2rad_Y); batchtest/deg2rad/deg2rad.c:62:14
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function deg2rad_return |->
    Leaf:
[0 |-> 0xd0004, @deg2rad_Y,
 1 |-> 0xd0004, @deg2rad_Y,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
  ]
]
# After:
not available
## Instruction: renamable $s0 = VTOSIZS killed renamable $s0, 14, $noreg, debug-location !133; batchtest/deg2rad/deg2rad.c:62:14
# Before:
not available
# After:
not available
## Instruction: $r0 = VMOVRS killed $s0, 14, $noreg, debug-location !133; batchtest/deg2rad/deg2rad.c:62:14
# Before:
not available
# After:
not available
## Instruction: $r1 = MOVi 109, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: $r1 = ORRri $r1, 1024, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !135; batchtest/deg2rad/deg2rad.c:64:8
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.2, 1, killed $cpsr, debug-location !135; batchtest/deg2rad/deg2rad.c:64:8
# Before:
not available
# After:
not available
## Instruction: B %bb.1, debug-location !135; batchtest/deg2rad/deg2rad.c:64:8
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.0)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function deg2rad_return |->
    Leaf:
[0 |-> 0x0,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
  ]
]
# After:
not available
## Instruction: B %bb.3, debug-location !136; batchtest/deg2rad/deg2rad.c:65:5
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: renamable $r0 = MVNi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.0)
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function deg2rad_return |->
    Leaf:
[0 |-> 0xffffffff,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
  ]
]
# After:
not available
## Instruction: B %bb.3, debug-location !137; batchtest/deg2rad/deg2rad.c:67:5
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !138 :: (load (s32) from %stack.0); batchtest/deg2rad/deg2rad.c:0
# Before:
[
 Function call at location main_BB0_I8 |->
  [
   Call of function deg2rad_return |->
    Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff4,
 14 |-> top,
 15 |-> top]
{}
  ]
]
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 4, 14, $noreg, $noreg, debug-location !139; batchtest/deg2rad/deg2rad.c:69:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !139; batchtest/deg2rad/deg2rad.c:69:1
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: CONSTPOOL_ENTRY 0, %const.0, 4
# Before:
not available
# After:
not available
#### Function: main
### Basic Block: 0
## Instruction: $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
# Before:
[
 Call of function main |->
  Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> top,
 12 |-> top,
 13 |-> 0x8000000,
 14 |-> top,
 15 |-> top]
{}
]
# After:
not available
## Instruction: $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: BL_pred @deg2rad_init, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !153; batchtest/deg2rad/deg2rad.c:87:3
# Before:
not available
# After:
not available
## Instruction: BL_pred @deg2rad_main, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !154; batchtest/deg2rad/deg2rad.c:88:3
# Before:
not available
# After:
not available
## Instruction: BL_pred @deg2rad_return, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $r0, debug-location !155; batchtest/deg2rad/deg2rad.c:89:10
# Before:
not available
# After:
not available
## Instruction: $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !156; batchtest/deg2rad/deg2rad.c:89:3
# Before:
[
 Call of function main |->
  Leaf:
[0 |-> top,
 1 |-> top,
 2 |-> top,
 3 |-> top,
 4 |-> top,
 5 |-> top,
 6 |-> top,
 7 |-> top,
 8 |-> top,
 9 |-> top,
 10 |-> top,
 11 |-> 0x7fffff8,
 12 |-> top,
 13 |-> 0x7fffff8,
 14 |-> top,
 15 |-> top]
{}
]
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !156; batchtest/deg2rad/deg2rad.c:89:3
# Before:
not available
# After:
not available
#### Function: memcpy
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: B %bb.1, debug-location !1128; ../memory.c:8:6
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1129 :: (load (s32) from %stack.3); ../memory.c:0
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1129 :: (load (s32) from %stack.0); ../memory.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1131; ../memory.c:8:2
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 0, killed $cpsr, debug-location !1131; ../memory.c:8:2
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1131; ../memory.c:8:2
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1132 :: (load (s32) from %stack.1); ../memory.c:9:21
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1132 :: (load (s32) from %stack.4); ../memory.c:9:21
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1132 :: (load (s32) from %stack.2); ../memory.c:9:21
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = LDRBrs renamable $r0, renamable $r2, 0, 14, $noreg, debug-location !1132 :: (load (s8) from %ir.arrayidx); ../memory.c:9:21
# Before:
bot
# After:
not available
## Instruction: STRBrs killed renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1134 :: (store (s8) into %ir.arrayidx1); ../memory.c:9:19
# Before:
bot
# After:
not available
## Instruction: B %bb.3, debug-location !1135; ../memory.c:10:2
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1136 :: (load (s32) from %stack.4); ../memory.c:8:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1136; ../memory.c:8:26
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: B %bb.1, debug-location !1131; ../memory.c:8:2
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1138; ../memory.c:11:1
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1138; ../memory.c:11:1
# Before:
not available
# After:
not available
#### Function: memset
### Basic Block: 0
## Instruction: $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
# Before:
bot
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = MOVi 0, 14, $noreg, $noreg
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: B %bb.1, debug-location !1140; ../memory.c:17:6
# Before:
not available
# After:
not available
### Basic Block: 1
## Instruction: $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1141 :: (load (s32) from %stack.3); ../memory.c:0
# Before:
bot
# After:
not available
## Instruction: $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1141 :: (load (s32) from %stack.0); ../memory.c:0
# Before:
bot
# After:
not available
## Instruction: STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
# Before:
bot
# After:
not available
## Instruction: CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1143; ../memory.c:17:2
# Before:
not available
# After:
not available
## Instruction: Bcc %bb.4, 0, killed $cpsr, debug-location !1143; ../memory.c:17:2
# Before:
not available
# After:
not available
## Instruction: B %bb.2, debug-location !1143; ../memory.c:17:2
# Before:
not available
# After:
not available
### Basic Block: 2
## Instruction: $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1146 :: (load (s32) from %stack.2); ../memory.c:18:11
# Before:
bot
# After:
not available
## Instruction: $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1146 :: (load (s32) from %stack.1); ../memory.c:18:11
# Before:
bot
# After:
not available
## Instruction: $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1146 :: (load (s32) from %stack.4); ../memory.c:18:11
# Before:
bot
# After:
not available
## Instruction: STRBrs renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1146 :: (store (s8) into %ir.arrayidx); ../memory.c:18:11
# Before:
bot
# After:
not available
## Instruction: B %bb.3, debug-location !1147; ../memory.c:19:2
# Before:
not available
# After:
not available
### Basic Block: 3
## Instruction: $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1148 :: (load (s32) from %stack.4); ../memory.c:17:26
# Before:
bot
# After:
not available
## Instruction: renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1148; ../memory.c:17:26
# Before:
not available
# After:
not available
## Instruction: STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
# Before:
bot
# After:
not available
## Instruction: B %bb.1, debug-location !1143; ../memory.c:17:2
# Before:
not available
# After:
not available
### Basic Block: 4
## Instruction: $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1150 :: (load (s32) from %stack.1); ../memory.c:20:2
# Before:
bot
# After:
not available
## Instruction: $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1150; ../memory.c:20:2
# Before:
not available
# After:
not available
## Instruction: BX_RET 14, $noreg, implicit killed $r0, debug-location !1150; ../memory.c:20:2
# Before:
not available
# After:
not available
