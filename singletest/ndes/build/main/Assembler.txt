Textual Machine Code Representation
------------------------------------

# Machine code for function ndes_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @ndes_init.ndes_ipc1_tmp, align=4
  cp#1: @ndes_ipc1, align=4
  cp#2: @ndes_init.ndes_ipc2_tmp, align=4
  cp#3: @ndes_ipc2, align=4
  cp#4: @ndes_inp, align=4
  cp#5: @ndes_key, align=4
  cp#6: @ndes_value, align=4
  cp#7: @ndes_newkey, align=4
  cp#8: @ndes_isw, align=4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !129; batchtest/ndes/ndes.c:79:9

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !130 :: (load (s32) from %stack.0); batchtest/ndes/ndes.c:0
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  CMPri renamable $r0, 10, 14, $noreg, implicit-def $cpsr, debug-location !132; batchtest/ndes/ndes.c:79:3
  Bcc %bb.4, 0, killed $cpsr, debug-location !132; batchtest/ndes/ndes.c:79:3
  B %bb.2, debug-location !132; batchtest/ndes/ndes.c:79:3

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !133 :: (load (s32) from %stack.1); batchtest/ndes/ndes.c:80:22
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !133 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:80:22
  renamable $r0 = LDRBrs killed renamable $r0, renamable $r2, 0, 14, $noreg, debug-location !133 :: (volatile load (s8) from %ir.arrayidx); batchtest/ndes/ndes.c:80:22
  renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !134 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:80:5
  STRBrs killed renamable $r0, killed renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !135 :: (store (s8) into %ir.arrayidx1); batchtest/ndes/ndes.c:80:20
  B %bb.3, debug-location !134; batchtest/ndes/ndes.c:80:5

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !136 :: (load (s32) from %stack.1); batchtest/ndes/ndes.c:79:25
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !136; batchtest/ndes/ndes.c:79:25
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !132; batchtest/ndes/ndes.c:79:3

bb.4.for.end:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.5, debug-location !140; batchtest/ndes/ndes.c:82:9

bb.5.for.cond2:
; predecessors: %bb.4, %bb.7
  successors: %bb.8, %bb.6

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !130 :: (load (s32) from %stack.2); batchtest/ndes/ndes.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  CMPri renamable $r0, 10, 14, $noreg, implicit-def $cpsr, debug-location !142; batchtest/ndes/ndes.c:82:3
  Bcc %bb.8, 0, killed $cpsr, debug-location !142; batchtest/ndes/ndes.c:82:3
  B %bb.6, debug-location !142; batchtest/ndes/ndes.c:82:3

bb.6.for.body4:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !143 :: (load (s32) from %stack.3); batchtest/ndes/ndes.c:83:22
  renamable $r0 = LDRi12 %const.2, 0, 14, $noreg, debug-location !143 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:83:22
  renamable $r0 = LDRBrs killed renamable $r0, renamable $r2, 0, 14, $noreg, debug-location !143 :: (volatile load (s8) from %ir.arrayidx5); batchtest/ndes/ndes.c:83:22
  renamable $r1 = LDRi12 %const.3, 0, 14, $noreg, debug-location !144 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:83:5
  STRBrs killed renamable $r0, killed renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !145 :: (store (s8) into %ir.arrayidx6); batchtest/ndes/ndes.c:83:20
  B %bb.7, debug-location !144; batchtest/ndes/ndes.c:83:5

bb.7.for.inc7:
; predecessors: %bb.6
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !146 :: (load (s32) from %stack.3); batchtest/ndes/ndes.c:82:25
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !146; batchtest/ndes/ndes.c:82:25
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.5, debug-location !142; batchtest/ndes/ndes.c:82:3

bb.8.for.end9:
; predecessors: %bb.5

  renamable $r1 = LDRi12 %const.4, 0, 14, $noreg, debug-location !149 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:85:14
  renamable $r0 = MOVi 35, 14, $noreg, $noreg
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !149 :: (store (s32) into `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_inp, i32 0, i32 0)`); batchtest/ndes/ndes.c:85:14
  renamable $r0 = MOVi 26, 14, $noreg, $noreg
  STRi12 killed renamable $r0, killed renamable $r1, 4, 14, $noreg, debug-location !150 :: (store (s32) into `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_inp, i32 0, i32 1)`); batchtest/ndes/ndes.c:86:14
  renamable $r1 = LDRi12 %const.5, 0, 14, $noreg, debug-location !151 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:87:14
  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !151 :: (store (s32) into `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_key, i32 0, i32 0)`); batchtest/ndes/ndes.c:87:14
  renamable $r0 = MOVi 16, 14, $noreg, $noreg
  STRi12 killed renamable $r0, killed renamable $r1, 4, 14, $noreg, debug-location !152 :: (store (s32) into `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_key, i32 0, i32 1)`); batchtest/ndes/ndes.c:88:14
  renamable $r0 = LDRi12 %const.6, 0, 14, $noreg, debug-location !153 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:90:17
  renamable $r0 = LDRi12 killed renamable $r0, 0, 14, $noreg, debug-location !153 :: (dereferenceable load (s32) from @ndes_value); batchtest/ndes/ndes.c:90:17
  renamable $r1 = LDRi12 %const.7, 0, 14, $noreg, debug-location !154 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:90:15
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !154 :: (store (s32) into @ndes_newkey); batchtest/ndes/ndes.c:90:15
  renamable $r1 = LDRi12 %const.8, 0, 14, $noreg, debug-location !155 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:91:12
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !155 :: (store (s32) into @ndes_isw); batchtest/ndes/ndes.c:91:12
  $sp = frame-destroy ADDri killed $sp, 16, 14, $noreg, $noreg, debug-location !156; batchtest/ndes/ndes.c:92:1
  BX_RET 14, $noreg, debug-location !156; batchtest/ndes/ndes.c:92:1

bb.9 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4
  CONSTPOOL_ENTRY 4, %const.4, 4
  CONSTPOOL_ENTRY 5, %const.5, 4
  CONSTPOOL_ENTRY 6, %const.6, 4
  CONSTPOOL_ENTRY 7, %const.7, 4
  CONSTPOOL_ENTRY 8, %const.8, 4

# End machine code for function ndes_init.

# Machine code for function ndes_des: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#-3: size=4, align=8, fixed, at location [SP+8]
  fi#-2: size=4, align=4, fixed, at location [SP+4]
  fi#-1: size=4, align=8, fixed, at location [SP]
  fi#0: size=8, align=4, at location [SP-16]
  fi#1: size=8, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=8, align=4, at location [SP-36]
  fi#4: size=12, align=4, at location [SP-48]
  fi#5: size=4, align=4, at location [SP-52]
  fi#6: size=4, align=4, at location [SP-56]
  fi#7: size=4, align=4, at location [SP-60]
  fi#8: size=4, align=4, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-68]
  fi#10: size=4, align=4, at location [SP-72]
  fi#11: size=4, align=4, at location [SP-76]
  fi#12: size=4, align=4, at location [SP-80]
  fi#13: size=4, align=4, at location [SP-84]
  fi#14: size=4, align=4, at location [SP-88]
  fi#15: size=4, align=4, at location [SP-92]
  fi#16: size=4, align=4, at location [SP-96]
  fi#17: size=4, align=4, at location [SP-100]
  fi#18: size=4, align=4, at location [SP-104]
  fi#19: size=4, align=4, at location [SP-108]
  fi#20: size=4, align=4, at location [SP-112]
  fi#21: size=4, align=4, at location [SP-116]
  fi#22: size=4, align=4, at location [SP-120]
  fi#23: size=4, align=4, at location [SP-124]
  fi#24: size=4, align=4, at location [SP-128]
  fi#25: size=4, align=4, at location [SP-132]
  fi#26: size=4, align=4, at location [SP-136]
  fi#27: size=4, align=4, at location [SP-140]
  fi#28: size=4, align=4, at location [SP-144]
  fi#29: size=4, align=4, at location [SP-148]
  fi#30: size=4, align=4, at location [SP-152]
  fi#31: size=4, align=4, at location [SP-156]
  fi#32: size=4, align=4, at location [SP-160]
  fi#33: size=4, align=4, at location [SP-164]
  fi#34: size=4, align=4, at location [SP-168]
  fi#35: size=4, align=4, at location [SP-172]
  fi#36: size=4, align=4, at location [SP-176]
  fi#37: size=4, align=4, at location [SP-180]
  fi#38: size=4, align=4, at location [SP-184]
  fi#39: size=4, align=4, at location [SP-188]
  fi#40: size=4, align=4, at location [SP-192]
  fi#41: size=4, align=4, at location [SP-196]
  fi#42: size=4, align=4, at location [SP-200]
  fi#43: size=4, align=4, at location [SP-204]
  fi#44: size=4, align=4, at location [SP-4]
  fi#45: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @ndes_des.initflag, align=4
  cp#1: @ndes_bit, align=4
  cp#2: @ndes_icd, align=4
  cp#3: @ndes_ipc1, align=4
  cp#4: @ndes_des.kns, align=4
  cp#5: @ndes_des.ip, align=4
  cp#6: @ndes_des.ipm, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.6, %bb.1
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 200, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  renamable $r12 = LDRi12 $r11, 16, 14, $noreg :: (load (s32) from %fixed-stack.0)
  STRi12 killed $r12, $r11, -52, 14, $noreg :: (store (s32) into %stack.7)
  renamable $r12 = LDRi12 $r11, 12, 14, $noreg :: (load (s32) from %fixed-stack.1)
  STRi12 killed $r12, $r11, -48, 14, $noreg :: (store (s32) into %stack.6)
  renamable $r12 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.2)
  STRi12 killed $r12, $r11, -44, 14, $noreg :: (store (s32) into %stack.5)
  STRi12 killed renamable $r0, $r11, -8, 14, $noreg :: (store (s32) into %ir..repack)
  STRi12 killed renamable $r1, $r11, -4, 14, $noreg :: (store (s32) into %ir.0)
  STRi12 killed renamable $r2, $r11, -16, 14, $noreg :: (store (s32) into %ir..repack5)
  STRi12 killed renamable $r3, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !158 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:127:8
  renamable $r0 = LDRi12 killed renamable $r0, 0, 14, $noreg, debug-location !158 :: (dereferenceable load (s32) from @ndes_des.initflag); batchtest/ndes/ndes.c:127:8
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !158; batchtest/ndes/ndes.c:127:8
  Bcc %bb.6, 0, killed $cpsr, debug-location !158; batchtest/ndes/ndes.c:127:8
  B %bb.1, debug-location !158; batchtest/ndes/ndes.c:127:8

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !159 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:128:14
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !159 :: (store (s32) into @ndes_des.initflag); batchtest/ndes/ndes.c:128:14
  renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !160 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:129:19
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, killed renamable $r1, 4, 14, $noreg, debug-location !160 :: (store (s32) into `i32* getelementptr inbounds ([33 x i32], [33 x i32]* @ndes_bit, i32 0, i32 1)`); batchtest/ndes/ndes.c:129:19
  renamable $r1 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r1, $r11, -60, 14, $noreg :: (store (s32) into %stack.9)
  STRi12 killed $r0, $r11, -56, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.2, debug-location !161; batchtest/ndes/ndes.c:132:11

bb.2.for.cond:
; predecessors: %bb.1, %bb.4
  successors: %bb.5, %bb.3

  $r0 = LDRi12 $r11, -60, 14, $noreg, debug-location !162 :: (load (s32) from %stack.9); batchtest/ndes/ndes.c:0
  $r1 = LDRi12 $r11, -56, 14, $noreg, debug-location !162 :: (load (s32) from %stack.8); batchtest/ndes/ndes.c:0
  STRi12 killed $r1, $r11, -68, 14, $noreg :: (store (s32) into %stack.11)
  STRi12 $r0, $r11, -64, 14, $noreg :: (store (s32) into %stack.10)
  CMPri renamable $r0, 3, 14, $noreg, implicit-def $cpsr, debug-location !164; batchtest/ndes/ndes.c:132:5
  Bcc %bb.5, 0, killed $cpsr, debug-location !164; batchtest/ndes/ndes.c:132:5
  B %bb.3, debug-location !164; batchtest/ndes/ndes.c:132:5

bb.3.for.body:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  $r2 = LDRi12 $r11, -64, 14, $noreg, debug-location !165 :: (load (s32) from %stack.10); batchtest/ndes/ndes.c:133:33
  $r0 = LDRi12 $r11, -68, 14, $noreg, debug-location !165 :: (load (s32) from %stack.11); batchtest/ndes/ndes.c:133:33
  renamable $r0 = MOVsi renamable $r0, 10, 14, $noreg, $noreg, debug-location !165; batchtest/ndes/ndes.c:133:33
  STRi12 $r0, $r11, -72, 14, $noreg :: (store (s32) into %stack.12)
  renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !166 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:133:7
  STRrs renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !167 :: (store (s32) into %ir.arrayidx); batchtest/ndes/ndes.c:133:21
  B %bb.4, debug-location !166; batchtest/ndes/ndes.c:133:7

bb.4.for.inc:
; predecessors: %bb.3
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $r0 = LDRi12 $r11, -72, 14, $noreg, debug-location !168 :: (load (s32) from %stack.12); batchtest/ndes/ndes.c:132:27
  $r1 = LDRi12 $r11, -64, 14, $noreg, debug-location !168 :: (load (s32) from %stack.10); batchtest/ndes/ndes.c:132:27
  renamable $r1 = nuw nsw ADDri renamable $r1, 1, 14, $noreg, $noreg, debug-location !168; batchtest/ndes/ndes.c:132:27
  STRi12 killed $r1, $r11, -60, 14, $noreg :: (store (s32) into %stack.9)
  STRi12 killed $r0, $r11, -56, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.2, debug-location !164; batchtest/ndes/ndes.c:132:5

bb.5.for.end:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  B %bb.6, debug-location !171; batchtest/ndes/ndes.c:134:3

bb.6.if.end:
; predecessors: %bb.0, %bb.5
  successors: %bb.16, %bb.7

  $r0 = LDRi12 $r11, -44, 14, $noreg, debug-location !172 :: (load (s32) from %stack.5); batchtest/ndes/ndes.c:136:8
  renamable $r0 = LDRi12 renamable $r0, 0, 14, $noreg, debug-location !172 :: (load (s32) from %ir.newkey); batchtest/ndes/ndes.c:136:8
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !172; batchtest/ndes/ndes.c:136:8
  Bcc %bb.16, 0, killed $cpsr, debug-location !172; batchtest/ndes/ndes.c:136:8
  B %bb.7, debug-location !172; batchtest/ndes/ndes.c:136:8

bb.7.if.then2:
; predecessors: %bb.6
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  $r1 = LDRi12 $r11, -44, 14, $noreg :: (load (s32) from %stack.5)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !173 :: (store (s32) into %ir.newkey); batchtest/ndes/ndes.c:137:13
  renamable $r1 = LDRi12 %const.2, 0, 14, $noreg, debug-location !174 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:138:29
  STRi12 renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !174 :: (store (s32) into `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 0)`); batchtest/ndes/ndes.c:138:29
  STRi12 killed renamable $r0, killed renamable $r1, 4, 14, $noreg, debug-location !175 :: (store (s32) into `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 1)`); batchtest/ndes/ndes.c:138:16
  renamable $r0 = MOVi 10, 14, $noreg, $noreg
  renamable $r1 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed $r1, $r11, -80, 14, $noreg :: (store (s32) into %stack.14)
  STRi12 killed $r0, $r11, -76, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.8, debug-location !176; batchtest/ndes/ndes.c:141:11

bb.8.for.cond3:
; predecessors: %bb.7, %bb.10
  successors: %bb.11, %bb.9

  $r0 = LDRi12 $r11, -80, 14, $noreg, debug-location !162 :: (load (s32) from %stack.14); batchtest/ndes/ndes.c:0
  $r1 = LDRi12 $r11, -76, 14, $noreg, debug-location !162 :: (load (s32) from %stack.13); batchtest/ndes/ndes.c:0
  STRi12 killed $r1, $r11, -88, 14, $noreg :: (store (s32) into %stack.16)
  STRi12 $r0, $r11, -84, 14, $noreg :: (store (s32) into %stack.15)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !178; batchtest/ndes/ndes.c:141:5
  Bcc %bb.11, 0, killed $cpsr, debug-location !178; batchtest/ndes/ndes.c:141:5
  B %bb.9, debug-location !178; batchtest/ndes/ndes.c:141:5

bb.9.for.body5:
; predecessors: %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  $r1 = LDRi12 $r11, -84, 14, $noreg, debug-location !179 :: (load (s32) from %stack.15); batchtest/ndes/ndes.c:142:31
  renamable $r0 = LDRi12 %const.2, 0, 14, $noreg, debug-location !179 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:142:31
  STRi12 $r0, $r11, -92, 14, $noreg :: (store (s32) into %stack.17)
  renamable $r0 = LDRi12 renamable $r0, 4, 14, $noreg, debug-location !179 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 1)`); batchtest/ndes/ndes.c:142:31
  STRi12 $r0, $sp, 96, 14, $noreg :: (store (s32) into %stack.20)
  renamable $r0 = LDRi12 %const.3, 0, 14, $noreg, debug-location !181 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:142:60
  STRi12 $r0, $sp, 100, 14, $noreg :: (store (s32) into %stack.19)
  renamable $r2 = LDRBrs renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !181 :: (load (s8) from %ir.arrayidx7); batchtest/ndes/ndes.c:142:60
  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !182 :: (dereferenceable load (s32) from %ir..elt28); batchtest/ndes/ndes.c:142:42
  renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !182 :: (dereferenceable load (s32) from %ir.7); batchtest/ndes/ndes.c:142:42
  renamable $r3 = MOVi 32, 14, $noreg, $noreg
  STRi12 $r3, $sp, 92, 14, $noreg :: (store (s32) into %stack.21)
  BL_pred @ndes_getbit, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !182; batchtest/ndes/ndes.c:142:42
  $r1 = LDRi12 $r11, -88, 14, $noreg, debug-location !182 :: (load (s32) from %stack.16); batchtest/ndes/ndes.c:142:42
  $r3 = LDRi12 $sp, 92, 14, $noreg, debug-location !182 :: (load (s32) from %stack.21); batchtest/ndes/ndes.c:142:42
  $r12 = LDRi12 $r11, -92, 14, $noreg, debug-location !182 :: (load (s32) from %stack.17); batchtest/ndes/ndes.c:142:42
  $lr = LDRi12 $sp, 96, 14, $noreg, debug-location !182 :: (load (s32) from %stack.20); batchtest/ndes/ndes.c:142:42
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !182; batchtest/ndes/ndes.c:142:42
  $r0 = LDRi12 $sp, 100, 14, $noreg, debug-location !183 :: (load (s32) from %stack.19); batchtest/ndes/ndes.c:142:40
  renamable $r2 = ORRrsi killed renamable $r2, killed renamable $lr, 10, 14, $noreg, $noreg, debug-location !183; batchtest/ndes/ndes.c:142:40
  STRi12 killed renamable $r2, renamable $r12, 4, 14, $noreg, debug-location !184 :: (store (s32) into `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 1)`); batchtest/ndes/ndes.c:142:18
  renamable $r2 = LDRi12 renamable $r12, 0, 14, $noreg, debug-location !185 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 0)`); batchtest/ndes/ndes.c:143:29
  STRi12 $r2, $r11, -96, 14, $noreg :: (store (s32) into %stack.18)
  renamable $r2 = MOVsi renamable $r2, 10, 14, $noreg, $noreg, debug-location !186; batchtest/ndes/ndes.c:143:31
  STRi12 killed renamable $r2, renamable $r12, 0, 14, $noreg, debug-location !187 :: (store (s32) into `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 0)`); batchtest/ndes/ndes.c:143:18
  renamable $r2 = LDRBrs killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !188 :: (load (s8) from %ir.arrayidx9); batchtest/ndes/ndes.c:144:55
  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !189 :: (dereferenceable load (s32) from %ir..elt32); batchtest/ndes/ndes.c:144:37
  renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !189 :: (dereferenceable load (s32) from %ir.12); batchtest/ndes/ndes.c:144:37
  BL_pred @ndes_getbit, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !189; batchtest/ndes/ndes.c:144:37
  $r2 = LDRi12 $r11, -96, 14, $noreg, debug-location !189 :: (load (s32) from %stack.18); batchtest/ndes/ndes.c:144:37
  $r1 = LDRi12 $r11, -92, 14, $noreg, debug-location !189 :: (load (s32) from %stack.17); batchtest/ndes/ndes.c:144:37
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !190; batchtest/ndes/ndes.c:144:35
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !191 :: (store (s32) into `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 0)`); batchtest/ndes/ndes.c:144:18
  B %bb.10, debug-location !192; batchtest/ndes/ndes.c:145:5

bb.10.for.inc13:
; predecessors: %bb.9
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  $r0 = LDRi12 $r11, -88, 14, $noreg, debug-location !193 :: (load (s32) from %stack.16); batchtest/ndes/ndes.c:141:35
  $r1 = LDRi12 $r11, -84, 14, $noreg, debug-location !193 :: (load (s32) from %stack.15); batchtest/ndes/ndes.c:141:35
  renamable $r1 = nsw SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !193; batchtest/ndes/ndes.c:141:35
  renamable $r0 = nsw SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !194; batchtest/ndes/ndes.c:141:40
  STRi12 killed $r1, $r11, -80, 14, $noreg :: (store (s32) into %stack.14)
  STRi12 killed $r0, $r11, -76, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.8, debug-location !178; batchtest/ndes/ndes.c:141:5

bb.11.for.end15:
; predecessors: %bb.8
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  renamable $r0 = MOVi 16, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 88, 14, $noreg :: (store (s32) into %stack.22)
  B %bb.12, debug-location !196; batchtest/ndes/ndes.c:148:11

bb.12.for.cond16:
; predecessors: %bb.11, %bb.14
  successors: %bb.15, %bb.13

  $r0 = LDRi12 $sp, 88, 14, $noreg, debug-location !162 :: (load (s32) from %stack.22); batchtest/ndes/ndes.c:0
  STRi12 $r0, $sp, 84, 14, $noreg :: (store (s32) into %stack.23)
  CMPri renamable $r0, 17, 14, $noreg, implicit-def $cpsr, debug-location !198; batchtest/ndes/ndes.c:148:5
  Bcc %bb.15, 0, killed $cpsr, debug-location !198; batchtest/ndes/ndes.c:148:5
  B %bb.13, debug-location !198; batchtest/ndes/ndes.c:148:5

bb.13.for.body19:
; predecessors: %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  $r0 = LDRi12 $sp, 84, 14, $noreg, debug-location !199 :: (load (s32) from %stack.23); batchtest/ndes/ndes.c:149:12
  renamable $r1 = ADDrsi renamable $r0, renamable $r0, 10, 14, $noreg, $noreg, debug-location !199; batchtest/ndes/ndes.c:149:12
  renamable $r2 = LDRi12 %const.4, 0, 14, $noreg, debug-location !199 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:149:12
  renamable $r1, renamable $r2 = LDR_PRE_REG renamable $r2(tied-def 1), killed renamable $r1, 16386, 14, $noreg, debug-location !199 :: (load (s32) from %ir.15); batchtest/ndes/ndes.c:149:12
  STRi12 $r2, $sp, 80, 14, $noreg :: (store (s32) into %stack.24)
  STRi12 killed renamable $r1, $r11, -40, 14, $noreg, debug-location !199 :: (store (s32) into %ir.14); batchtest/ndes/ndes.c:149:12
  renamable $r1 = LDRi12 renamable $r2, 4, 14, $noreg, debug-location !199 :: (load (s32) from %ir.15 + 4); batchtest/ndes/ndes.c:149:12
  renamable $r2 = LDRi12 renamable $r2, 8, 14, $noreg, debug-location !199 :: (load (s32) from %ir.15 + 8); batchtest/ndes/ndes.c:149:12
  STRi12 killed renamable $r2, $r11, -32, 14, $noreg, debug-location !199 :: (store (s32) into %ir.14 + 8); batchtest/ndes/ndes.c:149:12
  STRi12 killed renamable $r1, $r11, -36, 14, $noreg, debug-location !199 :: (store (s32) into %ir.14 + 4); batchtest/ndes/ndes.c:149:12
  renamable $r1 = SUBri $r11, 40, 14, $noreg, $noreg
  BL_pred @ndes_ks, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, debug-location !200; batchtest/ndes/ndes.c:150:7
  $r1 = LDRi12 $sp, 80, 14, $noreg, debug-location !200 :: (load (s32) from %stack.24); batchtest/ndes/ndes.c:150:7
  renamable $r0 = LDRi12 $r11, -40, 14, $noreg, debug-location !202 :: (dereferenceable load (s32) from %ir.17); batchtest/ndes/ndes.c:151:18
  renamable $r2 = LDRi12 $r11, -36, 14, $noreg, debug-location !202 :: (dereferenceable load (s32) from %ir.17 + 4); batchtest/ndes/ndes.c:151:18
  renamable $r3 = LDRi12 $r11, -32, 14, $noreg, debug-location !202 :: (dereferenceable load (s32) from %ir.17 + 8); batchtest/ndes/ndes.c:151:18
  STRi12 killed renamable $r3, renamable $r1, 8, 14, $noreg, debug-location !202 :: (store (s32) into %ir.16 + 8); batchtest/ndes/ndes.c:151:18
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !202 :: (store (s32) into %ir.16 + 4); batchtest/ndes/ndes.c:151:18
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !202 :: (store (s32) into %ir.16); batchtest/ndes/ndes.c:151:18
  B %bb.14, debug-location !203; batchtest/ndes/ndes.c:152:5

bb.14.for.inc22:
; predecessors: %bb.13
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  $r0 = LDRi12 $sp, 84, 14, $noreg, debug-location !204 :: (load (s32) from %stack.23); batchtest/ndes/ndes.c:148:29
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !204; batchtest/ndes/ndes.c:148:29
  STRi12 killed $r0, $sp, 88, 14, $noreg :: (store (s32) into %stack.22)
  B %bb.12, debug-location !198; batchtest/ndes/ndes.c:148:5

bb.15.for.end24:
; predecessors: %bb.12
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  B %bb.16, debug-location !206; batchtest/ndes/ndes.c:153:3

bb.16.if.end25:
; predecessors: %bb.6, %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -28, 14, $noreg, debug-location !208 :: (store (s32) into %ir.l); batchtest/ndes/ndes.c:155:19
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !210 :: (store (s32) into %ir.r); batchtest/ndes/ndes.c:155:10
  renamable $r0 = MOVi 64, 14, $noreg, $noreg
  renamable $r1 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 72, 14, $noreg :: (store (s32) into %stack.26)
  STRi12 killed $r0, $sp, 76, 14, $noreg :: (store (s32) into %stack.25)
  B %bb.17, debug-location !211; batchtest/ndes/ndes.c:158:9

bb.17.for.cond26:
; predecessors: %bb.16, %bb.19
  successors: %bb.20, %bb.18

  $r0 = LDRi12 $sp, 72, 14, $noreg, debug-location !162 :: (load (s32) from %stack.26); batchtest/ndes/ndes.c:0
  $r1 = LDRi12 $sp, 76, 14, $noreg, debug-location !162 :: (load (s32) from %stack.25); batchtest/ndes/ndes.c:0
  STRi12 killed $r1, $sp, 64, 14, $noreg :: (store (s32) into %stack.28)
  STRi12 $r0, $sp, 68, 14, $noreg :: (store (s32) into %stack.27)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !213; batchtest/ndes/ndes.c:158:3
  Bcc %bb.20, 0, killed $cpsr, debug-location !213; batchtest/ndes/ndes.c:158:3
  B %bb.18, debug-location !213; batchtest/ndes/ndes.c:158:3

bb.18.for.body29:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  $r1 = LDRi12 $sp, 68, 14, $noreg, debug-location !214 :: (load (s32) from %stack.27); batchtest/ndes/ndes.c:159:19
  renamable $r0 = LDRi12 $r11, -24, 14, $noreg, debug-location !214 :: (dereferenceable load (s32) from %ir.r30); batchtest/ndes/ndes.c:159:19
  STRi12 $r0, $sp, 48, 14, $noreg :: (store (s32) into %stack.32)
  renamable $r0 = MOVsi renamable $r0, 10, 14, $noreg, $noreg, debug-location !215; batchtest/ndes/ndes.c:159:21
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !217 :: (store (s32) into %ir.r32); batchtest/ndes/ndes.c:159:12
  renamable $r0 = LDRi12 %const.5, 0, 14, $noreg, debug-location !218 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:160:45
  STRi12 $r0, $sp, 56, 14, $noreg :: (store (s32) into %stack.30)
  renamable $r2 = LDRBrs renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !218 :: (volatile load (s8) from %ir.arrayidx34); batchtest/ndes/ndes.c:160:45
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !219 :: (dereferenceable load (s32) from %ir..elt20); batchtest/ndes/ndes.c:160:27
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !219 :: (dereferenceable load (s32) from %ir.21); batchtest/ndes/ndes.c:160:27
  renamable $r3 = MOVi 32, 14, $noreg, $noreg
  STRi12 $r3, $sp, 52, 14, $noreg :: (store (s32) into %stack.31)
  BL_pred @ndes_getbit, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !219; batchtest/ndes/ndes.c:160:27
  $r12 = LDRi12 $sp, 48, 14, $noreg, debug-location !219 :: (load (s32) from %stack.32); batchtest/ndes/ndes.c:160:27
  $r1 = LDRi12 $sp, 64, 14, $noreg, debug-location !219 :: (load (s32) from %stack.28); batchtest/ndes/ndes.c:160:27
  $r3 = LDRi12 $sp, 52, 14, $noreg, debug-location !219 :: (load (s32) from %stack.31); batchtest/ndes/ndes.c:160:27
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !219; batchtest/ndes/ndes.c:160:27
  $r0 = LDRi12 $sp, 56, 14, $noreg, debug-location !220 :: (load (s32) from %stack.30); batchtest/ndes/ndes.c:160:25
  renamable $r2 = ORRrsi killed renamable $r2, killed renamable $r12, 10, 14, $noreg, $noreg, debug-location !220; batchtest/ndes/ndes.c:160:25
  STRi12 killed renamable $r2, $r11, -24, 14, $noreg, debug-location !222 :: (store (s32) into %ir.r38); batchtest/ndes/ndes.c:160:12
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !223 :: (dereferenceable load (s32) from %ir.l39); batchtest/ndes/ndes.c:161:19
  STRi12 $r2, $sp, 60, 14, $noreg :: (store (s32) into %stack.29)
  renamable $r2 = MOVsi renamable $r2, 10, 14, $noreg, $noreg, debug-location !224; batchtest/ndes/ndes.c:161:21
  STRi12 killed renamable $r2, $r11, -28, 14, $noreg, debug-location !226 :: (store (s32) into %ir.l41); batchtest/ndes/ndes.c:161:12
  renamable $r2 = LDRBrs killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !227 :: (volatile load (s8) from %ir.arrayidx43); batchtest/ndes/ndes.c:162:45
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !228 :: (dereferenceable load (s32) from %ir..elt24); batchtest/ndes/ndes.c:162:27
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !228 :: (dereferenceable load (s32) from %ir.26); batchtest/ndes/ndes.c:162:27
  BL_pred @ndes_getbit, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !228; batchtest/ndes/ndes.c:162:27
  $r1 = LDRi12 $sp, 60, 14, $noreg, debug-location !228 :: (load (s32) from %stack.29); batchtest/ndes/ndes.c:162:27
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !229; batchtest/ndes/ndes.c:162:25
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !231 :: (store (s32) into %ir.l47); batchtest/ndes/ndes.c:162:12
  B %bb.19, debug-location !232; batchtest/ndes/ndes.c:163:3

bb.19.for.inc48:
; predecessors: %bb.18
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  $r0 = LDRi12 $sp, 64, 14, $noreg, debug-location !233 :: (load (s32) from %stack.28); batchtest/ndes/ndes.c:158:33
  $r1 = LDRi12 $sp, 68, 14, $noreg, debug-location !233 :: (load (s32) from %stack.27); batchtest/ndes/ndes.c:158:33
  renamable $r1 = nsw SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !233; batchtest/ndes/ndes.c:158:33
  renamable $r0 = nsw SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !234; batchtest/ndes/ndes.c:158:38
  STRi12 killed $r1, $sp, 72, 14, $noreg :: (store (s32) into %stack.26)
  STRi12 killed $r0, $sp, 76, 14, $noreg :: (store (s32) into %stack.25)
  B %bb.17, debug-location !213; batchtest/ndes/ndes.c:158:3

bb.20.for.end51:
; predecessors: %bb.17
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  renamable $r0 = MOVi 16, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 44, 14, $noreg :: (store (s32) into %stack.33)
  B %bb.21, debug-location !236; batchtest/ndes/ndes.c:165:9

bb.21.for.cond52:
; predecessors: %bb.20, %bb.26
  successors: %bb.27, %bb.22

  $r0 = LDRi12 $sp, 44, 14, $noreg, debug-location !162 :: (load (s32) from %stack.33); batchtest/ndes/ndes.c:0
  STRi12 $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.34)
  CMPri renamable $r0, 17, 14, $noreg, implicit-def $cpsr, debug-location !238; batchtest/ndes/ndes.c:165:3
  Bcc %bb.27, 0, killed $cpsr, debug-location !238; batchtest/ndes/ndes.c:165:3
  B %bb.22, debug-location !238; batchtest/ndes/ndes.c:165:3

bb.22.for.body55:
; predecessors: %bb.21
  successors: %bb.23, %bb.24

  $r0 = LDRi12 $r11, -48, 14, $noreg, debug-location !240 :: (load (s32) from %stack.6); batchtest/ndes/ndes.c:166:12
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !240; batchtest/ndes/ndes.c:166:12
  Bcc %bb.24, 1, killed $cpsr, debug-location !240; batchtest/ndes/ndes.c:166:12
  B %bb.23, debug-location !240; batchtest/ndes/ndes.c:166:12

bb.23.cond.true:
; predecessors: %bb.22
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  $r0 = LDRi12 $sp, 40, 14, $noreg, debug-location !241 :: (load (s32) from %stack.34); batchtest/ndes/ndes.c:166:26
  renamable $r0 = nuw nsw RSBri renamable $r0, 17, 14, $noreg, $noreg, debug-location !241; batchtest/ndes/ndes.c:166:26
  STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.35)
  B %bb.25, debug-location !240; batchtest/ndes/ndes.c:166:12

bb.24.cond.false:
; predecessors: %bb.22
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  $r0 = LDRi12 $sp, 40, 14, $noreg :: (load (s32) from %stack.34)
  STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.35)
  B %bb.25, debug-location !240; batchtest/ndes/ndes.c:166:12

bb.25.cond.end:
; predecessors: %bb.24, %bb.23
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !240 :: (load (s32) from %stack.35); batchtest/ndes/ndes.c:166:12
  renamable $r0 = LDRi12 $r11, -28, 14, $noreg, debug-location !242 :: (dereferenceable load (s32) from %ir.l58); batchtest/ndes/ndes.c:167:22
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 10, 14, $noreg, $noreg, debug-location !243; batchtest/ndes/ndes.c:167:5
  renamable $r3 = LDRi12 %const.4, 0, 14, $noreg, debug-location !243 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:167:5
  renamable $r1, renamable $r3 = LDR_PRE_REG renamable $r3(tied-def 1), killed renamable $r1, 16386, 14, $noreg, debug-location !243 :: (load (s32) from %ir..elt14); batchtest/ndes/ndes.c:167:5
  renamable $r2 = LDRi12 renamable $r3, 4, 14, $noreg, debug-location !243 :: (load (s32) from %ir.30); batchtest/ndes/ndes.c:167:5
  renamable $r3 = LDRi12 killed renamable $r3, 8, 14, $noreg, debug-location !243 :: (load (s32) from %ir.32); batchtest/ndes/ndes.c:167:5
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !243; batchtest/ndes/ndes.c:167:5
  renamable $r12 = SUBri $r11, 20, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !243 :: (store (s32) into stack); batchtest/ndes/ndes.c:167:5
  BL_pred @ndes_cyfun, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, debug-location !243; batchtest/ndes/ndes.c:167:5
  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !244 :: (dereferenceable load (s32) from %ir.r60); batchtest/ndes/ndes.c:168:16
  renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !245 :: (dereferenceable load (s32) from %ir.ic); batchtest/ndes/ndes.c:168:8
  renamable $r0 = EORrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !245; batchtest/ndes/ndes.c:168:8
  STRi12 renamable $r0, $r11, -20, 14, $noreg, debug-location !245 :: (store (s32) into %ir.ic); batchtest/ndes/ndes.c:168:8
  renamable $r1 = LDRi12 $r11, -28, 14, $noreg, debug-location !246 :: (dereferenceable load (s32) from %ir.l61); batchtest/ndes/ndes.c:169:19
  STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !248 :: (store (s32) into %ir.r62); batchtest/ndes/ndes.c:169:12
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !250 :: (store (s32) into %ir.l63); batchtest/ndes/ndes.c:170:12
  B %bb.26, debug-location !251; batchtest/ndes/ndes.c:171:3

bb.26.for.inc64:
; predecessors: %bb.25
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  $r0 = LDRi12 $sp, 40, 14, $noreg, debug-location !252 :: (load (s32) from %stack.34); batchtest/ndes/ndes.c:165:27
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !252; batchtest/ndes/ndes.c:165:27
  STRi12 killed $r0, $sp, 44, 14, $noreg :: (store (s32) into %stack.33)
  B %bb.21, debug-location !238; batchtest/ndes/ndes.c:165:3

bb.27.for.end66:
; predecessors: %bb.21
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  $r1 = LDRi12 $r11, -52, 14, $noreg, debug-location !254 :: (load (s32) from %stack.7); batchtest/ndes/ndes.c:173:13
  renamable $r0 = LDRi12 $r11, -24, 14, $noreg, debug-location !254 :: (dereferenceable load (s32) from %ir.r67); batchtest/ndes/ndes.c:173:13
  STRi12 renamable $r0, $r11, -20, 14, $noreg, debug-location !255 :: (store (s32) into %ir.ic); batchtest/ndes/ndes.c:173:6
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !256 :: (dereferenceable load (s32) from %ir.l68); batchtest/ndes/ndes.c:174:17
  STRi12 killed renamable $r2, $r11, -24, 14, $noreg, debug-location !258 :: (store (s32) into %ir.r69); batchtest/ndes/ndes.c:174:10
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !260 :: (store (s32) into %ir.l70); batchtest/ndes/ndes.c:175:10
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !262 :: (store (s32) into %ir.l71); batchtest/ndes/ndes.c:176:27
  STRi12 killed renamable $r0, renamable $r1, 4, 14, $noreg, debug-location !264 :: (store (s32) into %ir.r72); batchtest/ndes/ndes.c:176:14
  renamable $r0 = MOVi 64, 14, $noreg, $noreg
  renamable $r1 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 28, 14, $noreg :: (store (s32) into %stack.37)
  STRi12 killed $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.36)
  B %bb.28, debug-location !265; batchtest/ndes/ndes.c:179:9

bb.28.for.cond73:
; predecessors: %bb.27, %bb.30
  successors: %bb.31, %bb.29

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !162 :: (load (s32) from %stack.37); batchtest/ndes/ndes.c:0
  $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !162 :: (load (s32) from %stack.36); batchtest/ndes/ndes.c:0
  STRi12 killed $r1, $sp, 20, 14, $noreg :: (store (s32) into %stack.39)
  STRi12 $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.38)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !267; batchtest/ndes/ndes.c:179:3
  Bcc %bb.31, 0, killed $cpsr, debug-location !267; batchtest/ndes/ndes.c:179:3
  B %bb.29, debug-location !267; batchtest/ndes/ndes.c:179:3

bb.29.for.body76:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  $r2 = LDRi12 $r11, -52, 14, $noreg, debug-location !268 :: (load (s32) from %stack.7); batchtest/ndes/ndes.c:180:27
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !268 :: (load (s32) from %stack.38); batchtest/ndes/ndes.c:180:27
  renamable $r0 = LDRi12 renamable $r2, 4, 14, $noreg, debug-location !268 :: (load (s32) from %ir.r77); batchtest/ndes/ndes.c:180:27
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.42)
  renamable $r0 = MOVsi renamable $r0, 10, 14, $noreg, $noreg, debug-location !269; batchtest/ndes/ndes.c:180:29
  STRi12 killed renamable $r0, renamable $r2, 4, 14, $noreg, debug-location !271 :: (store (s32) into %ir.r79); batchtest/ndes/ndes.c:180:16
  renamable $r0 = LDRi12 %const.6, 0, 14, $noreg, debug-location !272 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:181:54
  STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.41)
  renamable $r2 = LDRBrs renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !272 :: (volatile load (s8) from %ir.arrayidx81); batchtest/ndes/ndes.c:181:54
  renamable $r0 = LDRi12 $r11, -28, 14, $noreg, debug-location !273 :: (dereferenceable load (s32) from %ir..elt); batchtest/ndes/ndes.c:181:35
  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !273 :: (dereferenceable load (s32) from %ir.42); batchtest/ndes/ndes.c:181:35
  renamable $r3 = MOVi 32, 14, $noreg, $noreg
  STRi12 $r3, $sp, 4, 14, $noreg :: (store (s32) into %stack.43)
  BL_pred @ndes_getbit, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !273; batchtest/ndes/ndes.c:181:35
  $r1 = LDRi12 $sp, 20, 14, $noreg, debug-location !273 :: (load (s32) from %stack.39); batchtest/ndes/ndes.c:181:35
  $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !273 :: (load (s32) from %stack.43); batchtest/ndes/ndes.c:181:35
  $r12 = LDRi12 $r11, -52, 14, $noreg, debug-location !273 :: (load (s32) from %stack.7); batchtest/ndes/ndes.c:181:35
  $lr = LDRi12 $sp, 8, 14, $noreg, debug-location !273 :: (load (s32) from %stack.42); batchtest/ndes/ndes.c:181:35
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !273; batchtest/ndes/ndes.c:181:35
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !274 :: (load (s32) from %stack.41); batchtest/ndes/ndes.c:181:33
  renamable $r2 = ORRrsi killed renamable $r2, killed renamable $lr, 10, 14, $noreg, $noreg, debug-location !274; batchtest/ndes/ndes.c:181:33
  STRi12 killed renamable $r2, renamable $r12, 4, 14, $noreg, debug-location !276 :: (store (s32) into %ir.r85); batchtest/ndes/ndes.c:181:16
  renamable $r2 = LDRi12 renamable $r12, 0, 14, $noreg, debug-location !277 :: (load (s32) from %ir.l86); batchtest/ndes/ndes.c:182:27
  STRi12 $r2, $sp, 16, 14, $noreg :: (store (s32) into %stack.40)
  renamable $r2 = MOVsi renamable $r2, 10, 14, $noreg, $noreg, debug-location !278; batchtest/ndes/ndes.c:182:29
  STRi12 killed renamable $r2, renamable $r12, 0, 14, $noreg, debug-location !280 :: (store (s32) into %ir.l88); batchtest/ndes/ndes.c:182:16
  renamable $r2 = LDRBrs killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !281 :: (volatile load (s8) from %ir.arrayidx90); batchtest/ndes/ndes.c:183:54
  renamable $r0 = LDRi12 $r11, -28, 14, $noreg, debug-location !282 :: (dereferenceable load (s32) from %ir..elt10); batchtest/ndes/ndes.c:183:35
  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !282 :: (dereferenceable load (s32) from %ir.47); batchtest/ndes/ndes.c:183:35
  BL_pred @ndes_getbit, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !282; batchtest/ndes/ndes.c:183:35
  $r2 = LDRi12 $sp, 16, 14, $noreg, debug-location !282 :: (load (s32) from %stack.40); batchtest/ndes/ndes.c:183:35
  $r1 = LDRi12 $r11, -52, 14, $noreg, debug-location !282 :: (load (s32) from %stack.7); batchtest/ndes/ndes.c:183:35
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !283; batchtest/ndes/ndes.c:183:33
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !285 :: (store (s32) into %ir.l94); batchtest/ndes/ndes.c:183:16
  B %bb.30, debug-location !286; batchtest/ndes/ndes.c:184:3

bb.30.for.inc95:
; predecessors: %bb.29
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !287 :: (load (s32) from %stack.39); batchtest/ndes/ndes.c:179:33
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !287 :: (load (s32) from %stack.38); batchtest/ndes/ndes.c:179:33
  renamable $r1 = nsw SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !287; batchtest/ndes/ndes.c:179:33
  renamable $r0 = nsw SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !288; batchtest/ndes/ndes.c:179:38
  STRi12 killed $r1, $sp, 28, 14, $noreg :: (store (s32) into %stack.37)
  STRi12 killed $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.36)
  B %bb.28, debug-location !267; batchtest/ndes/ndes.c:179:3

bb.31.for.end98:
; predecessors: %bb.28

  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !290; batchtest/ndes/ndes.c:185:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !290; batchtest/ndes/ndes.c:185:1
  BX_RET 14, $noreg, debug-location !290; batchtest/ndes/ndes.c:185:1

bb.32 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4
  CONSTPOOL_ENTRY 4, %const.4, 4
  CONSTPOOL_ENTRY 5, %const.5, 4
  CONSTPOOL_ENTRY 6, %const.6, 4

# End machine code for function ndes_des.

# Machine code for function ndes_getbit: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=4, at location [SP-8]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-20]
Constant Pool:
  cp#0: @ndes_bit, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.2, %bb.1
  liveins: $r0, $r1, $r2, $r3
  $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 20
  STRi12 $r3, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r2, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir..repack)
  STRi12 killed renamable $r1, $sp, 16, 14, $noreg :: (store (s32) into %ir.0)
  CMPrr renamable $r2, renamable $r3, 14, $noreg, implicit-def $cpsr, debug-location !293; batchtest/ndes/ndes.c:335:8
  Bcc %bb.2, 12, killed $cpsr, debug-location !293; batchtest/ndes/ndes.c:335:8
  B %bb.1, debug-location !293; batchtest/ndes/ndes.c:335:8

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !294 :: (load (s32) from %stack.1); batchtest/ndes/ndes.c:336:12
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !294 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:336:12
  renamable $r0 = LDRrs killed renamable $r0, renamable $r1, 16386, 14, $noreg, debug-location !294 :: (load (s32) from %ir.arrayidx); batchtest/ndes/ndes.c:336:12
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !295 :: (dereferenceable load (s32) from %ir.r); batchtest/ndes/ndes.c:336:39
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !296; batchtest/ndes/ndes.c:336:30
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.3, debug-location !297; batchtest/ndes/ndes.c:336:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !298 :: (load (s32) from %stack.1); batchtest/ndes/ndes.c:338:28
  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !298 :: (load (s32) from %stack.2); batchtest/ndes/ndes.c:338:28
  renamable $r1 = nsw SUBrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !298; batchtest/ndes/ndes.c:338:28
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !299 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:338:12
  renamable $r0 = LDRrs killed renamable $r0, killed renamable $r1, 16386, 14, $noreg, debug-location !299 :: (load (s32) from %ir.arrayidx1); batchtest/ndes/ndes.c:338:12
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !300 :: (dereferenceable load (s32) from %ir.l); batchtest/ndes/ndes.c:338:47
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !301; batchtest/ndes/ndes.c:338:38
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.3, debug-location !302; batchtest/ndes/ndes.c:338:5

bb.3.return:
; predecessors: %bb.1, %bb.2

  $r0 = LDRi12 $sp, 0, 14, $noreg :: (load (s32) from %stack.3)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !303; batchtest/ndes/ndes.c:0
  $r0 = MOVi 1, 1, killed $cpsr, $noreg, implicit renamable $r0, debug-location !303; batchtest/ndes/ndes.c:0
  $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !304; batchtest/ndes/ndes.c:339:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !304; batchtest/ndes/ndes.c:339:1

bb.4 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function ndes_getbit.

# Machine code for function ndes_ks: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-44]
  fi#7: size=4, align=4, at location [SP-48]
  fi#8: size=4, align=4, at location [SP-52]
  fi#9: size=4, align=4, at location [SP-56]
  fi#10: size=4, align=4, at location [SP-60]
  fi#11: size=4, align=4, at location [SP-64]
  fi#12: size=4, align=4, at location [SP-68]
  fi#13: size=4, align=4, at location [SP-72]
  fi#14: size=4, align=4, at location [SP-76]
  fi#15: size=4, align=4, at location [SP-4]
  fi#16: size=4, align=4, at location [SP-8]
  fi#17: size=4, align=4, at location [SP-12]
  fi#18: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @ndes_icd, align=4
  cp#1: @ndes_ipc2, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.4, %bb.1
  liveins: $r0, $r1, $r4, $r5, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r5, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r5, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 64, 14, $noreg, $noreg
  STRi12 killed $r1, $r11, -16, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !307; batchtest/ndes/ndes.c:345:15
  Bcc %bb.4, 0, killed $cpsr, debug-location !307; batchtest/ndes/ndes.c:345:15
  B %bb.1, debug-location !307; batchtest/ndes/ndes.c:345:15

bb.1.lor.lhs.false:
; predecessors: %bb.0
  successors: %bb.4, %bb.2

  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !309 :: (load (s32) from %stack.0); batchtest/ndes/ndes.c:345:25
  CMPri renamable $r0, 2, 14, $noreg, implicit-def $cpsr, debug-location !309; batchtest/ndes/ndes.c:345:25
  Bcc %bb.4, 0, killed $cpsr, debug-location !309; batchtest/ndes/ndes.c:345:25
  B %bb.2, debug-location !309; batchtest/ndes/ndes.c:345:25

bb.2.lor.lhs.false2:
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !311 :: (load (s32) from %stack.0); batchtest/ndes/ndes.c:345:35
  CMPri renamable $r0, 9, 14, $noreg, implicit-def $cpsr, debug-location !311; batchtest/ndes/ndes.c:345:35
  Bcc %bb.4, 0, killed $cpsr, debug-location !311; batchtest/ndes/ndes.c:345:35
  B %bb.3, debug-location !311; batchtest/ndes/ndes.c:345:35

bb.3.lor.lhs.false4:
; predecessors: %bb.2
  successors: %bb.4, %bb.5

  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !313 :: (load (s32) from %stack.0); batchtest/ndes/ndes.c:345:8
  CMPri renamable $r0, 16, 14, $noreg, implicit-def $cpsr, debug-location !313; batchtest/ndes/ndes.c:345:8
  Bcc %bb.5, 1, killed $cpsr, debug-location !313; batchtest/ndes/ndes.c:345:8
  B %bb.4, debug-location !313; batchtest/ndes/ndes.c:345:8

bb.4.if.then:
; predecessors: %bb.0, %bb.1, %bb.2, %bb.3
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !314 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:346:29
  renamable $r0 = LDRi12 renamable $r1, 4, 14, $noreg, debug-location !314 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 1)`); batchtest/ndes/ndes.c:346:29
  renamable $r2 = ANDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !315; batchtest/ndes/ndes.c:346:55
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r2, 226, 14, $noreg, $noreg, debug-location !316; batchtest/ndes/ndes.c:346:31
  renamable $r0 = MOVsi killed renamable $r0, 11, 14, $noreg, $noreg, debug-location !317; batchtest/ndes/ndes.c:346:65
  STRi12 killed renamable $r0, renamable $r1, 4, 14, $noreg, debug-location !318 :: (store (s32) into `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 1)`); batchtest/ndes/ndes.c:346:16
  renamable $r0 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !319 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 0)`); batchtest/ndes/ndes.c:347:29
  renamable $r2 = ANDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !320; batchtest/ndes/ndes.c:347:55
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r2, 226, 14, $noreg, $noreg, debug-location !321; batchtest/ndes/ndes.c:347:31
  renamable $r0 = MOVsi killed renamable $r0, 11, 14, $noreg, $noreg, debug-location !322; batchtest/ndes/ndes.c:347:65
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !323 :: (store (s32) into `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 0)`); batchtest/ndes/ndes.c:347:16
  B %bb.10, debug-location !324; batchtest/ndes/ndes.c:348:3

bb.5.if.else:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -20, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.6, debug-location !325; batchtest/ndes/ndes.c:350:11

bb.6.for.cond:
; predecessors: %bb.5, %bb.8
  successors: %bb.9, %bb.7

  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !326 :: (load (s32) from %stack.2); batchtest/ndes/ndes.c:0
  STRi12 $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.3)
  CMPri renamable $r0, 3, 14, $noreg, implicit-def $cpsr, debug-location !328; batchtest/ndes/ndes.c:350:5
  Bcc %bb.9, 0, killed $cpsr, debug-location !328; batchtest/ndes/ndes.c:350:5
  B %bb.7, debug-location !328; batchtest/ndes/ndes.c:350:5

bb.7.for.body:
; predecessors: %bb.6
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !329 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:351:31
  renamable $r0 = LDRi12 renamable $r1, 4, 14, $noreg, debug-location !329 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 1)`); batchtest/ndes/ndes.c:351:31
  renamable $r2 = ANDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !330; batchtest/ndes/ndes.c:351:57
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r2, 226, 14, $noreg, $noreg, debug-location !331; batchtest/ndes/ndes.c:351:33
  renamable $r0 = MOVsi killed renamable $r0, 11, 14, $noreg, $noreg, debug-location !332; batchtest/ndes/ndes.c:351:67
  STRi12 killed renamable $r0, renamable $r1, 4, 14, $noreg, debug-location !333 :: (store (s32) into `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 1)`); batchtest/ndes/ndes.c:351:18
  renamable $r0 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !334 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 0)`); batchtest/ndes/ndes.c:352:31
  renamable $r2 = ANDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !335; batchtest/ndes/ndes.c:352:57
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r2, 226, 14, $noreg, $noreg, debug-location !336; batchtest/ndes/ndes.c:352:33
  renamable $r0 = MOVsi killed renamable $r0, 11, 14, $noreg, $noreg, debug-location !337; batchtest/ndes/ndes.c:352:67
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !338 :: (store (s32) into `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 0)`); batchtest/ndes/ndes.c:352:18
  B %bb.8, debug-location !339; batchtest/ndes/ndes.c:353:5

bb.8.for.inc:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $r11, -24, 14, $noreg, debug-location !340 :: (load (s32) from %stack.3); batchtest/ndes/ndes.c:350:27
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !340; batchtest/ndes/ndes.c:350:27
  STRi12 killed $r0, $r11, -20, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.6, debug-location !328; batchtest/ndes/ndes.c:350:5

bb.9.for.end:
; predecessors: %bb.6
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  B %bb.10

bb.10.if.end:
; predecessors: %bb.9, %bb.4
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  $r1 = LDRi12 $r11, -16, 14, $noreg :: (load (s32) from %stack.1)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !343 :: (store (s32) into %ir.l19); batchtest/ndes/ndes.c:356:37
  STRi12 renamable $r0, renamable $r1, 4, 14, $noreg, debug-location !345 :: (store (s32) into %ir.c); batchtest/ndes/ndes.c:356:25
  STRi12 killed renamable $r0, renamable $r1, 8, 14, $noreg, debug-location !347 :: (store (s32) into %ir.r); batchtest/ndes/ndes.c:356:13
  renamable $r0 = MOVi 48, 14, $noreg, $noreg
  renamable $r1 = MOVi 32, 14, $noreg, $noreg
  renamable $r2 = MOVi 16, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 36, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r1, $r11, -32, 14, $noreg :: (store (s32) into %stack.5)
  STRi12 killed $r0, $r11, -28, 14, $noreg :: (store (s32) into %stack.4)
  B %bb.11, debug-location !348; batchtest/ndes/ndes.c:359:9

bb.11.for.cond20:
; predecessors: %bb.10, %bb.13
  successors: %bb.14, %bb.12

  $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !326 :: (load (s32) from %stack.6); batchtest/ndes/ndes.c:0
  $r1 = LDRi12 $r11, -32, 14, $noreg, debug-location !326 :: (load (s32) from %stack.5); batchtest/ndes/ndes.c:0
  $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !326 :: (load (s32) from %stack.4); batchtest/ndes/ndes.c:0
  STRi12 killed $r2, $sp, 24, 14, $noreg :: (store (s32) into %stack.9)
  STRi12 killed $r1, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
  STRi12 $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !350; batchtest/ndes/ndes.c:359:3
  Bcc %bb.14, 0, killed $cpsr, debug-location !350; batchtest/ndes/ndes.c:359:3
  B %bb.12, debug-location !350; batchtest/ndes/ndes.c:359:3

bb.12.for.body22:
; predecessors: %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !351 :: (load (s32) from %stack.1); batchtest/ndes/ndes.c:360:25
  $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !351 :: (load (s32) from %stack.7); batchtest/ndes/ndes.c:360:25
  renamable $r4 = LDRi12 renamable $r2, 8, 14, $noreg, debug-location !351 :: (load (s32) from %ir.r23); batchtest/ndes/ndes.c:360:25
  renamable $r0 = MOVsi renamable $r4, 10, 14, $noreg, $noreg, debug-location !352; batchtest/ndes/ndes.c:360:27
  STRi12 killed renamable $r0, renamable $r2, 8, 14, $noreg, debug-location !354 :: (store (s32) into %ir.r25); batchtest/ndes/ndes.c:360:15
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg, debug-location !355 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:362:40
  STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.12)
  renamable $r2 = LDRBrs renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !355 :: (load (s8) from %ir.arrayidx); batchtest/ndes/ndes.c:362:40
  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !356 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:362:17
  STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.14)
  renamable $r0 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !356 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 0)`); batchtest/ndes/ndes.c:362:17
  renamable $r1 = LDRi12 renamable $r1, 4, 14, $noreg, debug-location !356 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 1)`); batchtest/ndes/ndes.c:362:17
  renamable $r3 = MOVi 28, 14, $noreg, $noreg
  STRi12 $r3, $sp, 8, 14, $noreg :: (store (s32) into %stack.13)
  BL_pred @ndes_getbit, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !356; batchtest/ndes/ndes.c:362:17
  $r2 = LDRi12 $sp, 28, 14, $noreg, debug-location !356 :: (load (s32) from %stack.8); batchtest/ndes/ndes.c:362:17
  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !356 :: (load (s32) from %stack.14); batchtest/ndes/ndes.c:362:17
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !356 :: (load (s32) from %stack.13); batchtest/ndes/ndes.c:362:17
  $lr = LDRi12 $r11, -16, 14, $noreg, debug-location !356 :: (load (s32) from %stack.1); batchtest/ndes/ndes.c:362:17
  $r12 = MOVr $r0, 14, $noreg, $noreg, debug-location !356; batchtest/ndes/ndes.c:362:17
  $r0 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.12)
  $r5 = MOVi 255, 14, $noreg, $noreg
  $r5 = ORRri $r5, 65280, 14, $noreg, $noreg
  STRi12 $r5, $sp, 16, 14, $noreg :: (store (s32) into %stack.11)
  renamable $r12 = ANDrr killed renamable $r12, renamable $r5, 14, $noreg, $noreg, debug-location !357; batchtest/ndes/ndes.c:361:33
  renamable $r12 = ORRrsi killed renamable $r12, killed renamable $r4, 10, 14, $noreg, $noreg, debug-location !358; batchtest/ndes/ndes.c:361:31
  STRi12 killed renamable $r12, renamable $lr, 8, 14, $noreg, debug-location !360 :: (store (s32) into %ir.r30); batchtest/ndes/ndes.c:361:15
  renamable $r4 = LDRi12 renamable $lr, 4, 14, $noreg, debug-location !361 :: (load (s32) from %ir.c31); batchtest/ndes/ndes.c:363:25
  renamable $r12 = MOVsi renamable $r4, 10, 14, $noreg, $noreg, debug-location !362; batchtest/ndes/ndes.c:363:27
  STRi12 killed renamable $r12, renamable $lr, 4, 14, $noreg, debug-location !364 :: (store (s32) into %ir.c33); batchtest/ndes/ndes.c:363:15
  renamable $r2 = LDRBrs renamable $r0, renamable $r2, 0, 14, $noreg, debug-location !365 :: (load (s8) from %ir.arrayidx35); batchtest/ndes/ndes.c:365:40
  renamable $r0 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !366 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 0)`); batchtest/ndes/ndes.c:365:17
  renamable $r1 = LDRi12 renamable $r1, 4, 14, $noreg, debug-location !366 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 1)`); batchtest/ndes/ndes.c:365:17
  BL_pred @ndes_getbit, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !366; batchtest/ndes/ndes.c:365:17
  $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !366 :: (load (s32) from %stack.9); batchtest/ndes/ndes.c:365:17
  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !366 :: (load (s32) from %stack.14); batchtest/ndes/ndes.c:365:17
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !366 :: (load (s32) from %stack.13); batchtest/ndes/ndes.c:365:17
  $lr = LDRi12 $r11, -16, 14, $noreg, debug-location !366 :: (load (s32) from %stack.1); batchtest/ndes/ndes.c:365:17
  $r12 = MOVr $r0, 14, $noreg, $noreg, debug-location !366; batchtest/ndes/ndes.c:365:17
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !367 :: (load (s32) from %stack.12); batchtest/ndes/ndes.c:364:33
  renamable $r12 = ANDrr killed renamable $r12, renamable $r5, 14, $noreg, $noreg, debug-location !367; batchtest/ndes/ndes.c:364:33
  renamable $r12 = ORRrsi killed renamable $r12, killed renamable $r4, 10, 14, $noreg, $noreg, debug-location !368; batchtest/ndes/ndes.c:364:31
  STRi12 killed renamable $r12, renamable $lr, 4, 14, $noreg, debug-location !370 :: (store (s32) into %ir.c41); batchtest/ndes/ndes.c:364:15
  renamable $r12 = LDRi12 renamable $lr, 0, 14, $noreg, debug-location !371 :: (load (s32) from %ir.l42); batchtest/ndes/ndes.c:366:25
  STRi12 $r12, $sp, 20, 14, $noreg :: (store (s32) into %stack.10)
  renamable $r12 = MOVsi renamable $r12, 10, 14, $noreg, $noreg, debug-location !372; batchtest/ndes/ndes.c:366:27
  STRi12 killed renamable $r12, renamable $lr, 0, 14, $noreg, debug-location !374 :: (store (s32) into %ir.l44); batchtest/ndes/ndes.c:366:15
  renamable $r2 = LDRBrs killed renamable $r0, renamable $r2, 0, 14, $noreg, debug-location !375 :: (load (s8) from %ir.arrayidx46); batchtest/ndes/ndes.c:368:40
  renamable $r0 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !376 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 0)`); batchtest/ndes/ndes.c:368:17
  renamable $r1 = LDRi12 killed renamable $r1, 4, 14, $noreg, debug-location !376 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 1)`); batchtest/ndes/ndes.c:368:17
  BL_pred @ndes_getbit, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !376; batchtest/ndes/ndes.c:368:17
  $r3 = LDRi12 $sp, 16, 14, $noreg, debug-location !376 :: (load (s32) from %stack.11); batchtest/ndes/ndes.c:368:17
  $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !376 :: (load (s32) from %stack.10); batchtest/ndes/ndes.c:368:17
  $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !376 :: (load (s32) from %stack.1); batchtest/ndes/ndes.c:368:17
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !377; batchtest/ndes/ndes.c:367:33
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !378; batchtest/ndes/ndes.c:367:31
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !380 :: (store (s32) into %ir.l52); batchtest/ndes/ndes.c:367:15
  B %bb.13, debug-location !381; batchtest/ndes/ndes.c:369:3

bb.13.for.inc53:
; predecessors: %bb.12
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !382 :: (load (s32) from %stack.9); batchtest/ndes/ndes.c:359:42
  $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !382 :: (load (s32) from %stack.8); batchtest/ndes/ndes.c:359:42
  $r2 = LDRi12 $sp, 32, 14, $noreg, debug-location !382 :: (load (s32) from %stack.7); batchtest/ndes/ndes.c:359:42
  renamable $r2 = nsw SUBri renamable $r2, 1, 14, $noreg, $noreg, debug-location !382; batchtest/ndes/ndes.c:359:42
  renamable $r1 = nsw SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !383; batchtest/ndes/ndes.c:359:47
  renamable $r0 = nsw SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !384; batchtest/ndes/ndes.c:359:52
  STRi12 killed $r2, $sp, 36, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r1, $r11, -32, 14, $noreg :: (store (s32) into %stack.5)
  STRi12 killed $r0, $r11, -28, 14, $noreg :: (store (s32) into %stack.4)
  B %bb.11, debug-location !350; batchtest/ndes/ndes.c:359:3

bb.14.for.end56:
; predecessors: %bb.11

  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg, debug-location !386; batchtest/ndes/ndes.c:370:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r5, def $r11, def $lr, debug-location !386; batchtest/ndes/ndes.c:370:1
  BX_RET 14, $noreg, debug-location !386; batchtest/ndes/ndes.c:370:1

bb.15 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function ndes_ks.

# Machine code for function ndes_cyfun: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP]
  fi#0: size=12, align=4, at location [SP-36]
  fi#1: size=16, align=4, at location [SP-52]
  fi#2: size=12, align=4, at location [SP-64]
  fi#3: size=9, align=1, at location [SP-73]
  fi#4: size=4, align=4, at location [SP-80]
  fi#5: size=4, align=4, at location [SP-84]
  fi#6: size=4, align=4, at location [SP-88]
  fi#7: size=4, align=4, at location [SP-92]
  fi#8: size=4, align=4, at location [SP-96]
  fi#9: size=4, align=4, at location [SP-100]
  fi#10: size=4, align=4, at location [SP-104]
  fi#11: size=4, align=4, at location [SP-108]
  fi#12: size=4, align=4, at location [SP-112]
  fi#13: size=4, align=4, at location [SP-116]
  fi#14: size=4, align=4, at location [SP-120]
  fi#15: size=4, align=4, at location [SP-124]
  fi#16: size=4, align=4, at location [SP-128]
  fi#17: size=4, align=4, at location [SP-132]
  fi#18: size=4, align=4, at location [SP-136]
  fi#19: size=4, align=4, at location [SP-140]
  fi#20: size=4, align=4, at location [SP-144]
  fi#21: size=4, align=4, at location [SP-148]
  fi#22: size=4, align=4, at location [SP-4]
  fi#23: size=4, align=4, at location [SP-8]
  fi#24: size=4, align=4, at location [SP-12]
  fi#25: size=4, align=4, at location [SP-16]
  fi#26: size=4, align=4, at location [SP-20]
  fi#27: size=4, align=4, at location [SP-24]
Constant Pool:
  cp#0: @__const.ndes_cyfun.ibin, align=4
  cp#1: @ndes_cyfun.ipp, align=4
  cp#2: @ndes_bit, align=4
  cp#3: @ndes_cyfun.is, align=4
  cp#4: @ndes_cyfun.iet, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r6, -16
  frame-setup CFI_INSTRUCTION offset $r5, -20
  frame-setup CFI_INSTRUCTION offset $r4, -24
  $r11 = frame-setup ADDri killed $sp, 16, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 124, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 44, 14, $noreg :: (store (s32) into %stack.10)
  dead renamable $r0 = KILL renamable $r3
  dead renamable $r0 = KILL renamable $r2
  dead renamable $r0 = KILL renamable $r1
  renamable $r0 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
  STRi12 killed $r0, $sp, 48, 14, $noreg :: (store (s32) into %stack.9)
  STRi12 killed renamable $r1, $r11, -28, 14, $noreg :: (store (s32) into %ir..repack)
  STRi12 killed renamable $r2, $r11, -24, 14, $noreg :: (store (s32) into %ir.0)
  STRi12 killed renamable $r3, $r11, -20, 14, $noreg :: (store (s32) into %ir.1)
  renamable $r2 = LDRi12 %const.0, 0, 14, $noreg, debug-location !388 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:281:17
  STRi12 $r2, $sp, 52, 14, $noreg :: (store (s32) into %stack.8)
  renamable $r0 = LDRBi12 renamable $r2, 0, 14, $noreg, debug-location !388 :: (volatile dereferenceable load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)`); batchtest/ndes/ndes.c:281:17
  renamable $r3 = LDRBi12 renamable $r2, 1, 14, $noreg, debug-location !388 :: (volatile dereferenceable load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 1); batchtest/ndes/ndes.c:281:17
  renamable $r1 = LDRBi12 renamable $r2, 2, 14, $noreg, debug-location !388 :: (volatile dereferenceable load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 2); batchtest/ndes/ndes.c:281:17
  renamable $r12 = LDRBi12 renamable $r2, 3, 14, $noreg, debug-location !388 :: (volatile dereferenceable load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 3); batchtest/ndes/ndes.c:281:17
  renamable $r1 = ORRrsi killed renamable $r1, killed renamable $r12, 66, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r3, 66, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 130, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  STRi12 killed renamable $r0, $r11, -44, 14, $noreg, debug-location !388 :: (volatile store (s32) into %ir.2); batchtest/ndes/ndes.c:281:17
  renamable $r1 = LDRBi12 renamable $r2, 13, 14, $noreg, debug-location !388 :: (volatile dereferenceable load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 13); batchtest/ndes/ndes.c:281:17
  $r3 = MOVr $r2, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  renamable $r0, renamable $r3 = LDRB_PRE_IMM renamable $r3(tied-def 1), 12, 14, $noreg, debug-location !388 :: (volatile load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 12); batchtest/ndes/ndes.c:281:17
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 66, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  renamable $r1 = LDRBi12 renamable $r3, 2, 14, $noreg, debug-location !388 :: (volatile dereferenceable load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 14); batchtest/ndes/ndes.c:281:17
  renamable $r3 = LDRBi12 killed renamable $r3, 3, 14, $noreg, debug-location !388 :: (volatile dereferenceable load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 15); batchtest/ndes/ndes.c:281:17
  renamable $r1 = ORRrsi killed renamable $r1, killed renamable $r3, 66, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 130, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !388 :: (volatile store (s32) into %ir.2 + 12); batchtest/ndes/ndes.c:281:17
  renamable $r1 = LDRBi12 renamable $r2, 9, 14, $noreg, debug-location !388 :: (volatile dereferenceable load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 9); batchtest/ndes/ndes.c:281:17
  $r3 = MOVr $r2, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  renamable $r0, renamable $r3 = LDRB_PRE_IMM renamable $r3(tied-def 1), 8, 14, $noreg, debug-location !388 :: (volatile load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 8); batchtest/ndes/ndes.c:281:17
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 66, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  renamable $r1 = LDRBi12 renamable $r3, 2, 14, $noreg, debug-location !388 :: (volatile dereferenceable load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 10); batchtest/ndes/ndes.c:281:17
  renamable $r3 = LDRBi12 killed renamable $r3, 3, 14, $noreg, debug-location !388 :: (volatile dereferenceable load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 11); batchtest/ndes/ndes.c:281:17
  renamable $r1 = ORRrsi killed renamable $r1, killed renamable $r3, 66, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 130, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  STRi12 killed renamable $r0, $r11, -36, 14, $noreg, debug-location !388 :: (volatile store (s32) into %ir.2 + 8); batchtest/ndes/ndes.c:281:17
  renamable $r1 = LDRBi12 renamable $r2, 5, 14, $noreg, debug-location !388 :: (volatile dereferenceable load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 5); batchtest/ndes/ndes.c:281:17
  renamable $r0, renamable $r2 = LDRB_PRE_IMM renamable $r2(tied-def 1), 4, 14, $noreg, debug-location !388 :: (volatile load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 4); batchtest/ndes/ndes.c:281:17
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 66, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  renamable $r1 = LDRBi12 renamable $r2, 2, 14, $noreg, debug-location !388 :: (volatile dereferenceable load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 6); batchtest/ndes/ndes.c:281:17
  renamable $r2 = LDRBi12 killed renamable $r2, 3, 14, $noreg, debug-location !388 :: (volatile dereferenceable load (s8) from `i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__const.ndes_cyfun.ibin, i32 0, i32 0)` + 7); batchtest/ndes/ndes.c:281:17
  renamable $r1 = ORRrsi killed renamable $r1, killed renamable $r2, 66, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 130, 14, $noreg, $noreg, debug-location !388; batchtest/ndes/ndes.c:281:17
  STRi12 killed renamable $r0, $r11, -40, 14, $noreg, debug-location !388 :: (volatile store (s32) into %ir.2 + 4); batchtest/ndes/ndes.c:281:17
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -56, 14, $noreg, debug-location !390 :: (store (s32) into %ir.l1); batchtest/ndes/ndes.c:290:22
  STRi12 renamable $r0, $r11, -52, 14, $noreg, debug-location !392 :: (store (s32) into %ir.c); batchtest/ndes/ndes.c:290:15
  STRi12 killed renamable $r0, $r11, -48, 14, $noreg, debug-location !394 :: (store (s32) into %ir.r); batchtest/ndes/ndes.c:290:8
  renamable $r0 = MOVi 16, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 68, 14, $noreg, debug-location !395 :: (volatile store (s32) into %ir.j); batchtest/ndes/ndes.c:293:11
  renamable $r0 = MOVi 48, 14, $noreg, $noreg
  renamable $r1 = MOVi 32, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 56, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r0, $sp, 60, 14, $noreg :: (store (s32) into %stack.6)
  B %bb.1, debug-location !396; batchtest/ndes/ndes.c:293:9

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.2, %bb.4

  $r0 = LDRi12 $sp, 56, 14, $noreg, debug-location !397 :: (load (s32) from %stack.7); batchtest/ndes/ndes.c:0
  $r1 = LDRi12 $sp, 60, 14, $noreg, debug-location !397 :: (load (s32) from %stack.6); batchtest/ndes/ndes.c:0
  STRi12 killed $r1, $sp, 36, 14, $noreg :: (store (s32) into %stack.12)
  STRi12 killed $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.11)
  renamable $r0 = LDRi12 $sp, 68, 14, $noreg, debug-location !398 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:293:33
  CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !400; batchtest/ndes/ndes.c:293:3
  Bcc %bb.4, 11, killed $cpsr, debug-location !400; batchtest/ndes/ndes.c:293:3
  B %bb.2, debug-location !400; batchtest/ndes/ndes.c:293:3

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r3 = LDRi12 $sp, 44, 14, $noreg, debug-location !401 :: (load (s32) from %stack.10); batchtest/ndes/ndes.c:294:17
  $r4 = LDRi12 $sp, 36, 14, $noreg, debug-location !401 :: (load (s32) from %stack.12); batchtest/ndes/ndes.c:294:17
  $r5 = LDRi12 $sp, 40, 14, $noreg, debug-location !401 :: (load (s32) from %stack.11); batchtest/ndes/ndes.c:294:17
  renamable $r12 = LDRi12 $r11, -48, 14, $noreg, debug-location !401 :: (dereferenceable load (s32) from %ir.r2); batchtest/ndes/ndes.c:294:17
  renamable $r0 = MOVsi renamable $r12, 10, 14, $noreg, $noreg, debug-location !402; batchtest/ndes/ndes.c:294:19
  renamable $r1 = LDRi12 $sp, 68, 14, $noreg, debug-location !403 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:294:38
  renamable $lr = LDRi12 %const.4, 0, 14, $noreg, debug-location !404 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:294:33
  renamable $r1 = LDRrs renamable $lr, killed renamable $r1, 16386, 14, $noreg, debug-location !404 :: (volatile load (s32) from %ir.arrayidx); batchtest/ndes/ndes.c:294:33
  renamable $r2 = LDRi12 %const.2, 0, 14, $noreg, debug-location !405 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:294:30
  renamable $r6 = LDRrs renamable $r2, killed renamable $r1, 16386, 14, $noreg, debug-location !405 :: (load (s32) from %ir.arrayidx3); batchtest/ndes/ndes.c:294:30
  renamable $r1 = MOVi 1, 14, $noreg, $noreg
  renamable $r12 = ORRrsi renamable $r1, killed renamable $r12, 10, 14, $noreg, $noreg, debug-location !407; batchtest/ndes/ndes.c:294:26
  TSTrr killed renamable $r6, renamable $r3, 14, $noreg, implicit-def $cpsr, debug-location !407; batchtest/ndes/ndes.c:294:26
  $r0 = MOVr killed renamable $r12, 1, killed $cpsr, $noreg, implicit renamable $r0, debug-location !407; batchtest/ndes/ndes.c:294:26
  STRi12 killed renamable $r0, $r11, -48, 14, $noreg, debug-location !409 :: (store (s32) into %ir.r4); batchtest/ndes/ndes.c:294:10
  renamable $r12 = LDRi12 $r11, -52, 14, $noreg, debug-location !410 :: (dereferenceable load (s32) from %ir.c5); batchtest/ndes/ndes.c:295:17
  renamable $r0 = MOVsi renamable $r12, 10, 14, $noreg, $noreg, debug-location !411; batchtest/ndes/ndes.c:295:19
  renamable $r5 = LDRrs renamable $lr, renamable $r5, 16386, 14, $noreg, debug-location !412 :: (volatile load (s32) from %ir.arrayidx7); batchtest/ndes/ndes.c:295:33
  renamable $r5 = LDRrs renamable $r2, killed renamable $r5, 16386, 14, $noreg, debug-location !413 :: (load (s32) from %ir.arrayidx8); batchtest/ndes/ndes.c:295:30
  renamable $r12 = ORRrsi renamable $r1, killed renamable $r12, 10, 14, $noreg, $noreg, debug-location !415; batchtest/ndes/ndes.c:295:26
  TSTrr killed renamable $r5, renamable $r3, 14, $noreg, implicit-def $cpsr, debug-location !415; batchtest/ndes/ndes.c:295:26
  $r0 = MOVr killed renamable $r12, 1, killed $cpsr, $noreg, implicit renamable $r0, debug-location !415; batchtest/ndes/ndes.c:295:26
  STRi12 killed renamable $r0, $r11, -52, 14, $noreg, debug-location !417 :: (store (s32) into %ir.c13); batchtest/ndes/ndes.c:295:10
  renamable $r12 = LDRi12 $r11, -56, 14, $noreg, debug-location !418 :: (dereferenceable load (s32) from %ir.l14); batchtest/ndes/ndes.c:296:17
  renamable $r0 = MOVsi renamable $r12, 10, 14, $noreg, $noreg, debug-location !419; batchtest/ndes/ndes.c:296:19
  renamable $lr = LDRrs killed renamable $lr, renamable $r4, 16386, 14, $noreg, debug-location !420 :: (volatile load (s32) from %ir.arrayidx16); batchtest/ndes/ndes.c:296:33
  renamable $r2 = LDRrs killed renamable $r2, killed renamable $lr, 16386, 14, $noreg, debug-location !421 :: (load (s32) from %ir.arrayidx17); batchtest/ndes/ndes.c:296:30
  renamable $r1 = ORRrsi killed renamable $r1, killed renamable $r12, 10, 14, $noreg, $noreg, debug-location !423; batchtest/ndes/ndes.c:296:26
  TSTrr killed renamable $r2, renamable $r3, 14, $noreg, implicit-def $cpsr, debug-location !423; batchtest/ndes/ndes.c:296:26
  $r0 = MOVr killed renamable $r1, 1, killed $cpsr, $noreg, implicit renamable $r0, debug-location !423; batchtest/ndes/ndes.c:296:26
  STRi12 killed renamable $r0, $r11, -56, 14, $noreg, debug-location !425 :: (store (s32) into %ir.l22); batchtest/ndes/ndes.c:296:10
  B %bb.3, debug-location !426; batchtest/ndes/ndes.c:297:3

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !427 :: (load (s32) from %stack.12); batchtest/ndes/ndes.c:293:42
  $r1 = LDRi12 $sp, 40, 14, $noreg, debug-location !427 :: (load (s32) from %stack.11); batchtest/ndes/ndes.c:293:42
  renamable $r2 = LDRi12 $sp, 68, 14, $noreg, debug-location !427 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:293:42
  renamable $r2 = nsw SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !427; batchtest/ndes/ndes.c:293:42
  STRi12 killed renamable $r2, $sp, 68, 14, $noreg, debug-location !427 :: (volatile store (s32) into %ir.j); batchtest/ndes/ndes.c:293:42
  renamable $r1 = nsw SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !428; batchtest/ndes/ndes.c:293:47
  renamable $r0 = nsw SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !429; batchtest/ndes/ndes.c:293:52
  STRi12 killed $r1, $sp, 56, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r0, $sp, 60, 14, $noreg :: (store (s32) into %stack.6)
  B %bb.1, debug-location !400; batchtest/ndes/ndes.c:293:3

bb.4.for.end:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r1 = LDRi12 $r11, -20, 14, $noreg, debug-location !431 :: (dereferenceable load (s32) from %ir.r25); batchtest/ndes/ndes.c:298:13
  renamable $r0 = LDRi12 $r11, -48, 14, $noreg, debug-location !433 :: (dereferenceable load (s32) from %ir.r26); batchtest/ndes/ndes.c:298:8
  renamable $r0 = EORrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !433; batchtest/ndes/ndes.c:298:8
  STRi12 killed renamable $r0, $r11, -48, 14, $noreg, debug-location !433 :: (store (s32) into %ir.r26); batchtest/ndes/ndes.c:298:8
  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !434 :: (dereferenceable load (s32) from %ir.c27); batchtest/ndes/ndes.c:299:13
  renamable $r0 = LDRi12 $r11, -52, 14, $noreg, debug-location !436 :: (dereferenceable load (s32) from %ir.c28); batchtest/ndes/ndes.c:299:8
  renamable $r0 = EORrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !436; batchtest/ndes/ndes.c:299:8
  STRi12 killed renamable $r0, $r11, -52, 14, $noreg, debug-location !436 :: (store (s32) into %ir.c28); batchtest/ndes/ndes.c:299:8
  renamable $r1 = LDRi12 $r11, -28, 14, $noreg, debug-location !437 :: (dereferenceable load (s32) from %ir.l30); batchtest/ndes/ndes.c:300:13
  renamable $r0 = LDRi12 $r11, -56, 14, $noreg, debug-location !439 :: (dereferenceable load (s32) from %ir.l31); batchtest/ndes/ndes.c:300:8
  renamable $r0 = EORrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !439; batchtest/ndes/ndes.c:300:8
  STRi12 killed renamable $r0, $r11, -56, 14, $noreg, debug-location !439 :: (store (s32) into %ir.l31); batchtest/ndes/ndes.c:300:8
  renamable $r0 = LDRi12 $r11, -56, 14, $noreg, debug-location !444 :: (dereferenceable load (s32) from %ir.l36); batchtest/ndes/ndes.c:302:35
  renamable $r2 = LDRi12 $r11, -52, 14, $noreg, debug-location !440 :: (dereferenceable load (s32) from %ir.c38); batchtest/ndes/ndes.c:301:35
  renamable $r1 = LDRi12 $r11, -48, 14, $noreg, debug-location !442 :: (dereferenceable load (s32) from %ir.r35); batchtest/ndes/ndes.c:301:68
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r2, 130, 14, $noreg, $noreg, debug-location !443; batchtest/ndes/ndes.c:301:45
  renamable $r0 = MOVsi killed renamable $r0, 66, 14, $noreg, $noreg, debug-location !445; batchtest/ndes/ndes.c:302:37
  renamable $r2 = ADDrsi killed renamable $r0, killed renamable $r2, 67, 14, $noreg, $noreg, debug-location !448; batchtest/ndes/ndes.c:302:44
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 68, 14, $noreg, debug-location !449 :: (volatile store (s32) into %ir.j); batchtest/ndes/ndes.c:305:11
  renamable $r0 = MOVi 5, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 24, 14, $noreg :: (store (s32) into %stack.15)
  STRi12 killed $r1, $sp, 28, 14, $noreg :: (store (s32) into %stack.14)
  STRi12 killed $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.5, debug-location !450; batchtest/ndes/ndes.c:305:9

bb.5.for.cond40:
; predecessors: %bb.4, %bb.7
  successors: %bb.6, %bb.8

  $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !397 :: (load (s32) from %stack.15); batchtest/ndes/ndes.c:0
  $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !397 :: (load (s32) from %stack.14); batchtest/ndes/ndes.c:0
  $r2 = LDRi12 $sp, 32, 14, $noreg, debug-location !397 :: (load (s32) from %stack.13); batchtest/ndes/ndes.c:0
  STRi12 killed $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.18)
  STRi12 killed $r1, $sp, 16, 14, $noreg :: (store (s32) into %stack.17)
  STRi12 killed $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.16)
  renamable $r0 = LDRi12 $sp, 68, 14, $noreg, debug-location !451 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:305:23
  CMPri killed renamable $r0, 4, 14, $noreg, implicit-def $cpsr, debug-location !453; batchtest/ndes/ndes.c:305:3
  Bcc %bb.8, 12, killed $cpsr, debug-location !453; batchtest/ndes/ndes.c:305:3
  B %bb.6, debug-location !453; batchtest/ndes/ndes.c:305:3

bb.6.for.body42:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !454 :: (load (s32) from %stack.18); batchtest/ndes/ndes.c:306:16
  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !454 :: (load (s32) from %stack.16); batchtest/ndes/ndes.c:306:16
  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !454 :: (load (s32) from %stack.17); batchtest/ndes/ndes.c:306:16
  renamable $r3 = ANDri renamable $r1, 63, 14, $noreg, $noreg, debug-location !454; batchtest/ndes/ndes.c:306:16
  renamable $r12 = LDRi12 $sp, 68, 14, $noreg, debug-location !455 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:306:10
  renamable $r1 = SUBri $r11, 65, 14, $noreg, $noreg
  STRBrs killed renamable $r3, renamable $r1, killed renamable $r12, 0, 14, $noreg, debug-location !457 :: (store (s8) into %ir.arrayidx44); batchtest/ndes/ndes.c:306:14
  renamable $r0 = ANDri renamable $r0, 63, 14, $noreg, $noreg, debug-location !458; batchtest/ndes/ndes.c:307:16
  STRBrs killed renamable $r0, killed renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !460 :: (store (s8) into %ir.arrayidx47); batchtest/ndes/ndes.c:307:14
  B %bb.7, debug-location !461; batchtest/ndes/ndes.c:310:3

bb.7.for.inc50:
; predecessors: %bb.6
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !462 :: (load (s32) from %stack.18); batchtest/ndes/ndes.c:309:12
  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !462 :: (load (s32) from %stack.17); batchtest/ndes/ndes.c:309:12
  $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !462 :: (load (s32) from %stack.16); batchtest/ndes/ndes.c:309:12
  renamable $r2 = MOVsi renamable $r2, 51, 14, $noreg, $noreg, debug-location !462; batchtest/ndes/ndes.c:309:12
  renamable $r1 = MOVsi renamable $r1, 51, 14, $noreg, $noreg, debug-location !463; batchtest/ndes/ndes.c:308:12
  renamable $r3 = LDRi12 $sp, 68, 14, $noreg, debug-location !464 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:305:32
  renamable $r3 = nsw ADDri killed renamable $r3, 1, 14, $noreg, $noreg, debug-location !464; batchtest/ndes/ndes.c:305:32
  STRi12 killed renamable $r3, $sp, 68, 14, $noreg, debug-location !464 :: (volatile store (s32) into %ir.j); batchtest/ndes/ndes.c:305:32
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !465; batchtest/ndes/ndes.c:305:37
  STRi12 killed $r2, $sp, 24, 14, $noreg :: (store (s32) into %stack.15)
  STRi12 killed $r1, $sp, 28, 14, $noreg :: (store (s32) into %stack.14)
  STRi12 killed $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.5, debug-location !453; batchtest/ndes/ndes.c:305:3

bb.8.for.end52:
; predecessors: %bb.5
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 8, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 64, 14, $noreg, debug-location !467 :: (volatile store (s32) into %ir.jj); batchtest/ndes/ndes.c:315:12
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.19)
  B %bb.9, debug-location !468; batchtest/ndes/ndes.c:315:9

bb.9.for.cond53:
; predecessors: %bb.8, %bb.11
  successors: %bb.10, %bb.12

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !397 :: (load (s32) from %stack.19); batchtest/ndes/ndes.c:0
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.20)
  renamable $r0 = LDRi12 $sp, 64, 14, $noreg, debug-location !469 :: (volatile dereferenceable load (s32) from %ir.jj); batchtest/ndes/ndes.c:315:17
  CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !471; batchtest/ndes/ndes.c:315:3
  Bcc %bb.12, 11, killed $cpsr, debug-location !471; batchtest/ndes/ndes.c:315:3
  B %bb.10, debug-location !471; batchtest/ndes/ndes.c:315:3

bb.10.for.body56:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  renamable $r1 = LDRi12 $sp, 64, 14, $noreg, debug-location !472 :: (volatile dereferenceable load (s32) from %ir.jj); batchtest/ndes/ndes.c:316:14
  renamable $r0 = SUBri $r11, 65, 14, $noreg, $noreg
  renamable $r0 = LDRBrs killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !473 :: (load (s8) from %ir.arrayidx57); batchtest/ndes/ndes.c:316:9
  STRi12 killed renamable $r0, $sp, 68, 14, $noreg, debug-location !474 :: (volatile store (s32) into %ir.j); batchtest/ndes/ndes.c:316:7
  renamable $r0 = LDRi12 $sp, 68, 14, $noreg, debug-location !475 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:317:16
  renamable $r2 = ANDri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !476; batchtest/ndes/ndes.c:317:26
  renamable $r0 = LDRi12 $sp, 68, 14, $noreg, debug-location !477 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:317:39
  renamable $r1 = MOVi 1, 14, $noreg, $noreg
  renamable $r0 = ANDrsi renamable $r1, killed renamable $r0, 43, 14, $noreg, $noreg, debug-location !478; batchtest/ndes/ndes.c:317:50
  renamable $r2 = ORRrsi killed renamable $r0, killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !479; batchtest/ndes/ndes.c:317:33
  renamable $r0 = LDRi12 $sp, 68, 14, $noreg, debug-location !480 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:318:16
  renamable $r3 = ANDri killed renamable $r0, 2, 14, $noreg, $noreg, debug-location !481; batchtest/ndes/ndes.c:318:26
  renamable $r0 = LDRi12 $sp, 68, 14, $noreg, debug-location !482 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:318:37
  renamable $r0 = ANDri killed renamable $r0, 4, 14, $noreg, $noreg, debug-location !483; batchtest/ndes/ndes.c:318:39
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r3, 18, 14, $noreg, $noreg, debug-location !484; batchtest/ndes/ndes.c:318:33
  renamable $r12 = LDRi12 $sp, 68, 14, $noreg, debug-location !485 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:319:18
  renamable $r3 = MOVi 2, 14, $noreg, $noreg
  renamable $r3 = ANDrsi killed renamable $r3, killed renamable $r12, 19, 14, $noreg, $noreg, debug-location !486; batchtest/ndes/ndes.c:319:28
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !487; batchtest/ndes/ndes.c:319:12
  renamable $r3 = LDRi12 $sp, 68, 14, $noreg, debug-location !488 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:319:41
  renamable $r1 = ANDrsi killed renamable $r1, killed renamable $r3, 35, 14, $noreg, $noreg, debug-location !489; batchtest/ndes/ndes.c:319:52
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !490; batchtest/ndes/ndes.c:319:35
  renamable $r1 = LDRi12 $sp, 64, 14, $noreg, debug-location !491 :: (volatile dereferenceable load (s32) from %ir.jj); batchtest/ndes/ndes.c:320:31
  renamable $r3 = ADDrsi killed renamable $r0, renamable $r0, 26, 14, $noreg, $noreg, debug-location !492; batchtest/ndes/ndes.c:320:11
  renamable $r0 = LDRi12 %const.3, 0, 14, $noreg, debug-location !492 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:320:11
  renamable $r0 = ADDrsi killed renamable $r0, killed renamable $r3, 34, 14, $noreg, $noreg, debug-location !492; batchtest/ndes/ndes.c:320:11
  renamable $r2 = ADDrsi killed renamable $r2, renamable $r2, 26, 14, $noreg, $noreg, debug-location !492; batchtest/ndes/ndes.c:320:11
  renamable $r0 = ADDrsi killed renamable $r0, killed renamable $r2, 18, 14, $noreg, $noreg, debug-location !492; batchtest/ndes/ndes.c:320:11
  renamable $r1 = LDRrs killed renamable $r0, killed renamable $r1, 16386, 14, $noreg, debug-location !492 :: (volatile load (s32) from %ir.arrayidx76); batchtest/ndes/ndes.c:320:11
  renamable $r0 = SUBri $r11, 44, 14, $noreg, $noreg
  renamable $r0 = LDRBrs killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !493 :: (volatile load (s8) from %ir.arrayidx78); batchtest/ndes/ndes.c:321:28
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.21)
  B %bb.11, debug-location !494; batchtest/ndes/ndes.c:322:3

bb.11.for.inc81:
; predecessors: %bb.10
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !493 :: (load (s32) from %stack.20); batchtest/ndes/ndes.c:321:28
  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !493 :: (load (s32) from %stack.21); batchtest/ndes/ndes.c:321:28
  renamable $r0 = ANDri renamable $r0, 255, 14, $noreg, $noreg, debug-location !493; batchtest/ndes/ndes.c:321:28
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r1, 34, 14, $noreg, $noreg, debug-location !496; batchtest/ndes/ndes.c:321:26
  renamable $r1 = LDRi12 $sp, 64, 14, $noreg, debug-location !497 :: (volatile dereferenceable load (s32) from %ir.jj); batchtest/ndes/ndes.c:315:28
  renamable $r1 = nsw SUBri killed renamable $r1, 1, 14, $noreg, $noreg, debug-location !497; batchtest/ndes/ndes.c:315:28
  STRi12 killed renamable $r1, $sp, 64, 14, $noreg, debug-location !497 :: (volatile store (s32) into %ir.jj); batchtest/ndes/ndes.c:315:28
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.19)
  B %bb.9, debug-location !471; batchtest/ndes/ndes.c:315:3

bb.12.for.end83:
; predecessors: %bb.9
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  $r1 = LDRi12 $sp, 48, 14, $noreg :: (load (s32) from %stack.9)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !499 :: (store (s32) into %ir.iout); batchtest/ndes/ndes.c:324:9
  renamable $r0 = MOVi 32, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 68, 14, $noreg, debug-location !500 :: (volatile store (s32) into %ir.j); batchtest/ndes/ndes.c:328:11
  B %bb.13, debug-location !501; batchtest/ndes/ndes.c:328:9

bb.13.for.cond84:
; predecessors: %bb.12, %bb.15
  successors: %bb.14, %bb.16

  renamable $r0 = LDRi12 $sp, 68, 14, $noreg, debug-location !502 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:328:17
  CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !504; batchtest/ndes/ndes.c:328:3
  Bcc %bb.16, 11, killed $cpsr, debug-location !504; batchtest/ndes/ndes.c:328:3
  B %bb.14, debug-location !504; batchtest/ndes/ndes.c:328:3

bb.14.for.body87:
; predecessors: %bb.13
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  $r1 = LDRi12 $sp, 48, 14, $noreg, debug-location !505 :: (load (s32) from %stack.9); batchtest/ndes/ndes.c:329:15
  renamable $r0 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !505 :: (load (s32) from %ir.iout); batchtest/ndes/ndes.c:329:15
  renamable $r0 = MOVsi killed renamable $r0, 10, 14, $noreg, $noreg, debug-location !506; batchtest/ndes/ndes.c:329:21
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !507 :: (store (s32) into %ir.iout); batchtest/ndes/ndes.c:329:11
  B %bb.15, debug-location !508; batchtest/ndes/ndes.c:329:5

bb.15.for.inc89:
; predecessors: %bb.14
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $r0 = LDRi12 $sp, 68, 14, $noreg, debug-location !509 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:328:26
  renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !509; batchtest/ndes/ndes.c:328:26
  STRi12 killed renamable $r0, $sp, 68, 14, $noreg, debug-location !509 :: (volatile store (s32) into %ir.j); batchtest/ndes/ndes.c:328:26
  B %bb.13, debug-location !504; batchtest/ndes/ndes.c:328:3

bb.16.for.end91:
; predecessors: %bb.13

  $r1 = LDRi12 $sp, 48, 14, $noreg, debug-location !512 :: (load (s32) from %stack.9); batchtest/ndes/ndes.c:330:22
  $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !512 :: (load (s32) from %stack.20); batchtest/ndes/ndes.c:330:22
  renamable $r2 = LDRi12 $sp, 68, 14, $noreg, debug-location !512 :: (volatile dereferenceable load (s32) from %ir.j); batchtest/ndes/ndes.c:330:22
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg, debug-location !513 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:330:17
  renamable $r2 = LDRrs killed renamable $r0, killed renamable $r2, 16386, 14, $noreg, debug-location !513 :: (volatile load (s32) from %ir.arrayidx92); batchtest/ndes/ndes.c:330:17
  renamable $r0 = LDRi12 %const.2, 0, 14, $noreg, debug-location !514 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:330:14
  renamable $r3 = LDRrs killed renamable $r0, killed renamable $r2, 16386, 14, $noreg, debug-location !514 :: (load (s32) from %ir.arrayidx93); batchtest/ndes/ndes.c:330:14
  renamable $r0 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !516 :: (load (s32) from %ir.iout); batchtest/ndes/ndes.c:330:9
  renamable $r2 = ORRri renamable $r0, 1, 14, $noreg, $noreg, debug-location !516; batchtest/ndes/ndes.c:330:9
  TSTrr killed renamable $r3, killed renamable $r12, 14, $noreg, implicit-def $cpsr, debug-location !516; batchtest/ndes/ndes.c:330:9
  $r0 = MOVr killed renamable $r2, 1, killed $cpsr, $noreg, implicit renamable $r0, debug-location !516; batchtest/ndes/ndes.c:330:9
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !516 :: (store (s32) into %ir.iout); batchtest/ndes/ndes.c:330:9
  $sp = frame-destroy SUBri killed $r11, 16, 14, $noreg, $noreg, debug-location !517; batchtest/ndes/ndes.c:331:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r5, def $r6, def $r10, def $r11, def $lr, debug-location !517; batchtest/ndes/ndes.c:331:1
  BX_RET 14, $noreg, debug-location !517; batchtest/ndes/ndes.c:331:1

bb.17 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4
  CONSTPOOL_ENTRY 4, %const.4, 4

# End machine code for function ndes_cyfun.

# Machine code for function ndes_return: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: @ndes_icd, align=4

bb.0.entry:
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !519 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:374:21
  renamable $r1 = LDRi12 renamable $r0, 0, 14, $noreg, debug-location !520 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 0)`); batchtest/ndes/ndes.c:374:34
  renamable $r0 = LDRi12 killed renamable $r0, 4, 14, $noreg, debug-location !519 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_icd, i32 0, i32 1)`); batchtest/ndes/ndes.c:374:21
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !521; batchtest/ndes/ndes.c:374:23
  $r1 = MOVi 2048, 14, $noreg, $noreg
  $r1 = ORRri $r1, 8388608, 14, $noreg, $noreg
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, def $cpsr, debug-location !522; batchtest/ndes/ndes.c:374:54
  $r0 = MOVi 1, 1, killed $cpsr, $noreg, implicit renamable $r0, debug-location !522; batchtest/ndes/ndes.c:374:54
  BX_RET 14, $noreg, implicit killed $r0, debug-location !523; batchtest/ndes/ndes.c:374:3

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function ndes_return.

# Machine code for function ndes_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @ndes_isw, align=4
  cp#1: @ndes_inp, align=4
  cp#2: @ndes_key, align=4
  cp#3: @ndes_out, align=4
  cp#4: @ndes_newkey, align=4

bb.0.entry:
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !525 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:379:47
  renamable $r12 = LDRi12 killed renamable $r0, 0, 14, $noreg, debug-location !525 :: (dereferenceable load (s32) from @ndes_isw); batchtest/ndes/ndes.c:379:47
  renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !526 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:379:3
  renamable $r0 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !526 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_inp, i32 0, i32 0)`); batchtest/ndes/ndes.c:379:3
  renamable $r1 = LDRi12 killed renamable $r1, 4, 14, $noreg, debug-location !526 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_inp, i32 0, i32 1)`); batchtest/ndes/ndes.c:379:3
  renamable $r3 = LDRi12 %const.2, 0, 14, $noreg, debug-location !526 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:379:3
  renamable $r2 = LDRi12 renamable $r3, 0, 14, $noreg, debug-location !526 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_key, i32 0, i32 0)`); batchtest/ndes/ndes.c:379:3
  renamable $r3 = LDRi12 killed renamable $r3, 4, 14, $noreg, debug-location !526 :: (dereferenceable load (s32) from `i32* getelementptr inbounds (%struct.NDES_IMMENSE, %struct.NDES_IMMENSE* @ndes_key, i32 0, i32 1)`); batchtest/ndes/ndes.c:379:3
  renamable $r4 = LDRi12 %const.3, 0, 14, $noreg, debug-location !526 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:379:3
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !526; batchtest/ndes/ndes.c:379:3
  STRi12 killed renamable $r4, renamable $lr, 8, 14, $noreg, debug-location !526 :: (store (s32) into stack + 8); batchtest/ndes/ndes.c:379:3
  STRi12 killed renamable $r12, renamable $lr, 4, 14, $noreg, debug-location !526 :: (store (s32) into stack + 4); batchtest/ndes/ndes.c:379:3
  renamable $r12 = LDRi12 %const.4, 0, 14, $noreg, debug-location !526 :: (load (s32) from constant-pool); batchtest/ndes/ndes.c:379:3
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !526 :: (store (s32) into stack); batchtest/ndes/ndes.c:379:3
  BL_pred @ndes_des, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, debug-location !526; batchtest/ndes/ndes.c:379:3
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg, debug-location !527; batchtest/ndes/ndes.c:380:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr, debug-location !527; batchtest/ndes/ndes.c:380:1
  BX_RET 14, $noreg, debug-location !527; batchtest/ndes/ndes.c:380:1

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4
  CONSTPOOL_ENTRY 4, %const.4, 4

# End machine code for function ndes_main.

# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]

bb.0.entry:
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  BL_pred @ndes_init, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !529; batchtest/ndes/ndes.c:386:3
  BL_pred @ndes_main, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !530; batchtest/ndes/ndes.c:387:3
  BL_pred @ndes_return, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $r0, debug-location !531; batchtest/ndes/ndes.c:389:12
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !532; batchtest/ndes/ndes.c:389:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !532; batchtest/ndes/ndes.c:389:3

# End machine code for function main.

# Machine code for function __absvdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @__func__.__absvdi2, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  $r2 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  $r2 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !534; ../absvdi2.c:25:11
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !534; ../absvdi2.c:25:11
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !535; ../absvdi2.c:25:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !535; ../absvdi2.c:25:9
  B %bb.1, debug-location !535; ../absvdi2.c:25:9

bb.1.if.then:
; predecessors: %bb.0

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !536 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !536 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
  renamable $r1 = MOVi 26, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !536; ../absvdi2.c:26:9

bb.2.if.end:
; predecessors: %bb.0

  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !537 :: (load (s32) from %stack.1); ../absvdi2.c:28:20
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !537 :: (load (s32) from %stack.0); ../absvdi2.c:28:20
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !537; ../absvdi2.c:28:20
  renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !537; ../absvdi2.c:28:20
  renamable $r1 = ADCrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !537; ../absvdi2.c:28:20
  renamable $r1 = EORrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, debug-location !537; ../absvdi2.c:28:20
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !538; ../absvdi2.c:28:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !538; ../absvdi2.c:28:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !538; ../absvdi2.c:28:5

bb.3 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __absvdi2.

# Machine code for function compilerrt_abort_impl: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten

bb.0.entry:

# End machine code for function compilerrt_abort_impl.

# Machine code for function __absvsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.1, align=4
  cp#1: @__func__.__absvsi2, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !543; ../absvsi2.c:25:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !543; ../absvsi2.c:25:9
  B %bb.1, debug-location !543; ../absvsi2.c:25:9

bb.1.if.then:
; predecessors: %bb.0

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !544 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !544 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
  renamable $r1 = MOVi 26, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !544; ../absvsi2.c:26:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !545 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !545; ../absvsi2.c:28:20
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  Bcc %bb.4, 5, killed $cpsr, debug-location !545; ../absvsi2.c:28:20

bb.3.if.end:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !545 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
  renamable $r0 = RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !545; ../absvsi2.c:28:20
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)

bb.4.if.end:
; predecessors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !545 :: (load (s32) from %stack.1); ../absvsi2.c:28:20
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !546; ../absvsi2.c:28:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !546; ../absvsi2.c:28:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !546; ../absvsi2.c:28:5

bb.5 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __absvsi2.

# Machine code for function __addvdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-4]
  fi#5: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.2, align=4
  cp#1: @__func__.__addvdi3, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  $r12 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  $r12 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !548; ../addvdi3.c:24:27
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = ADCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !548; ../addvdi3.c:24:27
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !550; ../addvdi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !550; ../addvdi3.c:25:9
  B %bb.1, debug-location !550; ../addvdi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !551 :: (load (s32) from %stack.0); ../addvdi3.c:27:15
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !551 :: (load (s32) from %stack.3); ../addvdi3.c:27:15
  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !551 :: (load (s32) from %stack.1); ../addvdi3.c:27:15
  $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !551 :: (load (s32) from %stack.2); ../addvdi3.c:27:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !551; ../addvdi3.c:27:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !551; ../addvdi3.c:27:15
  Bcc %bb.3, 10, killed $cpsr, debug-location !552; ../addvdi3.c:27:13
  B %bb.2, debug-location !552; ../addvdi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !553 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !553 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !553; ../addvdi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !554; ../addvdi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !555 :: (load (s32) from %stack.0); ../addvdi3.c:32:15
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !555 :: (load (s32) from %stack.3); ../addvdi3.c:32:15
  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !555 :: (load (s32) from %stack.1); ../addvdi3.c:32:15
  $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !555 :: (load (s32) from %stack.2); ../addvdi3.c:32:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !555; ../addvdi3.c:32:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !555; ../addvdi3.c:32:15
  Bcc %bb.6, 11, killed $cpsr, debug-location !556; ../addvdi3.c:32:13
  B %bb.5, debug-location !556; ../addvdi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !557 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !557 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !557; ../addvdi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !558 :: (load (s32) from %stack.0); ../addvdi3.c:35:5
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !558 :: (load (s32) from %stack.1); ../addvdi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !558; ../addvdi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !558; ../addvdi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !558; ../addvdi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __addvdi3.

# Machine code for function __addvsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.3, align=4
  cp#1: @__func__.__addvsi3, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = ADDrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !560; ../addvsi3.c:24:27
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !562; ../addvsi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !562; ../addvsi3.c:25:9
  B %bb.1, debug-location !562; ../addvsi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !564 :: (load (s32) from %stack.0); ../addvsi3.c:27:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !564 :: (load (s32) from %stack.1); ../addvsi3.c:27:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !564; ../addvsi3.c:27:13
  Bcc %bb.3, 10, killed $cpsr, debug-location !564; ../addvsi3.c:27:13
  B %bb.2, debug-location !564; ../addvsi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !565 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !565 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !565; ../addvsi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !566; ../addvsi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !568 :: (load (s32) from %stack.0); ../addvsi3.c:32:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !568 :: (load (s32) from %stack.1); ../addvsi3.c:32:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !568; ../addvsi3.c:32:13
  Bcc %bb.6, 11, killed $cpsr, debug-location !568; ../addvsi3.c:32:13
  B %bb.5, debug-location !568; ../addvsi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !569 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !569 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !569; ../addvsi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !570 :: (load (s32) from %stack.0); ../addvsi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !570; ../addvsi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !570; ../addvsi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !570; ../addvsi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __addvsi3.

# Machine code for function __ashldi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.2, %bb.1
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 40
  STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  $r3 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  $r3 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !573 :: (store (s32) into %ir.all + 4, basealign 8); ../ashldi3.c:29:15
  STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !573 :: (store (s32) into %ir.all, align 8); ../ashldi3.c:29:15
  TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !575; ../ashldi3.c:30:9
  Bcc %bb.2, 0, killed $cpsr, debug-location !575; ../ashldi3.c:30:9
  B %bb.1, debug-location !575; ../ashldi3.c:30:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !577 :: (store (s32) into %ir.low, align 8); ../ashldi3.c:32:22
  renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !578 :: (dereferenceable load (s32) from %ir.low2, align 8); ../ashldi3.c:33:33
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !579; ../ashldi3.c:33:43
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !580; ../ashldi3.c:33:37
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !583 :: (store (s32) into %ir.high); ../ashldi3.c:33:23
  B %bb.5, debug-location !584; ../ashldi3.c:34:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !586 :: (load (s32) from %stack.4); ../ashldi3.c:37:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !586; ../ashldi3.c:37:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !586; ../ashldi3.c:37:13
  B %bb.3, debug-location !586; ../ashldi3.c:37:13

bb.3.if.then4:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
  $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !587; ../ashldi3.c:38:13

bb.4.if.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !588 :: (load (s32) from %stack.4); ../ashldi3.c:39:33
  renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !588 :: (dereferenceable load (s32) from %ir.low6, align 8); ../ashldi3.c:39:33
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !589; ../ashldi3.c:39:37
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !591 :: (store (s32) into %ir.low9, align 8); ../ashldi3.c:39:23
  renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !595 :: (dereferenceable load (s32) from %ir.low14, align 8); ../ashldi3.c:40:56
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !593 :: (dereferenceable load (s32) from %ir.high11); ../ashldi3.c:40:34
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !594; ../ashldi3.c:40:39
  renamable $r2 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !596; ../ashldi3.c:40:77
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !598; ../ashldi3.c:40:45
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !601 :: (store (s32) into %ir.high17); ../ashldi3.c:40:23
  B %bb.5

bb.5.if.end18:
; predecessors: %bb.1, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !602 :: (dereferenceable load (s32) from %ir.all19, align 8); ../ashldi3.c:42:19
  renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !602 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../ashldi3.c:42:19
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !603; ../ashldi3.c:42:5

bb.6.return:
; predecessors: %bb.5, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !604 :: (load (s32) from %stack.6); ../ashldi3.c:0
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !604 :: (load (s32) from %stack.5); ../ashldi3.c:0
  $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !605; ../ashldi3.c:43:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !605; ../ashldi3.c:43:1

# End machine code for function __ashldi3.

# Machine code for function __ashrdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.2, %bb.1
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 40
  STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  $r3 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  $r3 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !608 :: (store (s32) into %ir.all + 4, basealign 8); ../ashrdi3.c:29:15
  STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !608 :: (store (s32) into %ir.all, align 8); ../ashrdi3.c:29:15
  TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !610; ../ashrdi3.c:30:9
  Bcc %bb.2, 0, killed $cpsr, debug-location !610; ../ashrdi3.c:30:9
  B %bb.1, debug-location !610; ../ashrdi3.c:30:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !612 :: (load (s32) from %stack.4); ../ashrdi3.c:33:33
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !612 :: (dereferenceable load (s32) from %ir.high); ../ashrdi3.c:33:33
  renamable $r0 = MOVsi killed renamable $r0, 249, 14, $noreg, $noreg, debug-location !613; ../ashrdi3.c:33:38
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !616 :: (store (s32) into %ir.high2); ../ashrdi3.c:33:23
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !618 :: (dereferenceable load (s32) from %ir.high4); ../ashrdi3.c:34:32
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !619; ../ashrdi3.c:34:43
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 1, 14, $noreg, $noreg, debug-location !620; ../ashrdi3.c:34:37
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !622 :: (store (s32) into %ir.low, align 8); ../ashrdi3.c:34:22
  B %bb.5, debug-location !623; ../ashrdi3.c:35:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !625 :: (load (s32) from %stack.4); ../ashrdi3.c:38:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !625; ../ashrdi3.c:38:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !625; ../ashrdi3.c:38:13
  B %bb.3, debug-location !625; ../ashrdi3.c:38:13

bb.3.if.then7:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
  $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !626; ../ashrdi3.c:39:13

bb.4.if.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !628 :: (load (s32) from %stack.4); ../ashrdi3.c:40:34
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !628 :: (dereferenceable load (s32) from %ir.high9); ../ashrdi3.c:40:34
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 1, 14, $noreg, $noreg, debug-location !629; ../ashrdi3.c:40:39
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !632 :: (store (s32) into %ir.high12); ../ashrdi3.c:40:24
  renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !637 :: (dereferenceable load (s32) from %ir.low17, align 8); ../ashrdi3.c:41:72
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !634 :: (dereferenceable load (s32) from %ir.high14); ../ashrdi3.c:41:33
  renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !635; ../ashrdi3.c:41:55
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !636; ../ashrdi3.c:41:38
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !639; ../ashrdi3.c:41:61
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !641 :: (store (s32) into %ir.low20, align 8); ../ashrdi3.c:41:22
  B %bb.5

bb.5.if.end21:
; predecessors: %bb.1, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !642 :: (dereferenceable load (s32) from %ir.all22, align 8); ../ashrdi3.c:43:19
  renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !642 :: (dereferenceable load (s32) from %ir.all22 + 4, basealign 8); ../ashrdi3.c:43:19
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !643; ../ashrdi3.c:43:5

bb.6.return:
; predecessors: %bb.5, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !644 :: (load (s32) from %stack.6); ../ashrdi3.c:0
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !644 :: (load (s32) from %stack.5); ../ashrdi3.c:0
  $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !645; ../ashrdi3.c:44:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !645; ../ashrdi3.c:44:1

# End machine code for function __ashrdi3.

# Machine code for function __clzdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !648 :: (store (s32) into %ir.all + 4, basealign 8); ../clzdi2.c:25:11
  STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !648 :: (store (s32) into %ir.all, align 8); ../clzdi2.c:25:11
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !654 :: (dereferenceable load (s32) from %ir.low, align 8); ../clzdi2.c:27:49
  renamable $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !650 :: (dereferenceable load (s32) from %ir.high2); ../clzdi2.c:26:28
  CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !655; ../clzdi2.c:27:42
  $r0 = MOVr $r2, 14, $noreg, $noreg, debug-location !655; ../clzdi2.c:27:42
  $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !655; ../clzdi2.c:27:42
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !656; ../clzdi2.c:27:12
  renamable $r1 = MOVi 32, 14, $noreg, $noreg
  renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !659; ../clzdi2.c:27:59
  CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !659; ../clzdi2.c:27:59
  $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !659; ../clzdi2.c:27:59
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !660; ../clzdi2.c:27:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !660; ../clzdi2.c:27:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __clzdi2.

# Machine code for function __clzsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $r3 = MOVr killed $r0, 14, $noreg, $noreg
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  CMPri renamable $r3, 65536, 14, $noreg, implicit-def $cpsr
  $r2 = MOVi 1, 3, killed $cpsr, $noreg, implicit renamable $r2
  renamable $r0 = MOVsi renamable $r2, 34, 14, $noreg, $noreg, debug-location !663; ../clzsi2.c:25:40
  renamable $r1 = MOVi 16, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi killed renamable $r1, killed renamable $r2, 34, 14, $noreg, $noreg, debug-location !664; ../clzsi2.c:26:14
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !665; ../clzsi2.c:26:7
  renamable $r1 = MOVi 65280, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !666; ../clzsi2.c:29:13
  renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !666; ../clzsi2.c:29:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !666; ../clzsi2.c:29:13
  renamable $r3 = MOVi 8, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi killed renamable $r3, renamable $r1, 26, 14, $noreg, $noreg, debug-location !669; ../clzsi2.c:30:13
  renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !670; ../clzsi2.c:30:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !671; ../clzsi2.c:31:7
  renamable $r1 = MOVi 240, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !672; ../clzsi2.c:33:13
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !672; ../clzsi2.c:33:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !672; ../clzsi2.c:33:13
  renamable $r2 = MOVi 4, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi killed renamable $r2, renamable $r1, 18, 14, $noreg, $noreg, debug-location !675; ../clzsi2.c:34:13
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !676; ../clzsi2.c:34:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !677; ../clzsi2.c:35:7
  renamable $r1 = MOVi 12, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !678; ../clzsi2.c:37:13
  renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !678; ../clzsi2.c:37:13
  renamable $lr = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !678; ../clzsi2.c:37:13
  renamable $r1 = MOVi 2, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi renamable $r1, renamable $lr, 10, 14, $noreg, $noreg, debug-location !681; ../clzsi2.c:38:13
  renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !682; ../clzsi2.c:38:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $lr, 10, 14, $noreg, $noreg, debug-location !683; ../clzsi2.c:39:7
  renamable $r1 = SUBrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !684; ../clzsi2.c:52:20
  renamable $r2 = MVNi 1, 14, $noreg, $noreg
  renamable $r2 = ORRrsi killed renamable $r2, killed renamable $r3, 11, 14, $noreg, $noreg, debug-location !685; ../clzsi2.c:52:37
  renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !685; ../clzsi2.c:52:37
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !686; ../clzsi2.c:52:25
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !687; ../clzsi2.c:52:14
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !688; ../clzsi2.c:52:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !688; ../clzsi2.c:52:5

# End machine code for function __clzsi2.

# Machine code for function __cmpdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $r2, $r3
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !691 :: (store (s32) into %ir.all + 4, basealign 8); ../cmpdi2.c:26:11
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !691 :: (store (s32) into %ir.all, align 8); ../cmpdi2.c:26:11
  STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !693 :: (store (s32) into %ir.all1 + 4, basealign 8); ../cmpdi2.c:28:11
  STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !693 :: (store (s32) into %ir.all1, align 8); ../cmpdi2.c:28:11
  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !695 :: (dereferenceable load (s32) from %ir.high); ../cmpdi2.c:29:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !697 :: (dereferenceable load (s32) from %ir.high3); ../cmpdi2.c:29:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !699; ../cmpdi2.c:29:9
  Bcc %bb.2, 10, killed $cpsr, debug-location !699; ../cmpdi2.c:29:9
  B %bb.1, debug-location !699; ../cmpdi2.c:29:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !700; ../cmpdi2.c:30:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !702 :: (dereferenceable load (s32) from %ir.high5); ../cmpdi2.c:31:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !704 :: (dereferenceable load (s32) from %ir.high7); ../cmpdi2.c:31:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !706; ../cmpdi2.c:31:9
  Bcc %bb.4, 13, killed $cpsr, debug-location !706; ../cmpdi2.c:31:9
  B %bb.3, debug-location !706; ../cmpdi2.c:31:9

bb.3.if.then9:
; predecessors: %bb.2
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !707; ../cmpdi2.c:32:9

bb.4.if.end10:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !708 :: (dereferenceable load (s32) from %ir.low, align 8); ../cmpdi2.c:33:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !709 :: (dereferenceable load (s32) from %ir.low13, align 8); ../cmpdi2.c:33:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !711; ../cmpdi2.c:33:9
  Bcc %bb.6, 2, killed $cpsr, debug-location !711; ../cmpdi2.c:33:9
  B %bb.5, debug-location !711; ../cmpdi2.c:33:9

bb.5.if.then15:
; predecessors: %bb.4
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !712; ../cmpdi2.c:34:9

bb.6.if.end16:
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !713 :: (dereferenceable load (s32) from %ir.low18, align 8); ../cmpdi2.c:35:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !714 :: (dereferenceable load (s32) from %ir.low20, align 8); ../cmpdi2.c:35:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !716; ../cmpdi2.c:35:9
  Bcc %bb.8, 9, killed $cpsr, debug-location !716; ../cmpdi2.c:35:9
  B %bb.7, debug-location !716; ../cmpdi2.c:35:9

bb.7.if.then22:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !717; ../cmpdi2.c:36:9

bb.8.if.end23:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !718; ../cmpdi2.c:37:5

bb.9.return:
; predecessors: %bb.8, %bb.7, %bb.5, %bb.3, %bb.1

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !719 :: (load (s32) from %stack.2); ../cmpdi2.c:0
  $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !720; ../cmpdi2.c:38:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !720; ../cmpdi2.c:38:1

# End machine code for function __cmpdi2.

# Machine code for function __aeabi_lcmp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  BL_pred @__cmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !722; ../cmpdi2.c:48:9
  renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !723; ../cmpdi2.c:48:24
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !724; ../cmpdi2.c:48:2
  BX_RET 14, $noreg, implicit killed $r0, debug-location !724; ../cmpdi2.c:48:2

# End machine code for function __aeabi_lcmp.

# Machine code for function __ctzdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !727 :: (store (s32) into %ir.all + 4, basealign 8); ../ctzdi2.c:25:11
  STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !727 :: (store (s32) into %ir.all, align 8); ../ctzdi2.c:25:11
  renamable $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !728 :: (dereferenceable load (s32) from %ir.low, align 8); ../ctzdi2.c:26:28
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !731 :: (dereferenceable load (s32) from %ir.high); ../ctzdi2.c:27:31
  CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !732; ../ctzdi2.c:27:41
  $r1 = MOVr $r2, 14, $noreg, $noreg, debug-location !732; ../ctzdi2.c:27:41
  $r1 = MOVr killed renamable $r0, 0, killed $cpsr, $noreg, implicit renamable $r1, debug-location !732; ../ctzdi2.c:27:41
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !733; ../ctzdi2.c:27:12
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !733; ../ctzdi2.c:27:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !733; ../ctzdi2.c:27:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !733; ../ctzdi2.c:27:12
  renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !733; ../ctzdi2.c:27:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !733; ../ctzdi2.c:27:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !733; ../ctzdi2.c:27:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !733; ../ctzdi2.c:27:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !733; ../ctzdi2.c:27:12
  renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !733; ../ctzdi2.c:27:12
  renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !733; ../ctzdi2.c:27:12
  renamable $r1 = MOVi 32, 14, $noreg, $noreg
  renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !735; ../ctzdi2.c:27:59
  CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !735; ../ctzdi2.c:27:59
  $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !735; ../ctzdi2.c:27:59
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !736; ../ctzdi2.c:27:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !736; ../ctzdi2.c:27:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __ctzdi2.

# Machine code for function __ctzsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0
  $r2 = MOVr killed $r0, 14, $noreg, $noreg
  $r0 = MOVi 255, 14, $noreg, $noreg
  $r0 = ORRri $r0, 65280, 14, $noreg, $noreg
  renamable $r0 = ANDrr renamable $r2, killed renamable $r0, 14, $noreg, $noreg, debug-location !738; ../ctzsi2.c:25:20
  renamable $r1 = RSBri renamable $r0, 0, 14, $noreg, def $cpsr, debug-location !738; ../ctzsi2.c:25:20
  renamable $r0 = ADCrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !738; ../ctzsi2.c:25:20
  renamable $r0 = MOVsi killed renamable $r0, 34, 14, $noreg, $noreg, debug-location !740; ../ctzsi2.c:25:40
  renamable $r3 = MOVsr renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !741; ../ctzsi2.c:26:7
  renamable $r1 = MOVi 255, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !742; ../ctzsi2.c:29:13
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !742; ../ctzsi2.c:29:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !742; ../ctzsi2.c:29:13
  renamable $r12 = MOVsi renamable $r1, 26, 14, $noreg, $noreg, debug-location !744; ../ctzsi2.c:29:29
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !745; ../ctzsi2.c:30:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !746; ../ctzsi2.c:31:7
  renamable $r1 = MOVi 15, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !747; ../ctzsi2.c:33:13
  renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !747; ../ctzsi2.c:33:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !747; ../ctzsi2.c:33:13
  renamable $r12 = MOVsi renamable $r1, 18, 14, $noreg, $noreg, debug-location !749; ../ctzsi2.c:33:27
  renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !750; ../ctzsi2.c:34:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !751; ../ctzsi2.c:35:7
  renamable $r1 = MOVi 3, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !752; ../ctzsi2.c:37:13
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !752; ../ctzsi2.c:37:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !752; ../ctzsi2.c:37:13
  renamable $r12 = MOVsi renamable $r1, 10, 14, $noreg, $noreg, debug-location !754; ../ctzsi2.c:37:26
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !755; ../ctzsi2.c:38:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !756; ../ctzsi2.c:40:7
  renamable $r1 = MOVi 1, 14, $noreg, $noreg
  renamable $r1 = ANDrsi killed renamable $r1, killed renamable $r2, 11, 14, $noreg, $noreg, debug-location !757; ../ctzsi2.c:56:25
  renamable $r1 = nuw nsw RSBri killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !758; ../ctzsi2.c:56:20
  renamable $r2 = MVNi 1, 14, $noreg, $noreg
  renamable $r2 = ORRrsr killed renamable $r2, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !759; ../ctzsi2.c:56:44
  renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !759; ../ctzsi2.c:56:44
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !760; ../ctzsi2.c:56:32
  renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !761; ../ctzsi2.c:56:14
  BX_RET 14, $noreg, implicit killed $r0, debug-location !762; ../ctzsi2.c:56:5

# End machine code for function __ctzsi2.

# Machine code for function __divdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  $lr = MOVr killed $r3, 14, $noreg, $noreg
  $r3 = MOVr killed $r1, 14, $noreg, $noreg
  dead renamable $r1 = KILL renamable $lr
  dead renamable $r1 = KILL renamable $r2
  dead renamable $r1 = KILL renamable $r3
  dead renamable $r1 = KILL renamable $r0
  renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !764; ../divdi3.c:23:20
  renamable $r0 = EORrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, $noreg, debug-location !766; ../divdi3.c:25:12
  renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !766; ../divdi3.c:25:12
  renamable $r0 = SUBrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !767; ../divdi3.c:25:19
  renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !767; ../divdi3.c:25:19
  renamable $r2 = EORrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, $noreg, debug-location !768; ../divdi3.c:26:12
  renamable $r3 = EORrsi renamable $lr, renamable $lr, 249, 14, $noreg, $noreg, debug-location !768; ../divdi3.c:26:12
  renamable $r2 = SUBrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, def $cpsr, debug-location !769; ../divdi3.c:26:19
  renamable $r3 = SBCrsi killed renamable $r3, renamable $lr, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !769; ../divdi3.c:26:19
  renamable $r12 = EORrsi killed renamable $r12, killed renamable $lr, 249, 14, $noreg, $noreg, debug-location !770; ../divdi3.c:27:9
  STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !771; ../divdi3.c:28:13
  renamable $r12 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !771 :: (store (s32) into stack); ../divdi3.c:28:13
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !771; ../divdi3.c:28:13
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !771 :: (load (s32) from %stack.0); ../divdi3.c:28:13
  renamable $r1 = EORrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !772; ../divdi3.c:28:44
  renamable $r0 = EORrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !772; ../divdi3.c:28:44
  renamable $r0 = SUBrr killed renamable $r0, renamable $r2, 14, $noreg, def $cpsr, debug-location !773; ../divdi3.c:28:51
  renamable $r1 = SBCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !773; ../divdi3.c:28:51
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !774; ../divdi3.c:28:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !774; ../divdi3.c:28:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !774; ../divdi3.c:28:5

# End machine code for function __divdi3.

# Machine code for function __udivmoddi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=4, align=4, at location [SP-52]
  fi#7: size=4, align=4, at location [SP-56]
  fi#8: size=4, align=4, at location [SP-60]
  fi#9: size=4, align=4, at location [SP-64]
  fi#10: size=4, align=4, at location [SP-68]
  fi#11: size=4, align=4, at location [SP-72]
  fi#12: size=4, align=4, at location [SP-76]
  fi#13: size=4, align=4, at location [SP-80]
  fi#14: size=4, align=4, at location [SP-84]
  fi#15: size=4, align=4, at location [SP-88]
  fi#16: size=4, align=4, at location [SP-92]
  fi#17: size=4, align=4, at location [SP-96]
  fi#18: size=4, align=4, at location [SP-4]
  fi#19: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.8
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 88, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  renamable $r12 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
  STRi12 killed $r12, $r11, -36, 14, $noreg :: (store (s32) into %stack.4)
  STRi12 killed renamable $r1, $r11, -4, 14, $noreg, debug-location !777 :: (store (s32) into %ir.all + 4, basealign 8); ../udivmoddi4.c:29:11
  STRi12 killed renamable $r0, $r11, -8, 14, $noreg, debug-location !777 :: (store (s32) into %ir.all, align 8); ../udivmoddi4.c:29:11
  STRi12 killed renamable $r3, $r11, -12, 14, $noreg, debug-location !779 :: (store (s32) into %ir.all1 + 4, basealign 8); ../udivmoddi4.c:31:11
  STRi12 killed renamable $r2, $r11, -16, 14, $noreg, debug-location !779 :: (store (s32) into %ir.all1, align 8); ../udivmoddi4.c:31:11
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !781 :: (dereferenceable load (s32) from %ir.high); ../udivmoddi4.c:36:13
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !783; ../udivmoddi4.c:36:9
  Bcc %bb.8, 1, killed $cpsr, debug-location !783; ../udivmoddi4.c:36:9
  B %bb.1, debug-location !783; ../udivmoddi4.c:36:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.5

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !785 :: (dereferenceable load (s32) from %ir.high3); ../udivmoddi4.c:38:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !787; ../udivmoddi4.c:38:13
  Bcc %bb.5, 1, killed $cpsr, debug-location !787; ../udivmoddi4.c:38:13
  B %bb.2, debug-location !787; ../udivmoddi4.c:38:13

bb.2.if.then5:
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !788 :: (load (s32) from %stack.4); ../udivmoddi4.c:44:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !788; ../udivmoddi4.c:44:17
  Bcc %bb.4, 0, killed $cpsr, debug-location !788; ../udivmoddi4.c:44:17
  B %bb.3, debug-location !788; ../udivmoddi4.c:44:17

bb.3.if.then6:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !789 :: (dereferenceable load (s32) from %ir.low, align 8); ../udivmoddi4.c:45:28
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !790 :: (dereferenceable load (s32) from %ir.low9, align 8); ../udivmoddi4.c:45:38
  BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !791; ../udivmoddi4.c:45:32
  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !791 :: (load (s32) from %stack.4); ../udivmoddi4.c:45:32
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !793 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:45:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !793 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:45:22
  B %bb.4, debug-location !794; ../udivmoddi4.c:45:17

bb.4.if.end:
; predecessors: %bb.2, %bb.3
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !795 :: (dereferenceable load (s32) from %ir.low12, align 8); ../udivmoddi4.c:46:24
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !796 :: (dereferenceable load (s32) from %ir.low14, align 8); ../udivmoddi4.c:46:34
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !797; ../udivmoddi4.c:46:28
  $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !797; ../udivmoddi4.c:46:28
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !799; ../udivmoddi4.c:46:13

bb.5.if.end16:
; predecessors: %bb.1
  successors: %bb.7, %bb.6

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !800 :: (load (s32) from %stack.4); ../udivmoddi4.c:52:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !800; ../udivmoddi4.c:52:13
  Bcc %bb.7, 0, killed $cpsr, debug-location !800; ../udivmoddi4.c:52:13
  B %bb.6, debug-location !800; ../udivmoddi4.c:52:13

bb.6.if.then18:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !801 :: (load (s32) from %stack.4); ../udivmoddi4.c:53:24
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !801 :: (dereferenceable load (s32) from %ir.low20, align 8); ../udivmoddi4.c:53:24
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !803 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:53:18
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !803 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:53:18
  B %bb.7, debug-location !804; ../udivmoddi4.c:53:13

bb.7.if.end22:
; predecessors: %bb.5, %bb.6
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  $r1 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !805; ../udivmoddi4.c:54:9

bb.8.if.end23:
; predecessors: %bb.0
  successors: %bb.9, %bb.26

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !806 :: (dereferenceable load (s32) from %ir.low25, align 8); ../udivmoddi4.c:57:13
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !808; ../udivmoddi4.c:57:9
  Bcc %bb.26, 1, killed $cpsr, debug-location !808; ../udivmoddi4.c:57:9
  B %bb.9, debug-location !808; ../udivmoddi4.c:57:9

bb.9.if.then28:
; predecessors: %bb.8
  successors: %bb.10, %bb.13

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !810 :: (dereferenceable load (s32) from %ir.high30); ../udivmoddi4.c:59:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !812; ../udivmoddi4.c:59:13
  Bcc %bb.13, 1, killed $cpsr, debug-location !812; ../udivmoddi4.c:59:13
  B %bb.10, debug-location !812; ../udivmoddi4.c:59:13

bb.10.if.then33:
; predecessors: %bb.9
  successors: %bb.12, %bb.11

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !813 :: (load (s32) from %stack.4); ../udivmoddi4.c:65:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !813; ../udivmoddi4.c:65:17
  Bcc %bb.12, 0, killed $cpsr, debug-location !813; ../udivmoddi4.c:65:17
  B %bb.11, debug-location !813; ../udivmoddi4.c:65:17

bb.11.if.then35:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !815 :: (dereferenceable load (s32) from %ir.high37); ../udivmoddi4.c:66:28
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !816 :: (dereferenceable load (s32) from %ir.low39, align 8); ../udivmoddi4.c:66:39
  BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !817; ../udivmoddi4.c:66:33
  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !817 :: (load (s32) from %stack.4); ../udivmoddi4.c:66:33
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !819 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:66:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !819 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:66:22
  B %bb.12, debug-location !820; ../udivmoddi4.c:66:17

bb.12.if.end42:
; predecessors: %bb.10, %bb.11
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !822 :: (dereferenceable load (s32) from %ir.high44); ../udivmoddi4.c:67:24
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !823 :: (dereferenceable load (s32) from %ir.low46, align 8); ../udivmoddi4.c:67:35
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !824; ../udivmoddi4.c:67:29
  $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !824; ../udivmoddi4.c:67:29
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !826; ../udivmoddi4.c:67:13

bb.13.if.end49:
; predecessors: %bb.9
  successors: %bb.14, %bb.17

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !827 :: (dereferenceable load (s32) from %ir.low51, align 8); ../udivmoddi4.c:70:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !829; ../udivmoddi4.c:70:13
  Bcc %bb.17, 1, killed $cpsr, debug-location !829; ../udivmoddi4.c:70:13
  B %bb.14, debug-location !829; ../udivmoddi4.c:70:13

bb.14.if.then54:
; predecessors: %bb.13
  successors: %bb.16, %bb.15

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !830 :: (load (s32) from %stack.4); ../udivmoddi4.c:76:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !830; ../udivmoddi4.c:76:17
  Bcc %bb.16, 0, killed $cpsr, debug-location !830; ../udivmoddi4.c:76:17
  B %bb.15, debug-location !830; ../udivmoddi4.c:76:17

bb.15.if.then56:
; predecessors: %bb.14
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !832 :: (dereferenceable load (s32) from %ir.high58); ../udivmoddi4.c:78:32
  renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !834 :: (dereferenceable load (s32) from %ir.high60); ../udivmoddi4.c:78:43
  BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !835; ../udivmoddi4.c:78:37
  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !835 :: (load (s32) from %stack.4); ../udivmoddi4.c:78:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !838 :: (store (s32) into %ir.high63); ../udivmoddi4.c:78:26
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !840 :: (store (s32) into %ir.low65, align 8); ../udivmoddi4.c:79:25
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !841 :: (dereferenceable load (s32) from %ir.all66, align 8); ../udivmoddi4.c:80:26
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !841 :: (dereferenceable load (s32) from %ir.all66 + 4, basealign 8); ../udivmoddi4.c:80:26
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !842 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:80:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !842 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:80:22
  B %bb.16, debug-location !843; ../udivmoddi4.c:81:13

bb.16.if.end67:
; predecessors: %bb.14, %bb.15
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !845 :: (dereferenceable load (s32) from %ir.high69); ../udivmoddi4.c:82:24
  renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !847 :: (dereferenceable load (s32) from %ir.high71); ../udivmoddi4.c:82:35
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !848; ../udivmoddi4.c:82:29
  $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !848; ../udivmoddi4.c:82:29
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !850; ../udivmoddi4.c:82:13

bb.17.if.end74:
; predecessors: %bb.13
  successors: %bb.18, %bb.21

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !852 :: (dereferenceable load (s32) from %ir.high78); ../udivmoddi4.c:88:18
  renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !855; ../udivmoddi4.c:88:35
  TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !858; ../udivmoddi4.c:88:13
  Bcc %bb.21, 1, killed $cpsr, debug-location !858; ../udivmoddi4.c:88:13
  B %bb.18, debug-location !858; ../udivmoddi4.c:88:13

bb.18.if.then81:
; predecessors: %bb.17
  successors: %bb.20, %bb.19

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !859 :: (load (s32) from %stack.4); ../udivmoddi4.c:90:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !859; ../udivmoddi4.c:90:17
  Bcc %bb.20, 0, killed $cpsr, debug-location !859; ../udivmoddi4.c:90:17
  B %bb.19, debug-location !859; ../udivmoddi4.c:90:17

bb.19.if.then83:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !860 :: (load (s32) from %stack.4); ../udivmoddi4.c:92:31
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !860 :: (dereferenceable load (s32) from %ir.low85, align 8); ../udivmoddi4.c:92:31
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !862 :: (store (s32) into %ir.low87, align 8); ../udivmoddi4.c:92:25
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !864 :: (dereferenceable load (s32) from %ir.high89); ../udivmoddi4.c:93:32
  renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !866 :: (dereferenceable load (s32) from %ir.high91); ../udivmoddi4.c:93:44
  renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !867; ../udivmoddi4.c:93:49
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !868; ../udivmoddi4.c:93:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !871 :: (store (s32) into %ir.high95); ../udivmoddi4.c:93:26
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !872 :: (dereferenceable load (s32) from %ir.all96, align 8); ../udivmoddi4.c:94:26
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !872 :: (dereferenceable load (s32) from %ir.all96 + 4, basealign 8); ../udivmoddi4.c:94:26
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !873 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:94:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !873 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:94:22
  B %bb.20, debug-location !874; ../udivmoddi4.c:95:13

bb.20.if.end97:
; predecessors: %bb.18, %bb.19
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !876 :: (dereferenceable load (s32) from %ir.high99); ../udivmoddi4.c:96:24
  renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !878 :: (dereferenceable load (s32) from %ir.high101); ../udivmoddi4.c:96:50
  renamable $r1 = SUBri renamable $r2, 1, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:96:32
  renamable $r1 = BICrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:96:32
  renamable $r2 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r2 = ANDrsi killed renamable $r2, renamable $r1, 11, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:96:32
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:96:32
  renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r2 = ANDrsi renamable $r3, renamable $r1, 19, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:96:32
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:96:32
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:96:32
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:96:32
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:96:32
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:96:32
  renamable $r1 = MOVsi killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !879; ../udivmoddi4.c:96:32
  renamable $r1 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !880; ../udivmoddi4.c:96:29
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !882; ../udivmoddi4.c:96:13

bb.21.if.end103:
; predecessors: %bb.17
  successors: %bb.22, %bb.25

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !884 :: (dereferenceable load (s32) from %ir.high105); ../udivmoddi4.c:102:32
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !885; ../udivmoddi4.c:102:14
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !887 :: (dereferenceable load (s32) from %ir.high107); ../udivmoddi4.c:102:58
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !888; ../udivmoddi4.c:102:40
  renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !889; ../udivmoddi4.c:102:38
  STRi12 $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.7)
  CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !891; ../udivmoddi4.c:104:13
  Bcc %bb.25, 3, killed $cpsr, debug-location !891; ../udivmoddi4.c:104:13
  B %bb.22, debug-location !891; ../udivmoddi4.c:104:13

bb.22.if.then111:
; predecessors: %bb.21
  successors: %bb.24, %bb.23

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !892 :: (load (s32) from %stack.4); ../udivmoddi4.c:106:16
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !892; ../udivmoddi4.c:106:16
  Bcc %bb.24, 0, killed $cpsr, debug-location !892; ../udivmoddi4.c:106:16
  B %bb.23, debug-location !892; ../udivmoddi4.c:106:16

bb.23.if.then113:
; predecessors: %bb.22
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !893 :: (load (s32) from %stack.4); ../udivmoddi4.c:107:26
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !893 :: (dereferenceable load (s32) from %ir.all114, align 8); ../udivmoddi4.c:107:26
  renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !893 :: (dereferenceable load (s32) from %ir.all114 + 4, basealign 8); ../udivmoddi4.c:107:26
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !894 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:107:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !894 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:107:22
  B %bb.24, debug-location !895; ../udivmoddi4.c:107:17

bb.24.if.end115:
; predecessors: %bb.22, %bb.23
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  $r1 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !896; ../udivmoddi4.c:108:13

bb.25.if.end116:
; predecessors: %bb.21
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  $r2 = LDRi12 $sp, 40, 14, $noreg, debug-location !897 :: (load (s32) from %stack.7); ../udivmoddi4.c:110:9
  renamable $r0 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !897; ../udivmoddi4.c:110:9
  renamable $r1 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !899 :: (store (s32) into %ir.low118, align 8); ../udivmoddi4.c:113:17
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !900 :: (dereferenceable load (s32) from %ir.low120, align 8); ../udivmoddi4.c:114:24
  renamable $r3 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !901; ../udivmoddi4.c:114:45
  renamable $r1 = MOVsr killed renamable $r1, renamable $r3, 2, 14, $noreg, $noreg, debug-location !902; ../udivmoddi4.c:114:28
  STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !905 :: (store (s32) into %ir.high123); ../udivmoddi4.c:114:18
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !907 :: (dereferenceable load (s32) from %ir.high125); ../udivmoddi4.c:116:24
  renamable $r1 = MOVsr killed renamable $r1, renamable $r0, 3, 14, $noreg, $noreg, debug-location !908; ../udivmoddi4.c:116:29
  STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !911 :: (store (s32) into %ir.high128); ../udivmoddi4.c:116:18
  renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !916 :: (dereferenceable load (s32) from %ir.low134, align 8); ../udivmoddi4.c:117:60
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !913 :: (dereferenceable load (s32) from %ir.high130); ../udivmoddi4.c:117:24
  renamable $r1 = MOVsr killed renamable $r1, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !915; ../udivmoddi4.c:117:29
  renamable $r1 = ORRrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !918; ../udivmoddi4.c:117:53
  STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !920 :: (store (s32) into %ir.low137, align 8); ../udivmoddi4.c:117:17
  STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.49, debug-location !921; ../udivmoddi4.c:118:5

bb.26.if.else:
; predecessors: %bb.8
  successors: %bb.27, %bb.40

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !923 :: (dereferenceable load (s32) from %ir.high139); ../udivmoddi4.c:121:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !925; ../udivmoddi4.c:121:13
  Bcc %bb.40, 1, killed $cpsr, debug-location !925; ../udivmoddi4.c:121:13
  B %bb.27, debug-location !925; ../udivmoddi4.c:121:13

bb.27.if.then142:
; predecessors: %bb.26
  successors: %bb.28, %bb.33

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !926 :: (dereferenceable load (s32) from %ir.low144, align 8); ../udivmoddi4.c:127:22
  renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !928; ../udivmoddi4.c:127:17
  TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !928; ../udivmoddi4.c:127:17
  Bcc %bb.33, 1, killed $cpsr, debug-location !928; ../udivmoddi4.c:127:17
  B %bb.28, debug-location !928; ../udivmoddi4.c:127:17

bb.28.if.then151:
; predecessors: %bb.27
  successors: %bb.30, %bb.29

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !929 :: (load (s32) from %stack.4); ../udivmoddi4.c:129:21
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !929; ../udivmoddi4.c:129:21
  Bcc %bb.30, 0, killed $cpsr, debug-location !929; ../udivmoddi4.c:129:21
  B %bb.29, debug-location !929; ../udivmoddi4.c:129:21

bb.29.if.then153:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !930 :: (load (s32) from %stack.4); ../udivmoddi4.c:130:32
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !930 :: (dereferenceable load (s32) from %ir.low155, align 8); ../udivmoddi4.c:130:32
  renamable $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !931 :: (dereferenceable load (s32) from %ir.low157, align 8); ../udivmoddi4.c:130:43
  renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !932; ../udivmoddi4.c:130:47
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !933; ../udivmoddi4.c:130:36
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !935 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:130:26
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !935 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:130:26
  B %bb.30, debug-location !936; ../udivmoddi4.c:130:21

bb.30.if.end161:
; predecessors: %bb.28, %bb.29
  successors: %bb.31, %bb.32

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !937 :: (dereferenceable load (s32) from %ir.low163, align 8); ../udivmoddi4.c:131:25
  CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !939; ../udivmoddi4.c:131:21
  Bcc %bb.32, 1, killed $cpsr, debug-location !939; ../udivmoddi4.c:131:21
  B %bb.31, debug-location !939; ../udivmoddi4.c:131:21

bb.31.if.then166:
; predecessors: %bb.30
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !940 :: (dereferenceable load (s32) from %ir.all167, align 8); ../udivmoddi4.c:132:30
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !940 :: (dereferenceable load (s32) from %ir.all167 + 4, basealign 8); ../udivmoddi4.c:132:30
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !941; ../udivmoddi4.c:132:21

bb.32.if.end168:
; predecessors: %bb.30
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !942 :: (dereferenceable load (s32) from %ir.low170, align 8); ../udivmoddi4.c:133:40
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !943; ../udivmoddi4.c:133:22
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !943; ../udivmoddi4.c:133:22
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !943; ../udivmoddi4.c:133:22
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !943; ../udivmoddi4.c:133:22
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !943; ../udivmoddi4.c:133:22
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !943; ../udivmoddi4.c:133:22
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !943; ../udivmoddi4.c:133:22
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !943; ../udivmoddi4.c:133:22
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !943; ../udivmoddi4.c:133:22
  renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r12 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !943; ../udivmoddi4.c:133:22
  renamable $r2 = MOVsi renamable $r12, 195, 14, $noreg, $noreg, debug-location !943; ../udivmoddi4.c:133:22
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !945 :: (dereferenceable load (s32) from %ir.high172); ../udivmoddi4.c:134:32
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !946; ../udivmoddi4.c:134:37
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !949 :: (store (s32) into %ir.high175); ../udivmoddi4.c:134:26
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !954 :: (dereferenceable load (s32) from %ir.low181, align 8); ../udivmoddi4.c:135:68
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !951 :: (dereferenceable load (s32) from %ir.high177); ../udivmoddi4.c:135:32
  renamable $r3 = MOVi 32, 14, $noreg, $noreg
  renamable $r3 = nuw nsw SUBrsi killed renamable $r3, killed renamable $r12, 195, 14, $noreg, $noreg, debug-location !952; ../udivmoddi4.c:135:54
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !953; ../udivmoddi4.c:135:37
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !956; ../udivmoddi4.c:135:61
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !958 :: (store (s32) into %ir.low185, align 8); ../udivmoddi4.c:135:25
  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !959 :: (dereferenceable load (s32) from %ir.all186, align 8); ../udivmoddi4.c:136:26
  renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !959 :: (dereferenceable load (s32) from %ir.all186 + 4, basealign 8); ../udivmoddi4.c:136:26
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !960; ../udivmoddi4.c:136:17

bb.33.if.end187:
; predecessors: %bb.27
  successors: %bb.34, %bb.35

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !961 :: (dereferenceable load (s32) from %ir.low189, align 8); ../udivmoddi4.c:142:55
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !962; ../udivmoddi4.c:142:37
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !965 :: (dereferenceable load (s32) from %ir.high191); ../udivmoddi4.c:142:80
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !966; ../udivmoddi4.c:142:62
  renamable $r0 = SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !967; ../udivmoddi4.c:142:60
  renamable $r0 = ADDri killed renamable $r0, 33, 14, $noreg, $noreg, debug-location !967; ../udivmoddi4.c:142:60
  STRi12 $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.9)
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !969; ../udivmoddi4.c:147:17
  Bcc %bb.35, 1, killed $cpsr, debug-location !969; ../udivmoddi4.c:147:17
  B %bb.34, debug-location !969; ../udivmoddi4.c:147:17

bb.34.if.then195:
; predecessors: %bb.33
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -24, 14, $noreg, debug-location !971 :: (store (s32) into %ir.low197, align 8); ../udivmoddi4.c:149:25
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !972 :: (dereferenceable load (s32) from %ir.low199, align 8); ../udivmoddi4.c:150:32
  STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !975 :: (store (s32) into %ir.high201); ../udivmoddi4.c:150:26
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !978 :: (store (s32) into %ir.high203); ../udivmoddi4.c:151:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !980 :: (dereferenceable load (s32) from %ir.high205); ../udivmoddi4.c:152:31
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !982 :: (store (s32) into %ir.low207, align 8); ../udivmoddi4.c:152:25
  B %bb.39, debug-location !983; ../udivmoddi4.c:153:13

bb.35.if.else208:
; predecessors: %bb.33
  successors: %bb.36, %bb.37

  $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !985 :: (load (s32) from %stack.9); ../udivmoddi4.c:154:22
  CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !985; ../udivmoddi4.c:154:22
  Bcc %bb.37, 8, killed $cpsr, debug-location !985; ../udivmoddi4.c:154:22
  B %bb.36, debug-location !985; ../udivmoddi4.c:154:22

bb.36.if.then211:
; predecessors: %bb.35
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  $r2 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !987 :: (store (s32) into %ir.low213, align 8); ../udivmoddi4.c:156:25
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !988 :: (dereferenceable load (s32) from %ir.low215, align 8); ../udivmoddi4.c:157:32
  renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !989; ../udivmoddi4.c:157:53
  renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !990; ../udivmoddi4.c:157:36
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !993 :: (store (s32) into %ir.high219); ../udivmoddi4.c:157:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !995 :: (dereferenceable load (s32) from %ir.high221); ../udivmoddi4.c:158:32
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !996; ../udivmoddi4.c:158:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !999 :: (store (s32) into %ir.high224); ../udivmoddi4.c:158:26
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1004 :: (dereferenceable load (s32) from %ir.low230, align 8); ../udivmoddi4.c:159:68
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1001 :: (dereferenceable load (s32) from %ir.high226); ../udivmoddi4.c:159:32
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !1003; ../udivmoddi4.c:159:37
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1006; ../udivmoddi4.c:159:61
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1008 :: (store (s32) into %ir.low234, align 8); ../udivmoddi4.c:159:25
  B %bb.38, debug-location !1009; ../udivmoddi4.c:160:13

bb.37.if.else235:
; predecessors: %bb.35
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !1010 :: (load (s32) from %stack.9); ../udivmoddi4.c:163:31
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1010 :: (dereferenceable load (s32) from %ir.low237, align 8); ../udivmoddi4.c:163:31
  renamable $r3 = nsw RSBri renamable $r1, 64, 14, $noreg, $noreg, debug-location !1011; ../udivmoddi4.c:163:53
  renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !1012; ../udivmoddi4.c:163:35
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !1014 :: (store (s32) into %ir.low241, align 8); ../udivmoddi4.c:163:25
  renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !1019 :: (dereferenceable load (s32) from %ir.low247, align 8); ../udivmoddi4.c:165:33
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1016 :: (dereferenceable load (s32) from %ir.high243); ../udivmoddi4.c:164:33
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !1018; ../udivmoddi4.c:164:38
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !1020; ../udivmoddi4.c:165:44
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r2, renamable $r1, 3, 14, $noreg, $noreg, debug-location !1022; ../udivmoddi4.c:164:63
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !1025 :: (store (s32) into %ir.high252); ../udivmoddi4.c:164:26
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !1028 :: (store (s32) into %ir.high254); ../udivmoddi4.c:166:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1030 :: (dereferenceable load (s32) from %ir.high256); ../udivmoddi4.c:167:31
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !1032; ../udivmoddi4.c:167:36
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1034 :: (store (s32) into %ir.low260, align 8); ../udivmoddi4.c:167:25
  B %bb.38

bb.38.if.end261:
; predecessors: %bb.37, %bb.36
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  B %bb.39

bb.39.if.end262:
; predecessors: %bb.38, %bb.34
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  $r0 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
  B %bb.48, debug-location !1035; ../udivmoddi4.c:169:9

bb.40.if.else263:
; predecessors: %bb.26
  successors: %bb.41, %bb.44

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1037 :: (dereferenceable load (s32) from %ir.high265); ../udivmoddi4.c:176:36
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !1038; ../udivmoddi4.c:176:18
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1040 :: (dereferenceable load (s32) from %ir.high267); ../udivmoddi4.c:176:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1041; ../udivmoddi4.c:176:44
  renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1042; ../udivmoddi4.c:176:42
  STRi12 $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.11)
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1044; ../udivmoddi4.c:178:17
  Bcc %bb.44, 3, killed $cpsr, debug-location !1044; ../udivmoddi4.c:178:17
  B %bb.41, debug-location !1044; ../udivmoddi4.c:178:17

bb.41.if.then271:
; predecessors: %bb.40
  successors: %bb.43, %bb.42

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !1045 :: (load (s32) from %stack.4); ../udivmoddi4.c:180:21
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1045; ../udivmoddi4.c:180:21
  Bcc %bb.43, 0, killed $cpsr, debug-location !1045; ../udivmoddi4.c:180:21
  B %bb.42, debug-location !1045; ../udivmoddi4.c:180:21

bb.42.if.then273:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !1046 :: (load (s32) from %stack.4); ../udivmoddi4.c:181:30
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1046 :: (dereferenceable load (s32) from %ir.all274, align 8); ../udivmoddi4.c:181:30
  renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1046 :: (dereferenceable load (s32) from %ir.all274 + 4, basealign 8); ../udivmoddi4.c:181:30
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !1047 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:181:26
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !1047 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:181:26
  B %bb.43, debug-location !1048; ../udivmoddi4.c:181:21

bb.43.if.end275:
; predecessors: %bb.41, %bb.42
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  $r1 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1049; ../udivmoddi4.c:182:17

bb.44.if.end276:
; predecessors: %bb.40
  successors: %bb.45, %bb.46

  $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !1050 :: (load (s32) from %stack.11); ../udivmoddi4.c:184:13
  renamable $r0 = nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1050; ../udivmoddi4.c:184:13
  STRi12 $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.12)
  renamable $r1 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !1052 :: (store (s32) into %ir.low279, align 8); ../udivmoddi4.c:187:21
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1054; ../udivmoddi4.c:188:17
  Bcc %bb.46, 1, killed $cpsr, debug-location !1054; ../udivmoddi4.c:188:17
  B %bb.45, debug-location !1054; ../udivmoddi4.c:188:17

bb.45.if.then282:
; predecessors: %bb.44
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1055 :: (dereferenceable load (s32) from %ir.low284, align 8); ../udivmoddi4.c:190:32
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !1058 :: (store (s32) into %ir.high286); ../udivmoddi4.c:190:26
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !1061 :: (store (s32) into %ir.high288); ../udivmoddi4.c:191:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1063 :: (dereferenceable load (s32) from %ir.high290); ../udivmoddi4.c:192:31
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1065 :: (store (s32) into %ir.low292, align 8); ../udivmoddi4.c:192:25
  B %bb.47, debug-location !1066; ../udivmoddi4.c:193:13

bb.46.if.else293:
; predecessors: %bb.44
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !1067 :: (load (s32) from %stack.12); ../udivmoddi4.c:196:32
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1067 :: (load (s32) from %stack.11); ../udivmoddi4.c:196:32
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1067 :: (dereferenceable load (s32) from %ir.low295, align 8); ../udivmoddi4.c:196:32
  renamable $r3 = nsw RSBri renamable $r1, 31, 14, $noreg, $noreg, debug-location !1068; ../udivmoddi4.c:196:53
  renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !1069; ../udivmoddi4.c:196:36
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !1072 :: (store (s32) into %ir.high299); ../udivmoddi4.c:196:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1074 :: (dereferenceable load (s32) from %ir.high301); ../udivmoddi4.c:197:32
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1075; ../udivmoddi4.c:197:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !1078 :: (store (s32) into %ir.high304); ../udivmoddi4.c:197:26
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1083 :: (dereferenceable load (s32) from %ir.low310, align 8); ../udivmoddi4.c:198:68
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1080 :: (dereferenceable load (s32) from %ir.high306); ../udivmoddi4.c:198:32
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !1082; ../udivmoddi4.c:198:37
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1085; ../udivmoddi4.c:198:61
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1087 :: (store (s32) into %ir.low314, align 8); ../udivmoddi4.c:198:25
  B %bb.47

bb.47.if.end315:
; predecessors: %bb.46, %bb.45
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  $r0 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.12)
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
  B %bb.48

bb.48.if.end316:
; predecessors: %bb.47, %bb.39
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1088 :: (load (s32) from %stack.10); ../udivmoddi4.c:0
  STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.49

bb.49.if.end317:
; predecessors: %bb.48, %bb.25
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !1088 :: (load (s32) from %stack.8); ../udivmoddi4.c:0
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.50, debug-location !1089; ../udivmoddi4.c:209:5

bb.50.for.cond:
; predecessors: %bb.49, %bb.52
  successors: %bb.53, %bb.51

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1088 :: (load (s32) from %stack.14); ../udivmoddi4.c:0
  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !1088 :: (load (s32) from %stack.13); ../udivmoddi4.c:0
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.16)
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.15)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1089; ../udivmoddi4.c:209:5
  Bcc %bb.53, 0, killed $cpsr, debug-location !1089; ../udivmoddi4.c:209:5
  B %bb.51, debug-location !1089; ../udivmoddi4.c:209:5

bb.51.for.body:
; predecessors: %bb.50
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1093 :: (load (s32) from %stack.16); ../udivmoddi4.c:212:43
  renamable $r1 = LDRi12 $r11, -32, 14, $noreg, debug-location !1093 :: (dereferenceable load (s32) from %ir.low324, align 8); ../udivmoddi4.c:212:43
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !1092 :: (dereferenceable load (s32) from %ir.high321); ../udivmoddi4.c:212:25
  renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !1094; ../udivmoddi4.c:212:36
  renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !1094; ../udivmoddi4.c:212:36
  STRi12 killed renamable $r2, $r11, -28, 14, $noreg, debug-location !1097 :: (store (s32) into %ir.high328); ../udivmoddi4.c:212:18
  renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !1099 :: (dereferenceable load (s32) from %ir.high333); ../udivmoddi4.c:213:43
  renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !1100; ../udivmoddi4.c:213:36
  renamable $r1 = ORRrsi killed renamable $r1, killed renamable $r2, 251, 14, $noreg, $noreg, debug-location !1100; ../udivmoddi4.c:213:36
  STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !1102 :: (store (s32) into %ir.low337, align 8); ../udivmoddi4.c:213:18
  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1105 :: (dereferenceable load (s32) from %ir.low342, align 8); ../udivmoddi4.c:214:43
  renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !1104 :: (dereferenceable load (s32) from %ir.high339); ../udivmoddi4.c:214:25
  renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !1106; ../udivmoddi4.c:214:36
  renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !1106; ../udivmoddi4.c:214:36
  STRi12 killed renamable $r2, $r11, -20, 14, $noreg, debug-location !1109 :: (store (s32) into %ir.high346); ../udivmoddi4.c:214:18
  renamable $r0 = ORRrsi renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !1111; ../udivmoddi4.c:215:36
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !1113 :: (store (s32) into %ir.low352, align 8); ../udivmoddi4.c:215:18
  renamable $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !1114 :: (dereferenceable load (s32) from %ir.all354, align 8); ../udivmoddi4.c:223:37
  renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !1114 :: (dereferenceable load (s32) from %ir.all354 + 4, basealign 8); ../udivmoddi4.c:223:37
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !1115 :: (dereferenceable load (s32) from %ir.all355, align 8); ../udivmoddi4.c:223:45
  renamable $r1 = LDRi12 $r11, -28, 14, $noreg, debug-location !1115 :: (dereferenceable load (s32) from %ir.all355 + 4, basealign 8); ../udivmoddi4.c:223:45
  renamable $r3 = MVNr renamable $r1, 14, $noreg, $noreg, debug-location !1116; ../udivmoddi4.c:223:49
  renamable $lr = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !1116; ../udivmoddi4.c:223:49
  dead renamable $lr = ADDrr renamable $r12, killed renamable $lr, 14, $noreg, def $cpsr, debug-location !1116; ../udivmoddi4.c:223:49
  renamable $r3 = ADCrr renamable $r2, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1116; ../udivmoddi4.c:223:49
  STRi12 $r3, $sp, 0, 14, $noreg :: (store (s32) into %stack.17)
  renamable $r12 = SUBrr renamable $r0, killed renamable $r12, 14, $noreg, def $cpsr, debug-location !1119; ../udivmoddi4.c:225:15
  renamable $r2 = SBCrr renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1119; ../udivmoddi4.c:225:15
  CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !1119; ../udivmoddi4.c:225:15
  $r0 = MOVr killed renamable $r12, 4, killed $cpsr, $noreg, implicit renamable $r0, debug-location !1119; ../udivmoddi4.c:225:15
  CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !1119; ../udivmoddi4.c:225:15
  $r1 = MOVr killed renamable $r2, 4, killed $cpsr, $noreg, implicit renamable $r1, debug-location !1119; ../udivmoddi4.c:225:15
  STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !1119 :: (store (s32) into %ir.all363 + 4, basealign 8); ../udivmoddi4.c:225:15
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1119 :: (store (s32) into %ir.all363, align 8); ../udivmoddi4.c:225:15
  B %bb.52, debug-location !1120; ../udivmoddi4.c:226:5

bb.52.for.inc:
; predecessors: %bb.51
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1121 :: (load (s32) from %stack.15); ../udivmoddi4.c:224:19
  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1121 :: (load (s32) from %stack.17); ../udivmoddi4.c:224:19
  renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !1121; ../udivmoddi4.c:224:19
  renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1123; ../udivmoddi4.c:209:20
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.50, debug-location !1089; ../udivmoddi4.c:209:5

bb.53.for.end:
; predecessors: %bb.50
  successors: %bb.55, %bb.54

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !1125 :: (load (s32) from %stack.4); ../udivmoddi4.c:227:16
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1125 :: (load (s32) from %stack.16); ../udivmoddi4.c:227:16
  renamable $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1125 :: (dereferenceable load (s32) from %ir.all365, align 8); ../udivmoddi4.c:227:16
  renamable $r1 = LDRi12 $r11, -20, 14, $noreg, debug-location !1125 :: (dereferenceable load (s32) from %ir.all365 + 4, basealign 8); ../udivmoddi4.c:227:16
  renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !1126; ../udivmoddi4.c:227:20
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r3, 251, 14, $noreg, $noreg, debug-location !1126; ../udivmoddi4.c:227:20
  renamable $r2 = ORRrsi renamable $r2, killed renamable $r3, 10, 14, $noreg, $noreg, debug-location !1128; ../udivmoddi4.c:227:26
  STRi12 killed renamable $r2, $r11, -24, 14, $noreg, debug-location !1130 :: (store (s32) into %ir.all369, align 8); ../udivmoddi4.c:227:11
  STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !1130 :: (store (s32) into %ir.all369 + 4, basealign 8); ../udivmoddi4.c:227:11
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1131; ../udivmoddi4.c:228:9
  Bcc %bb.55, 0, killed $cpsr, debug-location !1131; ../udivmoddi4.c:228:9
  B %bb.54, debug-location !1131; ../udivmoddi4.c:228:9

bb.54.if.then371:
; predecessors: %bb.53
  successors: %bb.55(0x80000000); %bb.55(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !1132 :: (load (s32) from %stack.4); ../udivmoddi4.c:229:18
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !1132 :: (dereferenceable load (s32) from %ir.all372, align 8); ../udivmoddi4.c:229:18
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !1132 :: (dereferenceable load (s32) from %ir.all372 + 4, basealign 8); ../udivmoddi4.c:229:18
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !1133 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:229:14
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !1133 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:229:14
  B %bb.55, debug-location !1134; ../udivmoddi4.c:229:9

bb.55.if.end373:
; predecessors: %bb.53, %bb.54
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1135 :: (dereferenceable load (s32) from %ir.all374, align 8); ../udivmoddi4.c:230:14
  renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1135 :: (dereferenceable load (s32) from %ir.all374 + 4, basealign 8); ../udivmoddi4.c:230:14
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1136; ../udivmoddi4.c:230:5

bb.56.return:
; predecessors: %bb.43, %bb.32, %bb.31, %bb.55, %bb.24, %bb.20, %bb.16, %bb.12, %bb.7, %bb.4

  $r0 = LDRi12 $sp, 44, 14, $noreg, debug-location !1088 :: (load (s32) from %stack.6); ../udivmoddi4.c:0
  $r1 = LDRi12 $r11, -40, 14, $noreg, debug-location !1088 :: (load (s32) from %stack.5); ../udivmoddi4.c:0
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1137; ../udivmoddi4.c:231:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1137; ../udivmoddi4.c:231:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1137; ../udivmoddi4.c:231:1

bb.57 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __udivmoddi4.

# Machine code for function __divmoddi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-36]
  fi#3: size=4, align=4, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-4]
  fi#5: size=4, align=4, at location [SP-8]
  fi#6: size=4, align=4, at location [SP-12]
  fi#7: size=4, align=4, at location [SP-16]
  fi#8: size=4, align=4, at location [SP-20]
  fi#9: size=4, align=4, at location [SP-24]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r7, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r7, -12
  frame-setup CFI_INSTRUCTION offset $r6, -16
  frame-setup CFI_INSTRUCTION offset $r5, -20
  frame-setup CFI_INSTRUCTION offset $r4, -24
  $r11 = frame-setup ADDri killed $sp, 16, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  STRi12 $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.0)
  $r5 = MOVr killed $r2, 14, $noreg, $noreg
  STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  dead renamable $r2 = KILL renamable $r3
  dead renamable $r2 = KILL renamable $r5
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  renamable $r2 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
  STRi12 $r2, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  $r2 = MOVr $r5, 14, $noreg, $noreg, debug-location !1139; ../divmoddi4.c:22:14
  BL_pred @__divdi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1139; ../divmoddi4.c:22:14
  $r12 = LDRi12 $sp, 0, 14, $noreg, debug-location !1139 :: (load (s32) from %stack.3); ../divmoddi4.c:22:14
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1139 :: (load (s32) from %stack.2); ../divmoddi4.c:22:14
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1139 :: (load (s32) from %stack.1); ../divmoddi4.c:22:14
  $lr = LDRi12 $sp, 12, 14, $noreg, debug-location !1139 :: (load (s32) from %stack.0); ../divmoddi4.c:22:14
  early-clobber renamable $r4, early-clobber renamable $r7 = UMULLv5 renamable $r0, renamable $r5, 14, $noreg, $noreg, debug-location !1140; ../divmoddi4.c:23:16
  early-clobber renamable $r6 = MLAv5 renamable $r0, killed renamable $lr, killed renamable $r7, 14, $noreg, $noreg, debug-location !1140; ../divmoddi4.c:23:16
  early-clobber renamable $lr = MLAv5 renamable $r1, killed renamable $r5, killed renamable $r6, 14, $noreg, $noreg, debug-location !1140; ../divmoddi4.c:23:16
  renamable $r12 = SUBrr killed renamable $r12, killed renamable $r4, 14, $noreg, def $cpsr, debug-location !1141; ../divmoddi4.c:23:12
  renamable $r2 = SBCrr killed renamable $r2, killed renamable $lr, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1141; ../divmoddi4.c:23:12
  STRi12 killed renamable $r12, renamable $r3, 0, 14, $noreg, debug-location !1142 :: (store (s32) into %ir.rem, align 8); ../divmoddi4.c:23:8
  STRi12 killed renamable $r2, killed renamable $r3, 4, 14, $noreg, debug-location !1142 :: (store (s32) into %ir.rem + 4, basealign 8); ../divmoddi4.c:23:8
  $sp = frame-destroy SUBri killed $r11, 16, 14, $noreg, $noreg, debug-location !1143; ../divmoddi4.c:24:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r5, def $r6, def $r7, def $r11, def $lr, debug-location !1143; ../divmoddi4.c:24:3
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1143; ../divmoddi4.c:24:3

# End machine code for function __divmoddi4.

# Machine code for function __divmodsi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-4]
  fi#4: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  liveins: $r0, $r1, $r2, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1145; ../divmodsi4.c:22:14
  $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !1145 :: (load (s32) from %stack.2); ../divmodsi4.c:22:14
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1145 :: (load (s32) from %stack.1); ../divmodsi4.c:22:14
  $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1145 :: (load (s32) from %stack.0); ../divmodsi4.c:22:14
  early-clobber renamable $r3 = nsw MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !1146; ../divmodsi4.c:23:16
  renamable $r1 = nsw SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1147; ../divmodsi4.c:23:12
  STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !1148 :: (store (s32) into %ir.rem); ../divmodsi4.c:23:8
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1149; ../divmodsi4.c:24:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1149; ../divmodsi4.c:24:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1149; ../divmodsi4.c:24:3

# End machine code for function __divmodsi4.

# Machine code for function __divsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  $r3 = MOVr killed $r1, 14, $noreg, $noreg
  $r1 = MOVr killed $r0, 14, $noreg, $noreg
  renamable $r2 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !1151; ../divsi3.c:25:20
  renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !1153; ../divsi3.c:27:12
  renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 249, 14, $noreg, $noreg, debug-location !1154; ../divsi3.c:27:19
  renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1155; ../divsi3.c:28:12
  renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1156; ../divsi3.c:28:19
  renamable $r2 = EORrsi killed renamable $r2, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !1157; ../divsi3.c:29:9
  STRi12 $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1158; ../divsi3.c:36:22
  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1158 :: (load (s32) from %stack.0); ../divsi3.c:36:22
  renamable $r0 = EORrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1159; ../divsi3.c:36:33
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1160; ../divsi3.c:36:40
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1161; ../divsi3.c:36:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1161; ../divsi3.c:36:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1161; ../divsi3.c:36:5

# End machine code for function __divsi3.

# Machine code for function __ffsdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 12, 14, $noreg, debug-location !1164 :: (store (s32) into %ir.all + 4, basealign 8); ../ffsdi2.c:25:11
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg, debug-location !1164 :: (store (s32) into %ir.all, align 8); ../ffsdi2.c:25:11
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1165 :: (dereferenceable load (s32) from %ir.low, align 8); ../ffsdi2.c:26:13
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1167; ../ffsdi2.c:26:9
  Bcc %bb.4, 1, killed $cpsr, debug-location !1167; ../ffsdi2.c:26:9
  B %bb.1, debug-location !1167; ../ffsdi2.c:26:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1169 :: (dereferenceable load (s32) from %ir.high); ../ffsdi2.c:28:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1171; ../ffsdi2.c:28:13
  Bcc %bb.3, 1, killed $cpsr, debug-location !1171; ../ffsdi2.c:28:13
  B %bb.2, debug-location !1171; ../ffsdi2.c:28:13

bb.2.if.then3:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.5, debug-location !1172; ../ffsdi2.c:29:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1174 :: (dereferenceable load (s32) from %ir.high5); ../ffsdi2.c:30:34
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1175; ../ffsdi2.c:30:16
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1175; ../ffsdi2.c:30:16
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1175; ../ffsdi2.c:30:16
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1175; ../ffsdi2.c:30:16
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1175; ../ffsdi2.c:30:16
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1175; ../ffsdi2.c:30:16
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1175; ../ffsdi2.c:30:16
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1175; ../ffsdi2.c:30:16
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1175; ../ffsdi2.c:30:16
  renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1175; ../ffsdi2.c:30:16
  renamable $r0 = MOVi 33, 14, $noreg, $noreg
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1176; ../ffsdi2.c:30:40
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.5, debug-location !1177; ../ffsdi2.c:30:9

bb.4.if.end6:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1178 :: (dereferenceable load (s32) from %ir.low8, align 8); ../ffsdi2.c:32:30
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1179; ../ffsdi2.c:32:12
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1179; ../ffsdi2.c:32:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1179; ../ffsdi2.c:32:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1179; ../ffsdi2.c:32:12
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1179; ../ffsdi2.c:32:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1179; ../ffsdi2.c:32:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1179; ../ffsdi2.c:32:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1179; ../ffsdi2.c:32:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1179; ../ffsdi2.c:32:12
  renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1179; ../ffsdi2.c:32:12
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1180; ../ffsdi2.c:32:35
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.5, debug-location !1181; ../ffsdi2.c:32:5

bb.5.return:
; predecessors: %bb.4, %bb.3, %bb.2

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1182 :: (load (s32) from %stack.1); ../ffsdi2.c:0
  $sp = frame-destroy ADDri killed $sp, 16, 14, $noreg, $noreg, debug-location !1183; ../ffsdi2.c:33:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1183; ../ffsdi2.c:33:1

bb.6 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __ffsdi2.

# Machine code for function __ffssi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1186; ../ffssi2.c:24:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !1186; ../ffssi2.c:24:9
  B %bb.1, debug-location !1186; ../ffssi2.c:24:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.3, debug-location !1187; ../ffssi2.c:26:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1188 :: (load (s32) from %stack.0); ../ffssi2.c:28:12
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1188; ../ffssi2.c:28:12
  renamable $r0 = BICrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1188; ../ffssi2.c:28:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1188; ../ffssi2.c:28:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1188; ../ffssi2.c:28:12
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1188; ../ffssi2.c:28:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1188; ../ffssi2.c:28:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1188; ../ffssi2.c:28:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1188; ../ffssi2.c:28:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1188; ../ffssi2.c:28:12
  renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1188; ../ffssi2.c:28:12
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1189; ../ffssi2.c:28:29
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.3, debug-location !1190; ../ffssi2.c:28:5

bb.3.return:
; predecessors: %bb.2, %bb.1

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1191 :: (load (s32) from %stack.1); ../ffssi2.c:0
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !1192; ../ffssi2.c:29:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1192; ../ffssi2.c:29:1

bb.4 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __ffssi2.

# Machine code for function __lshrdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.2, %bb.1
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 40
  STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  $r3 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  $r3 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !1195 :: (store (s32) into %ir.all + 4, basealign 8); ../lshrdi3.c:29:15
  STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !1195 :: (store (s32) into %ir.all, align 8); ../lshrdi3.c:29:15
  TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !1197; ../lshrdi3.c:30:9
  Bcc %bb.2, 0, killed $cpsr, debug-location !1197; ../lshrdi3.c:30:9
  B %bb.1, debug-location !1197; ../lshrdi3.c:30:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !1200 :: (store (s32) into %ir.high); ../lshrdi3.c:32:23
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1202 :: (dereferenceable load (s32) from %ir.high2); ../lshrdi3.c:33:32
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !1203; ../lshrdi3.c:33:43
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !1204; ../lshrdi3.c:33:37
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !1206 :: (store (s32) into %ir.low, align 8); ../lshrdi3.c:33:22
  B %bb.5, debug-location !1207; ../lshrdi3.c:34:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1209 :: (load (s32) from %stack.4); ../lshrdi3.c:37:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1209; ../lshrdi3.c:37:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !1209; ../lshrdi3.c:37:13
  B %bb.3, debug-location !1209; ../lshrdi3.c:37:13

bb.3.if.then4:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
  $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !1210; ../lshrdi3.c:38:13

bb.4.if.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !1212 :: (load (s32) from %stack.4); ../lshrdi3.c:39:34
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1212 :: (dereferenceable load (s32) from %ir.high6); ../lshrdi3.c:39:34
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1213; ../lshrdi3.c:39:39
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !1216 :: (store (s32) into %ir.high9); ../lshrdi3.c:39:24
  renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !1221 :: (dereferenceable load (s32) from %ir.low14, align 8); ../lshrdi3.c:40:72
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1218 :: (dereferenceable load (s32) from %ir.high11); ../lshrdi3.c:40:33
  renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !1219; ../lshrdi3.c:40:55
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !1220; ../lshrdi3.c:40:38
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1223; ../lshrdi3.c:40:61
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !1225 :: (store (s32) into %ir.low17, align 8); ../lshrdi3.c:40:22
  B %bb.5

bb.5.if.end18:
; predecessors: %bb.1, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1226 :: (dereferenceable load (s32) from %ir.all19, align 8); ../lshrdi3.c:42:19
  renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1226 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../lshrdi3.c:42:19
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !1227; ../lshrdi3.c:42:5

bb.6.return:
; predecessors: %bb.5, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1228 :: (load (s32) from %stack.6); ../lshrdi3.c:0
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1228 :: (load (s32) from %stack.5); ../lshrdi3.c:0
  $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !1229; ../lshrdi3.c:43:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1229; ../lshrdi3.c:43:1

# End machine code for function __lshrdi3.

# Machine code for function __moddi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  $r12 = MOVr killed $r1, 14, $noreg, $noreg
  STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  dead renamable $r1 = KILL renamable $r3
  dead renamable $r1 = KILL renamable $r2
  dead renamable $r1 = KILL renamable $r12
  dead renamable $r1 = KILL renamable $r0
  renamable $r1 = ADDrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !1231; ../moddi3.c:24:17
  renamable $r2 = EORrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1231; ../moddi3.c:24:17
  renamable $r1 = ADCrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1231; ../moddi3.c:24:17
  renamable $r3 = EORrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !1231; ../moddi3.c:24:17
  renamable $r0 = EORrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1233; ../moddi3.c:26:12
  renamable $r1 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1233; ../moddi3.c:26:12
  renamable $r0 = SUBrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !1234; ../moddi3.c:26:17
  renamable $r1 = SBCrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1234; ../moddi3.c:26:17
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1235; ../moddi3.c:28:5
  renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1235 :: (store (s32) into stack); ../moddi3.c:28:5
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1235; ../moddi3.c:28:5
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1235 :: (load (s32) from %stack.1); ../moddi3.c:28:5
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1236 :: (dereferenceable load (s32) from %ir.r, align 8); ../moddi3.c:29:21
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1236 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../moddi3.c:29:21
  renamable $r1 = EORrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1237; ../moddi3.c:29:23
  renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1237; ../moddi3.c:29:23
  renamable $r0 = SUBrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !1238; ../moddi3.c:29:28
  renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1238; ../moddi3.c:29:28
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1239; ../moddi3.c:29:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1239; ../moddi3.c:29:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1239; ../moddi3.c:29:5

# End machine code for function __moddi3.

# Machine code for function __modsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1241; ../modsi3.c:22:16
  $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !1241 :: (load (s32) from %stack.1); ../modsi3.c:22:16
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1241; ../modsi3.c:22:16
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1242 :: (load (s32) from %stack.0); ../modsi3.c:22:31
  early-clobber renamable $r1 = nsw MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1242; ../modsi3.c:22:31
  renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1243; ../modsi3.c:22:14
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1244; ../modsi3.c:22:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1244; ../modsi3.c:22:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1244; ../modsi3.c:22:5

# End machine code for function __modsi3.

# Machine code for function __mulvdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-44]
  fi#7: size=4, align=4, at location [SP-48]
  fi#8: size=4, align=4, at location [SP-52]
  fi#9: size=4, align=4, at location [SP-56]
  fi#10: size=4, align=4, at location [SP-60]
  fi#11: size=4, align=4, at location [SP-64]
  fi#12: size=4, align=4, at location [SP-4]
  fi#13: size=4, align=4, at location [SP-8]
  fi#14: size=4, align=4, at location [SP-12]
  fi#15: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str.8, align=4
  cp#1: @__func__.__mulvdi3, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.5
  liveins: $r0, $r1, $r2, $r3, $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 48, 14, $noreg, $noreg
  STRi12 killed $r3, $r11, -24, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r2, $r11, -20, 14, $noreg :: (store (s32) into %stack.2)
  $r2 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r2, $r11, -16, 14, $noreg :: (store (s32) into %stack.1)
  $r2 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r2, $r11, -12, 14, $noreg :: (store (s32) into %stack.0)
  renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !1246; ../mulvdi3.c:27:11
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1246; ../mulvdi3.c:27:11
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1247; ../mulvdi3.c:27:9
  Bcc %bb.5, 1, killed $cpsr, debug-location !1247; ../mulvdi3.c:27:9
  B %bb.1, debug-location !1247; ../mulvdi3.c:27:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1248 :: (load (s32) from %stack.2); ../mulvdi3.c:29:15
  $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1248 :: (load (s32) from %stack.3); ../mulvdi3.c:29:15
  renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1248; ../mulvdi3.c:29:15
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1249; ../mulvdi3.c:29:20
  Bcc %bb.3, 0, killed $cpsr, debug-location !1249; ../mulvdi3.c:29:20
  B %bb.2, debug-location !1249; ../mulvdi3.c:29:20

bb.2.lor.lhs.false:
; predecessors: %bb.1
  successors: %bb.3, %bb.4

  $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1250 :: (load (s32) from %stack.3); ../mulvdi3.c:29:25
  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1250 :: (load (s32) from %stack.2); ../mulvdi3.c:29:25
  renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1250; ../mulvdi3.c:29:25
  renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1250; ../mulvdi3.c:29:25
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1251; ../mulvdi3.c:29:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !1251; ../mulvdi3.c:29:13
  B %bb.3, debug-location !1251; ../mulvdi3.c:29:13

bb.3.if.then3:
; predecessors: %bb.1, %bb.2
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1252; ../mulvdi3.c:30:13

bb.4.if.end:
; predecessors: %bb.2

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1253 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1253 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
  renamable $r1 = MOVi 31, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1253; ../mulvdi3.c:31:9

bb.5.if.end4:
; predecessors: %bb.0
  successors: %bb.6, %bb.10

  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1254 :: (load (s32) from %stack.2); ../mulvdi3.c:33:11
  $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1254 :: (load (s32) from %stack.3); ../mulvdi3.c:33:11
  renamable $r1 = EORri renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !1254; ../mulvdi3.c:33:11
  renamable $r0 = ORRrr renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1254; ../mulvdi3.c:33:11
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1255; ../mulvdi3.c:33:9
  Bcc %bb.10, 1, killed $cpsr, debug-location !1255; ../mulvdi3.c:33:9
  B %bb.6, debug-location !1255; ../mulvdi3.c:33:9

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.8, %bb.7

  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1256 :: (load (s32) from %stack.0); ../mulvdi3.c:35:15
  $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1256 :: (load (s32) from %stack.1); ../mulvdi3.c:35:15
  renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1256; ../mulvdi3.c:35:15
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1257; ../mulvdi3.c:35:20
  Bcc %bb.8, 0, killed $cpsr, debug-location !1257; ../mulvdi3.c:35:20
  B %bb.7, debug-location !1257; ../mulvdi3.c:35:20

bb.7.lor.lhs.false8:
; predecessors: %bb.6
  successors: %bb.8, %bb.9

  $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1258 :: (load (s32) from %stack.1); ../mulvdi3.c:35:25
  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1258 :: (load (s32) from %stack.0); ../mulvdi3.c:35:25
  renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1258; ../mulvdi3.c:35:25
  renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1258; ../mulvdi3.c:35:25
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1259; ../mulvdi3.c:35:13
  Bcc %bb.9, 1, killed $cpsr, debug-location !1259; ../mulvdi3.c:35:13
  B %bb.8, debug-location !1259; ../mulvdi3.c:35:13

bb.8.if.then10:
; predecessors: %bb.6, %bb.7
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1260; ../mulvdi3.c:36:13

bb.9.if.end12:
; predecessors: %bb.7

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1261 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1261 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
  renamable $r1 = MOVi 37, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1261; ../mulvdi3.c:37:9

bb.10.if.end13:
; predecessors: %bb.5
  successors: %bb.12, %bb.11

  $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1262 :: (load (s32) from %stack.3); ../mulvdi3.c:39:19
  $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !1262 :: (load (s32) from %stack.2); ../mulvdi3.c:39:19
  $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !1262 :: (load (s32) from %stack.1); ../mulvdi3.c:39:19
  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1262 :: (load (s32) from %stack.0); ../mulvdi3.c:39:19
  renamable $r1 = MOVsi renamable $r12, 249, 14, $noreg, $noreg, debug-location !1262; ../mulvdi3.c:39:19
  STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.11)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.10)
  renamable $r1 = EORrsi renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1263; ../mulvdi3.c:40:23
  renamable $r0 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1263; ../mulvdi3.c:40:23
  renamable $r1 = SUBrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !1264; ../mulvdi3.c:40:29
  STRi12 $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.9)
  renamable $r0 = SBCrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1264; ../mulvdi3.c:40:29
  STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.8)
  renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !1265; ../mulvdi3.c:41:19
  STRi12 $r12, $sp, 16, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r12, $sp, 20, 14, $noreg :: (store (s32) into %stack.6)
  renamable $r12 = EORrsi renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1266; ../mulvdi3.c:42:23
  renamable $r2 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1266; ../mulvdi3.c:42:23
  renamable $r12 = SUBrsi killed renamable $r12, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !1267; ../mulvdi3.c:42:29
  STRi12 killed $r12, $sp, 24, 14, $noreg :: (store (s32) into %stack.5)
  renamable $r2 = SBCrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1267; ../mulvdi3.c:42:29
  STRi12 killed $r2, $sp, 28, 14, $noreg :: (store (s32) into %stack.4)
  dead renamable $r1 = SUBri renamable $r1, 2, 14, $noreg, def $cpsr, debug-location !1268; ../mulvdi3.c:43:15
  dead renamable $r0 = SBCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1268; ../mulvdi3.c:43:15
  Bcc %bb.12, 11, killed $cpsr, debug-location !1269; ../mulvdi3.c:43:19
  B %bb.11, debug-location !1269; ../mulvdi3.c:43:19

bb.11.lor.lhs.false18:
; predecessors: %bb.10
  successors: %bb.12, %bb.13

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1270 :: (load (s32) from %stack.4); ../mulvdi3.c:43:28
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1270 :: (load (s32) from %stack.5); ../mulvdi3.c:43:28
  dead renamable $r1 = RSBri renamable $r1, 1, 14, $noreg, def $cpsr, debug-location !1270; ../mulvdi3.c:43:28
  dead renamable $r0 = RSCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1270; ../mulvdi3.c:43:28
  Bcc %bb.13, 11, killed $cpsr, debug-location !1271; ../mulvdi3.c:43:9
  B %bb.12, debug-location !1271; ../mulvdi3.c:43:9

bb.12.if.then20:
; predecessors: %bb.10, %bb.11
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1272; ../mulvdi3.c:44:9

bb.13.if.end22:
; predecessors: %bb.11
  successors: %bb.14, %bb.17

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1273 :: (load (s32) from %stack.10); ../mulvdi3.c:45:12
  $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !1273 :: (load (s32) from %stack.6); ../mulvdi3.c:45:12
  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1273 :: (load (s32) from %stack.11); ../mulvdi3.c:45:12
  $r3 = LDRi12 $sp, 16, 14, $noreg, debug-location !1273 :: (load (s32) from %stack.7); ../mulvdi3.c:45:12
  renamable $r0 = EORrr renamable $r0, renamable $r3, 14, $noreg, $noreg, debug-location !1273; ../mulvdi3.c:45:12
  renamable $r1 = EORrr renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !1273; ../mulvdi3.c:45:12
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1273; ../mulvdi3.c:45:12
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1274; ../mulvdi3.c:45:9
  Bcc %bb.17, 1, killed $cpsr, debug-location !1274; ../mulvdi3.c:45:9
  B %bb.14, debug-location !1274; ../mulvdi3.c:45:9

bb.14.if.then24:
; predecessors: %bb.13
  successors: %bb.15, %bb.16

  $r3 = LDRi12 $sp, 28, 14, $noreg, debug-location !1275 :: (load (s32) from %stack.4); ../mulvdi3.c:47:25
  $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !1275 :: (load (s32) from %stack.5); ../mulvdi3.c:47:25
  renamable $r0 = MVNi 0, 14, $noreg, $noreg
  renamable $r1 = MVNi -2147483648, 14, $noreg, $noreg
  BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1275; ../mulvdi3.c:47:25
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1275 :: (load (s32) from %stack.9); ../mulvdi3.c:47:25
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1275; ../mulvdi3.c:47:25
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1275 :: (load (s32) from %stack.8); ../mulvdi3.c:47:25
  dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1276; ../mulvdi3.c:47:19
  dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1276; ../mulvdi3.c:47:19
  Bcc %bb.16, 10, killed $cpsr, debug-location !1277; ../mulvdi3.c:47:13
  B %bb.15, debug-location !1277; ../mulvdi3.c:47:13

bb.15.if.then26:
; predecessors: %bb.14

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1278 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1278 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
  renamable $r1 = MOVi 48, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1278; ../mulvdi3.c:48:13

bb.16.if.end27:
; predecessors: %bb.14
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20, debug-location !1279; ../mulvdi3.c:49:5

bb.17.if.else:
; predecessors: %bb.13
  successors: %bb.18, %bb.19

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1280 :: (load (s32) from %stack.4); ../mulvdi3.c:52:27
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1280 :: (load (s32) from %stack.5); ../mulvdi3.c:52:27
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !1280; ../mulvdi3.c:52:27
  renamable $r3 = RSCri renamable $r0, 0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1280; ../mulvdi3.c:52:27
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  renamable $r1 = MOVi -2147483648, 14, $noreg, $noreg
  BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1281; ../mulvdi3.c:52:25
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1281 :: (load (s32) from %stack.9); ../mulvdi3.c:52:25
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1281; ../mulvdi3.c:52:25
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1281 :: (load (s32) from %stack.8); ../mulvdi3.c:52:25
  dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1282; ../mulvdi3.c:52:19
  dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1282; ../mulvdi3.c:52:19
  Bcc %bb.19, 10, killed $cpsr, debug-location !1283; ../mulvdi3.c:52:13
  B %bb.18, debug-location !1283; ../mulvdi3.c:52:13

bb.18.if.then31:
; predecessors: %bb.17

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1284 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1284 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
  renamable $r1 = MOVi 53, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1284; ../mulvdi3.c:53:13

bb.19.if.end32:
; predecessors: %bb.17
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20

bb.20.if.end33:
; predecessors: %bb.19, %bb.16
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1285; ../mulvdi3.c:55:5

bb.21.return:
; predecessors: %bb.20, %bb.12, %bb.8, %bb.3

  $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !1286 :: (load (s32) from %stack.1); ../mulvdi3.c:0
  $r3 = LDRi12 $r11, -20, 14, $noreg, debug-location !1286 :: (load (s32) from %stack.2); ../mulvdi3.c:0
  $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !1286 :: (load (s32) from %stack.0); ../mulvdi3.c:0
  $lr = LDRi12 $r11, -24, 14, $noreg, debug-location !1286 :: (load (s32) from %stack.3); ../mulvdi3.c:0
  early-clobber renamable $r0, early-clobber renamable $r4 = UMULLv5 renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !1286; ../mulvdi3.c:0
  early-clobber renamable $r12 = MLAv5 killed renamable $r1, killed renamable $lr, killed renamable $r4, 14, $noreg, $noreg, debug-location !1286; ../mulvdi3.c:0
  early-clobber renamable $r1 = MLAv5 killed renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !1286; ../mulvdi3.c:0
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg, debug-location !1287; ../mulvdi3.c:56:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr, debug-location !1287; ../mulvdi3.c:56:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1287; ../mulvdi3.c:56:1

bb.22 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __mulvdi3.

# Machine code for function __mulvsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.9, align=4
  cp#1: @__func__.__mulvsi3, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.5
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  STRi12 killed $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !1290; ../mulvsi3.c:27:9
  Bcc %bb.5, 1, killed $cpsr, debug-location !1290; ../mulvsi3.c:27:9
  B %bb.1, debug-location !1290; ../mulvsi3.c:27:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1292 :: (load (s32) from %stack.1); ../mulvsi3.c:29:20
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1292; ../mulvsi3.c:29:20
  Bcc %bb.3, 0, killed $cpsr, debug-location !1292; ../mulvsi3.c:29:20
  B %bb.2, debug-location !1292; ../mulvsi3.c:29:20

bb.2.lor.lhs.false:
; predecessors: %bb.1
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1294 :: (load (s32) from %stack.1); ../mulvsi3.c:29:13
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1294; ../mulvsi3.c:29:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !1294; ../mulvsi3.c:29:13
  B %bb.3, debug-location !1294; ../mulvsi3.c:29:13

bb.3.if.then3:
; predecessors: %bb.1, %bb.2
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1295; ../mulvsi3.c:30:13

bb.4.if.end:
; predecessors: %bb.2

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1296 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1296 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
  renamable $r1 = MOVi 31, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1296; ../mulvsi3.c:31:9

bb.5.if.end4:
; predecessors: %bb.0
  successors: %bb.6, %bb.10

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1298 :: (load (s32) from %stack.1); ../mulvsi3.c:33:9
  CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !1298; ../mulvsi3.c:33:9
  Bcc %bb.10, 1, killed $cpsr, debug-location !1298; ../mulvsi3.c:33:9
  B %bb.6, debug-location !1298; ../mulvsi3.c:33:9

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.8, %bb.7

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1300 :: (load (s32) from %stack.0); ../mulvsi3.c:35:20
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1300; ../mulvsi3.c:35:20
  Bcc %bb.8, 0, killed $cpsr, debug-location !1300; ../mulvsi3.c:35:20
  B %bb.7, debug-location !1300; ../mulvsi3.c:35:20

bb.7.lor.lhs.false8:
; predecessors: %bb.6
  successors: %bb.8, %bb.9

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1302 :: (load (s32) from %stack.0); ../mulvsi3.c:35:13
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1302; ../mulvsi3.c:35:13
  Bcc %bb.9, 1, killed $cpsr, debug-location !1302; ../mulvsi3.c:35:13
  B %bb.8, debug-location !1302; ../mulvsi3.c:35:13

bb.8.if.then10:
; predecessors: %bb.6, %bb.7
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1303; ../mulvsi3.c:36:13

bb.9.if.end12:
; predecessors: %bb.7

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1304 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1304 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
  renamable $r1 = MOVi 37, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1304; ../mulvsi3.c:37:9

bb.10.if.end13:
; predecessors: %bb.5
  successors: %bb.12, %bb.11

  $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !1305 :: (load (s32) from %stack.1); ../mulvsi3.c:39:19
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1305 :: (load (s32) from %stack.0); ../mulvsi3.c:39:19
  renamable $r0 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !1305; ../mulvsi3.c:39:19
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.5)
  renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !1306; ../mulvsi3.c:40:23
  renamable $r0 = nsw SUBrsi killed renamable $r0, renamable $r1, 249, 14, $noreg, $noreg, debug-location !1307; ../mulvsi3.c:40:29
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.4)
  renamable $r1 = MOVsi renamable $r2, 249, 14, $noreg, $noreg, debug-location !1308; ../mulvsi3.c:41:19
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.3)
  renamable $r1 = EORrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1309; ../mulvsi3.c:42:23
  renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1310; ../mulvsi3.c:42:29
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.2)
  CMPri renamable $r0, 2, 14, $noreg, implicit-def $cpsr, debug-location !1312; ../mulvsi3.c:43:19
  Bcc %bb.12, 11, killed $cpsr, debug-location !1312; ../mulvsi3.c:43:19
  B %bb.11, debug-location !1312; ../mulvsi3.c:43:19

bb.11.lor.lhs.false18:
; predecessors: %bb.10
  successors: %bb.12, %bb.13

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1314 :: (load (s32) from %stack.2); ../mulvsi3.c:43:9
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1314; ../mulvsi3.c:43:9
  Bcc %bb.13, 12, killed $cpsr, debug-location !1314; ../mulvsi3.c:43:9
  B %bb.12, debug-location !1314; ../mulvsi3.c:43:9

bb.12.if.then20:
; predecessors: %bb.10, %bb.11
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1315; ../mulvsi3.c:44:9

bb.13.if.end22:
; predecessors: %bb.11
  successors: %bb.14, %bb.17

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1317 :: (load (s32) from %stack.5); ../mulvsi3.c:45:9
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1317 :: (load (s32) from %stack.3); ../mulvsi3.c:45:9
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1317; ../mulvsi3.c:45:9
  Bcc %bb.17, 1, killed $cpsr, debug-location !1317; ../mulvsi3.c:45:9
  B %bb.14, debug-location !1317; ../mulvsi3.c:45:9

bb.14.if.then24:
; predecessors: %bb.13
  successors: %bb.15, %bb.16

  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1318 :: (load (s32) from %stack.2); ../mulvsi3.c:47:25
  renamable $r0 = MVNi -2147483648, 14, $noreg, $noreg
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1318; ../mulvsi3.c:47:25
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1318; ../mulvsi3.c:47:25
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1320 :: (load (s32) from %stack.4); ../mulvsi3.c:47:13
  CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1320; ../mulvsi3.c:47:13
  Bcc %bb.16, 13, killed $cpsr, debug-location !1320; ../mulvsi3.c:47:13
  B %bb.15, debug-location !1320; ../mulvsi3.c:47:13

bb.15.if.then26:
; predecessors: %bb.14

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1321 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1321 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
  renamable $r1 = MOVi 48, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1321; ../mulvsi3.c:48:13

bb.16.if.end27:
; predecessors: %bb.14
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20, debug-location !1322; ../mulvsi3.c:49:5

bb.17.if.else:
; predecessors: %bb.13
  successors: %bb.18, %bb.19

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1323 :: (load (s32) from %stack.2); ../mulvsi3.c:52:27
  renamable $r1 = nsw RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !1323; ../mulvsi3.c:52:27
  renamable $r0 = MOVi -2147483648, 14, $noreg, $noreg
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1324; ../mulvsi3.c:52:25
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1324; ../mulvsi3.c:52:25
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1326 :: (load (s32) from %stack.4); ../mulvsi3.c:52:13
  CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1326; ../mulvsi3.c:52:13
  Bcc %bb.19, 13, killed $cpsr, debug-location !1326; ../mulvsi3.c:52:13
  B %bb.18, debug-location !1326; ../mulvsi3.c:52:13

bb.18.if.then31:
; predecessors: %bb.17

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1327 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1327 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
  renamable $r1 = MOVi 53, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1327; ../mulvsi3.c:53:13

bb.19.if.end32:
; predecessors: %bb.17
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20

bb.20.if.end33:
; predecessors: %bb.19, %bb.16
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1328; ../mulvsi3.c:55:5

bb.21.return:
; predecessors: %bb.20, %bb.12, %bb.8, %bb.3

  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1329 :: (load (s32) from %stack.0); ../mulvsi3.c:0
  $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !1329 :: (load (s32) from %stack.1); ../mulvsi3.c:0
  early-clobber renamable $r0 = nsw MULv5 killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1329; ../mulvsi3.c:0
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1330; ../mulvsi3.c:56:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1330; ../mulvsi3.c:56:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1330; ../mulvsi3.c:56:1

bb.22 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __mulvsi3.

# Machine code for function __paritydi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !1333 :: (store (s32) into %ir.all + 4, basealign 8); ../paritydi2.c:23:11
  STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !1333 :: (store (s32) into %ir.all, align 8); ../paritydi2.c:23:11
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1336 :: (dereferenceable load (s32) from %ir.low, align 8); ../paritydi2.c:24:39
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1335 :: (dereferenceable load (s32) from %ir.high); ../paritydi2.c:24:28
  renamable $r0 = EORrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1337; ../paritydi2.c:24:33
  BL_pred @__paritysi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1338; ../paritydi2.c:24:12
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1339; ../paritydi2.c:24:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1339; ../paritydi2.c:24:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1339; ../paritydi2.c:24:5

# End machine code for function __paritydi2.

# Machine code for function __paritysi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0
  renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1342; ../paritysi2.c:23:7
  renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1344; ../paritysi2.c:24:7
  renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1346; ../paritysi2.c:25:7
  renamable $r2 = ANDri killed renamable $r0, 15, 14, $noreg, $noreg, debug-location !1347; ../paritysi2.c:26:26
  $r1 = MOVi 150, 14, $noreg, $noreg
  $r1 = ORRri $r1, 26880, 14, $noreg, $noreg
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  renamable $r0 = ANDrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !1349; ../paritysi2.c:26:34
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1350; ../paritysi2.c:26:5

# End machine code for function __paritysi2.

# Machine code for function __popcountdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1
  $r2 = MOVr killed $r0, 14, $noreg, $noreg
  dead renamable $r0 = KILL renamable $r1
  dead renamable $r0 = KILL renamable $r2
  $r0 = MOVsi renamable $r1, 11, 14, $noreg, def $cpsr, debug-location !1352; ../popcountdi2.c:23:20
  $r3 = MOVsi renamable $r2, 5, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1352; ../popcountdi2.c:23:20
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !1353; ../popcountdi2.c:23:26
  renamable $r3 = ANDrr killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !1353; ../popcountdi2.c:23:26
  renamable $r2 = SUBrr killed renamable $r2, killed renamable $r3, 14, $noreg, def $cpsr, debug-location !1354; ../popcountdi2.c:23:13
  renamable $r3 = SBCrr killed renamable $r1, killed renamable $r0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1354; ../popcountdi2.c:23:13
  renamable $r12 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r3, 19, 14, $noreg, $noreg, debug-location !1356; ../popcountdi2.c:25:21
  renamable $r0 = ANDrsi renamable $r12, renamable $r2, 19, 14, $noreg, $noreg, debug-location !1356; ../popcountdi2.c:25:21
  renamable $r3 = ANDrr killed renamable $r3, renamable $r12, 14, $noreg, $noreg, debug-location !1357; ../popcountdi2.c:25:52
  renamable $r2 = ANDrr killed renamable $r2, killed renamable $r12, 14, $noreg, $noreg, debug-location !1357; ../popcountdi2.c:25:52
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1358; ../popcountdi2.c:25:46
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1358; ../popcountdi2.c:25:46
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1360; ../popcountdi2.c:27:14
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1360; ../popcountdi2.c:27:14
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !1361; ../popcountdi2.c:27:27
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1361; ../popcountdi2.c:27:27
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1363; ../popcountdi2.c:29:28
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1366; ../popcountdi2.c:32:11
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1368; ../popcountdi2.c:35:15
  renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !1369; ../popcountdi2.c:35:27
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1370; ../popcountdi2.c:35:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4

# End machine code for function __popcountdi2.

# Machine code for function __popcountsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1373; ../popcountsi2.c:23:23
  renamable $r1 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1374; ../popcountsi2.c:23:11
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrsi renamable $r2, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1376; ../popcountsi2.c:25:19
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1377; ../popcountsi2.c:25:38
  renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1378; ../popcountsi2.c:25:33
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1380; ../popcountsi2.c:27:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1381; ../popcountsi2.c:27:24
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1383; ../popcountsi2.c:29:12
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1385; ../popcountsi2.c:32:15
  renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !1386; ../popcountsi2.c:32:27
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1387; ../popcountsi2.c:32:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4

# End machine code for function __popcountsi2.

# Machine code for function __subvdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-4]
  fi#5: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.12, align=4
  cp#1: @__func__.__subvdi3, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  $r12 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  $r12 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !1389; ../subvdi3.c:24:27
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = SBCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1389; ../subvdi3.c:24:27
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !1391; ../subvdi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !1391; ../subvdi3.c:25:9
  B %bb.1, debug-location !1391; ../subvdi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1392 :: (load (s32) from %stack.3); ../subvdi3.c:27:15
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1392 :: (load (s32) from %stack.0); ../subvdi3.c:27:15
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1392 :: (load (s32) from %stack.2); ../subvdi3.c:27:15
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1392 :: (load (s32) from %stack.1); ../subvdi3.c:27:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1392; ../subvdi3.c:27:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1392; ../subvdi3.c:27:15
  Bcc %bb.3, 10, killed $cpsr, debug-location !1393; ../subvdi3.c:27:13
  B %bb.2, debug-location !1393; ../subvdi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1394 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1394 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1394; ../subvdi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !1395; ../subvdi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1396 :: (load (s32) from %stack.3); ../subvdi3.c:32:15
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1396 :: (load (s32) from %stack.0); ../subvdi3.c:32:15
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1396 :: (load (s32) from %stack.2); ../subvdi3.c:32:15
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1396 :: (load (s32) from %stack.1); ../subvdi3.c:32:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1396; ../subvdi3.c:32:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1396; ../subvdi3.c:32:15
  Bcc %bb.6, 11, killed $cpsr, debug-location !1397; ../subvdi3.c:32:13
  B %bb.5, debug-location !1397; ../subvdi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1398 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1398 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1398; ../subvdi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1399 :: (load (s32) from %stack.0); ../subvdi3.c:35:5
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1399 :: (load (s32) from %stack.1); ../subvdi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1399; ../subvdi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1399; ../subvdi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1399; ../subvdi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __subvdi3.

# Machine code for function __subvsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.13, align=4
  cp#1: @__func__.__subvsi3, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = SUBrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1401; ../subvsi3.c:24:27
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1403; ../subvsi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !1403; ../subvsi3.c:25:9
  B %bb.1, debug-location !1403; ../subvsi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1405 :: (load (s32) from %stack.0); ../subvsi3.c:27:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1405 :: (load (s32) from %stack.1); ../subvsi3.c:27:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1405; ../subvsi3.c:27:13
  Bcc %bb.3, 13, killed $cpsr, debug-location !1405; ../subvsi3.c:27:13
  B %bb.2, debug-location !1405; ../subvsi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1406 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1406 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1406; ../subvsi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !1407; ../subvsi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1409 :: (load (s32) from %stack.0); ../subvsi3.c:32:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1409 :: (load (s32) from %stack.1); ../subvsi3.c:32:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1409; ../subvsi3.c:32:13
  Bcc %bb.6, 12, killed $cpsr, debug-location !1409; ../subvsi3.c:32:13
  B %bb.5, debug-location !1409; ../subvsi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1410 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1410 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1410; ../subvsi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1411 :: (load (s32) from %stack.0); ../subvsi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1411; ../subvsi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1411; ../subvsi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1411; ../subvsi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __subvsi3.

# Machine code for function __ucmpdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $r2, $r3
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !1414 :: (store (s32) into %ir.all + 4, basealign 8); ../ucmpdi2.c:26:11
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !1414 :: (store (s32) into %ir.all, align 8); ../ucmpdi2.c:26:11
  STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !1416 :: (store (s32) into %ir.all1 + 4, basealign 8); ../ucmpdi2.c:28:11
  STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !1416 :: (store (s32) into %ir.all1, align 8); ../ucmpdi2.c:28:11
  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1418 :: (dereferenceable load (s32) from %ir.high); ../ucmpdi2.c:29:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1420 :: (dereferenceable load (s32) from %ir.high3); ../ucmpdi2.c:29:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1422; ../ucmpdi2.c:29:9
  Bcc %bb.2, 2, killed $cpsr, debug-location !1422; ../ucmpdi2.c:29:9
  B %bb.1, debug-location !1422; ../ucmpdi2.c:29:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1423; ../ucmpdi2.c:30:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1425 :: (dereferenceable load (s32) from %ir.high5); ../ucmpdi2.c:31:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1427 :: (dereferenceable load (s32) from %ir.high7); ../ucmpdi2.c:31:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1429; ../ucmpdi2.c:31:9
  Bcc %bb.4, 9, killed $cpsr, debug-location !1429; ../ucmpdi2.c:31:9
  B %bb.3, debug-location !1429; ../ucmpdi2.c:31:9

bb.3.if.then9:
; predecessors: %bb.2
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1430; ../ucmpdi2.c:32:9

bb.4.if.end10:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1431 :: (dereferenceable load (s32) from %ir.low, align 8); ../ucmpdi2.c:33:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1432 :: (dereferenceable load (s32) from %ir.low13, align 8); ../ucmpdi2.c:33:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1434; ../ucmpdi2.c:33:9
  Bcc %bb.6, 2, killed $cpsr, debug-location !1434; ../ucmpdi2.c:33:9
  B %bb.5, debug-location !1434; ../ucmpdi2.c:33:9

bb.5.if.then15:
; predecessors: %bb.4
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1435; ../ucmpdi2.c:34:9

bb.6.if.end16:
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1436 :: (dereferenceable load (s32) from %ir.low18, align 8); ../ucmpdi2.c:35:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1437 :: (dereferenceable load (s32) from %ir.low20, align 8); ../ucmpdi2.c:35:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1439; ../ucmpdi2.c:35:9
  Bcc %bb.8, 9, killed $cpsr, debug-location !1439; ../ucmpdi2.c:35:9
  B %bb.7, debug-location !1439; ../ucmpdi2.c:35:9

bb.7.if.then22:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1440; ../ucmpdi2.c:36:9

bb.8.if.end23:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1441; ../ucmpdi2.c:37:5

bb.9.return:
; predecessors: %bb.8, %bb.7, %bb.5, %bb.3, %bb.1

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1442 :: (load (s32) from %stack.2); ../ucmpdi2.c:0
  $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !1443; ../ucmpdi2.c:38:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1443; ../ucmpdi2.c:38:1

# End machine code for function __ucmpdi2.

# Machine code for function __aeabi_ulcmp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  BL_pred @__ucmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !1445; ../ucmpdi2.c:48:9
  renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !1446; ../ucmpdi2.c:48:25
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1447; ../ucmpdi2.c:48:2
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1447; ../ucmpdi2.c:48:2

# End machine code for function __aeabi_ulcmp.

# Machine code for function __udivdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1449; ../udivdi3.c:22:12
  renamable $r12 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1449 :: (store (s32) into stack); ../udivdi3.c:22:12
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1449; ../udivdi3.c:22:12
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1450; ../udivdi3.c:22:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1450; ../udivdi3.c:22:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1450; ../udivdi3.c:22:5

# End machine code for function __udivdi3.

# Machine code for function __udivmodsi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-4]
  fi#4: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  liveins: $r0, $r1, $r2, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1452; ../udivmodsi4.c:22:14
  $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !1452 :: (load (s32) from %stack.2); ../udivmodsi4.c:22:14
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1452 :: (load (s32) from %stack.1); ../udivmodsi4.c:22:14
  $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1452 :: (load (s32) from %stack.0); ../udivmodsi4.c:22:14
  early-clobber renamable $r3 = MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !1453; ../udivmodsi4.c:23:16
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1454; ../udivmodsi4.c:23:12
  STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !1455 :: (store (s32) into %ir.rem); ../udivmodsi4.c:23:8
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1456; ../udivmodsi4.c:24:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1456; ../udivmodsi4.c:24:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1456; ../udivmodsi4.c:24:3

# End machine code for function __udivmodsi4.

# Machine code for function __udivsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
  fi#7: size=4, align=4, at location [SP-40]
  fi#8: size=4, align=4, at location [SP-44]
  fi#9: size=4, align=4, at location [SP-48]
  fi#10: size=4, align=4, at location [SP-52]
  fi#11: size=4, align=4, at location [SP-56]
  fi#12: size=4, align=4, at location [SP-60]
  fi#13: size=4, align=4, at location [SP-64]
  fi#14: size=4, align=4, at location [SP-68]
  fi#15: size=4, align=4, at location [SP-4]
  fi#16: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 64, 14, $noreg, $noreg
  STRi12 $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1459; ../udivsi3.c:32:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !1459; ../udivsi3.c:32:9
  B %bb.1, debug-location !1459; ../udivsi3.c:32:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1460; ../udivsi3.c:33:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1462 :: (load (s32) from %stack.0); ../udivsi3.c:34:9
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1462; ../udivsi3.c:34:9
  Bcc %bb.4, 1, killed $cpsr, debug-location !1462; ../udivsi3.c:34:9
  B %bb.3, debug-location !1462; ../udivsi3.c:34:9

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1463; ../udivsi3.c:35:9

bb.4.if.end3:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1464 :: (load (s32) from %stack.1); ../udivsi3.c:36:10
  BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1464; ../udivsi3.c:36:10
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1464; ../udivsi3.c:36:10
  $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
  STRi12 $r1, $r11, -20, 14, $noreg :: (store (s32) into %stack.4)
  BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1465; ../udivsi3.c:36:29
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1465; ../udivsi3.c:36:29
  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1466 :: (load (s32) from %stack.4); ../udivsi3.c:36:27
  renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1466; ../udivsi3.c:36:27
  STRi12 $r0, $r11, -16, 14, $noreg :: (store (s32) into %stack.3)
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1468; ../udivsi3.c:38:9
  Bcc %bb.6, 3, killed $cpsr, debug-location !1468; ../udivsi3.c:38:9
  B %bb.5, debug-location !1468; ../udivsi3.c:38:9

bb.5.if.then5:
; predecessors: %bb.4
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1469; ../udivsi3.c:39:9

bb.6.if.end6:
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !1471 :: (load (s32) from %stack.3); ../udivsi3.c:40:9
  CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !1471; ../udivsi3.c:40:9
  Bcc %bb.8, 1, killed $cpsr, debug-location !1471; ../udivsi3.c:40:9
  B %bb.7, debug-location !1471; ../udivsi3.c:40:9

bb.7.if.then8:
; predecessors: %bb.6
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1472; ../udivsi3.c:41:9

bb.8.if.end9:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1473 :: (load (s32) from %stack.0); ../udivsi3.c:42:5
  $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !1473 :: (load (s32) from %stack.3); ../udivsi3.c:42:5
  renamable $r1 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !1473; ../udivsi3.c:42:5
  renamable $r2 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !1474; ../udivsi3.c:45:28
  renamable $r3 = MOVsr renamable $r0, killed renamable $r2, 2, 14, $noreg, $noreg, debug-location !1475; ../udivsi3.c:45:11
  renamable $r2 = MOVsr renamable $r0, renamable $r1, 3, 14, $noreg, $noreg, debug-location !1476; ../udivsi3.c:46:11
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
  STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.9, debug-location !1477; ../udivsi3.c:48:5

bb.9.for.cond:
; predecessors: %bb.8, %bb.11
  successors: %bb.12, %bb.10

  $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !1478 :: (load (s32) from %stack.8); ../udivsi3.c:0
  $r2 = LDRi12 $sp, 32, 14, $noreg, debug-location !1478 :: (load (s32) from %stack.7); ../udivsi3.c:0
  $r0 = LDRi12 $r11, -28, 14, $noreg, debug-location !1478 :: (load (s32) from %stack.6); ../udivsi3.c:0
  $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1478 :: (load (s32) from %stack.5); ../udivsi3.c:0
  STRi12 killed $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.12)
  STRi12 $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.11)
  STRi12 killed $r2, $sp, 20, 14, $noreg :: (store (s32) into %stack.10)
  STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.9)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1477; ../udivsi3.c:48:5
  Bcc %bb.12, 0, killed $cpsr, debug-location !1477; ../udivsi3.c:48:5
  B %bb.10, debug-location !1477; ../udivsi3.c:48:5

bb.10.for.body:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1480 :: (load (s32) from %stack.1); ../udivsi3.c:51:22
  $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !1480 :: (load (s32) from %stack.9); ../udivsi3.c:51:22
  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1480 :: (load (s32) from %stack.10); ../udivsi3.c:51:22
  renamable $r0 = MOVsi renamable $r0, 10, 14, $noreg, $noreg, debug-location !1480; ../udivsi3.c:51:22
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r2, 251, 14, $noreg, $noreg, debug-location !1480; ../udivsi3.c:51:22
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.14)
  renamable $r0 = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !1481; ../udivsi3.c:60:41
  renamable $r0 = ADDrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1481; ../udivsi3.c:60:41
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.11, debug-location !1482; ../udivsi3.c:63:5

bb.11.for.inc:
; predecessors: %bb.10
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !1484 :: (load (s32) from %stack.11); ../udivsi3.c:62:11
  $r3 = LDRi12 $sp, 12, 14, $noreg, debug-location !1484 :: (load (s32) from %stack.12); ../udivsi3.c:62:11
  $r12 = LDRi12 $sp, 24, 14, $noreg, debug-location !1484 :: (load (s32) from %stack.9); ../udivsi3.c:62:11
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1484 :: (load (s32) from %stack.13); ../udivsi3.c:62:11
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1484 :: (load (s32) from %stack.14); ../udivsi3.c:62:11
  $lr = LDRi12 $r11, -8, 14, $noreg, debug-location !1484 :: (load (s32) from %stack.1); ../udivsi3.c:62:11
  renamable $lr = SUBrr renamable $r2, renamable $lr, 14, $noreg, $noreg, debug-location !1484; ../udivsi3.c:62:11
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1484; ../udivsi3.c:62:11
  $r2 = MOVr killed renamable $lr, 4, killed $cpsr, $noreg, implicit renamable $r2, debug-location !1484; ../udivsi3.c:62:11
  renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !1485; ../udivsi3.c:61:19
  renamable $r3 = ORRrsi renamable $r3, renamable $r12, 10, 14, $noreg, $noreg, debug-location !1487; ../udivsi3.c:52:22
  renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1488; ../udivsi3.c:48:20
  STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
  STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.9, debug-location !1477; ../udivsi3.c:48:5

bb.12.for.end:
; predecessors: %bb.9
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1491 :: (load (s32) from %stack.12); ../udivsi3.c:64:18
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1491 :: (load (s32) from %stack.9); ../udivsi3.c:64:18
  renamable $r0 = ORRrsi renamable $r0, renamable $r1, 10, 14, $noreg, $noreg, debug-location !1491; ../udivsi3.c:64:18
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1492; ../udivsi3.c:65:5

bb.13.return:
; predecessors: %bb.12, %bb.7, %bb.5, %bb.3, %bb.1

  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1478 :: (load (s32) from %stack.2); ../udivsi3.c:0
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1493; ../udivsi3.c:66:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1493; ../udivsi3.c:66:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1493; ../udivsi3.c:66:1

# End machine code for function __udivsi3.

# Machine code for function __umoddi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1495; ../umoddi3.c:23:5
  renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1495 :: (store (s32) into stack); ../umoddi3.c:23:5
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1495; ../umoddi3.c:23:5
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1496 :: (dereferenceable load (s32) from %ir.r, align 8); ../umoddi3.c:24:12
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1496 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../umoddi3.c:24:12
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1497; ../umoddi3.c:24:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1497; ../umoddi3.c:24:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1497; ../umoddi3.c:24:5

# End machine code for function __umoddi3.

# Machine code for function __umodsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1499; ../umodsi3.c:22:16
  $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !1499 :: (load (s32) from %stack.1); ../umodsi3.c:22:16
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1499; ../umodsi3.c:22:16
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1500 :: (load (s32) from %stack.0); ../umodsi3.c:22:32
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1500; ../umodsi3.c:22:32
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1501; ../umodsi3.c:22:14
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1502; ../umodsi3.c:22:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1502; ../umodsi3.c:22:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1502; ../umodsi3.c:22:5

# End machine code for function __umodsi3.

# Machine code for function memcpy: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 20
  STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1504; ../memory.c:8:6

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1505 :: (load (s32) from %stack.3); ../memory.c:0
  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1505 :: (load (s32) from %stack.0); ../memory.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1507; ../memory.c:8:2
  Bcc %bb.4, 0, killed $cpsr, debug-location !1507; ../memory.c:8:2
  B %bb.2, debug-location !1507; ../memory.c:8:2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1508 :: (load (s32) from %stack.1); ../memory.c:9:21
  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1508 :: (load (s32) from %stack.4); ../memory.c:9:21
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1508 :: (load (s32) from %stack.2); ../memory.c:9:21
  renamable $r0 = LDRBrs renamable $r0, renamable $r2, 0, 14, $noreg, debug-location !1508 :: (load (s8) from %ir.arrayidx); ../memory.c:9:21
  STRBrs killed renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1510 :: (store (s8) into %ir.arrayidx1); ../memory.c:9:19
  B %bb.3, debug-location !1511; ../memory.c:10:2

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1512 :: (load (s32) from %stack.4); ../memory.c:8:26
  renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1512; ../memory.c:8:26
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1507; ../memory.c:8:2

bb.4.for.end:
; predecessors: %bb.1

  renamable $r0 = IMPLICIT_DEF
  $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1514; ../memory.c:11:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1514; ../memory.c:11:1

# End machine code for function memcpy.

# Machine code for function memset: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 20
  STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1516; ../memory.c:17:6

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1517 :: (load (s32) from %stack.3); ../memory.c:0
  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1517 :: (load (s32) from %stack.0); ../memory.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1519; ../memory.c:17:2
  Bcc %bb.4, 0, killed $cpsr, debug-location !1519; ../memory.c:17:2
  B %bb.2, debug-location !1519; ../memory.c:17:2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1522 :: (load (s32) from %stack.2); ../memory.c:18:11
  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1522 :: (load (s32) from %stack.1); ../memory.c:18:11
  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1522 :: (load (s32) from %stack.4); ../memory.c:18:11
  STRBrs renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1522 :: (store (s8) into %ir.arrayidx); ../memory.c:18:11
  B %bb.3, debug-location !1523; ../memory.c:19:2

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1524 :: (load (s32) from %stack.4); ../memory.c:17:26
  renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1524; ../memory.c:17:26
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1519; ../memory.c:17:2

bb.4.for.end:
; predecessors: %bb.1

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1526 :: (load (s32) from %stack.1); ../memory.c:20:2
  $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1526; ../memory.c:20:2
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1526; ../memory.c:20:2

# End machine code for function memset.

